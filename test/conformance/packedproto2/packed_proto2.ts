/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: test/conformance/packedproto2/packedproto2.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class HydratedQuickReplyButton extends pb_1.Message {
    constructor(data?: any[] | {
        displayText?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayText" in data && data.displayText != undefined) {
                this.displayText = data.displayText;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get displayText() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set displayText(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        displayText?: string;
        id?: string;
    }) {
        const message = new HydratedQuickReplyButton({});
        if (data.displayText != null) {
            message.displayText = data.displayText;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            displayText?: string;
            id?: string;
        } = {
            displayText: pb_1.Message.getField(this, 1) != null ? this.displayText : undefined,
            id: pb_1.Message.getField(this, 2) != null ? this.id : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.displayText === "string" && this.displayText.length)
            writer.writeString(1, this.displayText);
        if (typeof this.id === "string" && this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HydratedQuickReplyButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HydratedQuickReplyButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.displayText = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HydratedQuickReplyButton {
        return HydratedQuickReplyButton.deserialize(bytes);
    }
}
export class HydratedURLButton extends pb_1.Message {
    constructor(data?: any[] | {
        displayText?: string;
        url?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayText" in data && data.displayText != undefined) {
                this.displayText = data.displayText;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
        }
    }
    get displayText() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set displayText(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        displayText?: string;
        url?: string;
    }) {
        const message = new HydratedURLButton({});
        if (data.displayText != null) {
            message.displayText = data.displayText;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        return message;
    }
    toObject() {
        const data: {
            displayText?: string;
            url?: string;
        } = {
            displayText: pb_1.Message.getField(this, 1) != null ? this.displayText : undefined,
            url: pb_1.Message.getField(this, 2) != null ? this.url : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.displayText === "string" && this.displayText.length)
            writer.writeString(1, this.displayText);
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(2, this.url);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HydratedURLButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HydratedURLButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.displayText = reader.readString();
                    break;
                case 2:
                    message.url = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HydratedURLButton {
        return HydratedURLButton.deserialize(bytes);
    }
}
export class HydratedCallButton extends pb_1.Message {
    constructor(data?: any[] | {
        displayText?: string;
        phoneNumber?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayText" in data && data.displayText != undefined) {
                this.displayText = data.displayText;
            }
            if ("phoneNumber" in data && data.phoneNumber != undefined) {
                this.phoneNumber = data.phoneNumber;
            }
        }
    }
    get displayText() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set displayText(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get phoneNumber() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set phoneNumber(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        displayText?: string;
        phoneNumber?: string;
    }) {
        const message = new HydratedCallButton({});
        if (data.displayText != null) {
            message.displayText = data.displayText;
        }
        if (data.phoneNumber != null) {
            message.phoneNumber = data.phoneNumber;
        }
        return message;
    }
    toObject() {
        const data: {
            displayText?: string;
            phoneNumber?: string;
        } = {
            displayText: pb_1.Message.getField(this, 1) != null ? this.displayText : undefined,
            phoneNumber: pb_1.Message.getField(this, 2) != null ? this.phoneNumber : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.displayText === "string" && this.displayText.length)
            writer.writeString(1, this.displayText);
        if (typeof this.phoneNumber === "string" && this.phoneNumber.length)
            writer.writeString(2, this.phoneNumber);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HydratedCallButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HydratedCallButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.displayText = reader.readString();
                    break;
                case 2:
                    message.phoneNumber = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HydratedCallButton {
        return HydratedCallButton.deserialize(bytes);
    }
}
export class HydratedTemplateButton extends pb_1.Message {
    constructor(data?: any[] | ({
        index?: number;
    } & (({
        quickReplyButton?: HydratedQuickReplyButton;
        urlButton?: never;
        callButton?: never;
    } | {
        quickReplyButton?: never;
        urlButton?: HydratedURLButton;
        callButton?: never;
    } | {
        quickReplyButton?: never;
        urlButton?: never;
        callButton?: HydratedCallButton;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2, 3]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
            if ("quickReplyButton" in data && data.quickReplyButton != undefined) {
                this.quickReplyButton = data.quickReplyButton;
            }
            if ("urlButton" in data && data.urlButton != undefined) {
                this.urlButton = data.urlButton;
            }
            if ("callButton" in data && data.callButton != undefined) {
                this.callButton = data.callButton;
            }
        }
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get quickReplyButton() {
        return pb_1.Message.getWrapperField(this, HydratedQuickReplyButton, 1) as HydratedQuickReplyButton;
    }
    set quickReplyButton(value: HydratedQuickReplyButton) {
        pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3], value);
    }
    get urlButton() {
        return pb_1.Message.getWrapperField(this, HydratedURLButton, 2) as HydratedURLButton;
    }
    set urlButton(value: HydratedURLButton) {
        pb_1.Message.setOneofWrapperField(this, 2, [1, 2, 3], value);
    }
    get callButton() {
        return pb_1.Message.getWrapperField(this, HydratedCallButton, 3) as HydratedCallButton;
    }
    set callButton(value: HydratedCallButton) {
        pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3], value);
    }
    get hydratedButton() {
        const cases: {
            [index: number]: "none" | "quickReplyButton" | "urlButton" | "callButton";
        } = {
            0: "none",
            1: "quickReplyButton",
            2: "urlButton",
            3: "callButton"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        index?: number;
        quickReplyButton?: ReturnType<typeof HydratedQuickReplyButton.prototype.toObject>;
        urlButton?: ReturnType<typeof HydratedURLButton.prototype.toObject>;
        callButton?: ReturnType<typeof HydratedCallButton.prototype.toObject>;
    }) {
        const message = new HydratedTemplateButton({});
        if (data.index != null) {
            message.index = data.index;
        }
        if (data.quickReplyButton != null) {
            message.quickReplyButton = HydratedQuickReplyButton.fromObject(data.quickReplyButton);
        }
        if (data.urlButton != null) {
            message.urlButton = HydratedURLButton.fromObject(data.urlButton);
        }
        if (data.callButton != null) {
            message.callButton = HydratedCallButton.fromObject(data.callButton);
        }
        return message;
    }
    toObject() {
        const data: {
            index?: number;
            quickReplyButton?: ReturnType<typeof HydratedQuickReplyButton.prototype.toObject>;
            urlButton?: ReturnType<typeof HydratedURLButton.prototype.toObject>;
            callButton?: ReturnType<typeof HydratedCallButton.prototype.toObject>;
        } = {
            index: pb_1.Message.getField(this, 4) != null ? this.index : undefined,
            quickReplyButton: pb_1.Message.getField(this, 1) != null ? this.quickReplyButton != null ? this.quickReplyButton.toObject() : undefined : undefined,
            urlButton: pb_1.Message.getField(this, 2) != null ? this.urlButton != null ? this.urlButton.toObject() : undefined : undefined,
            callButton: pb_1.Message.getField(this, 3) != null ? this.callButton != null ? this.callButton.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.index);
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.quickReplyButton, () => this.quickReplyButton.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.urlButton, () => this.urlButton.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.callButton, () => this.callButton.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HydratedTemplateButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HydratedTemplateButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.index = reader.readUint32();
                    break;
                case 1:
                    reader.readMessage(message.quickReplyButton, () => message.quickReplyButton = HydratedQuickReplyButton.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.urlButton, () => message.urlButton = HydratedURLButton.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.callButton, () => message.callButton = HydratedCallButton.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HydratedTemplateButton {
        return HydratedTemplateButton.deserialize(bytes);
    }
}
export class QuickReplyButton extends pb_1.Message {
    constructor(data?: any[] | {
        displayText?: HighlyStructuredMessage;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayText" in data && data.displayText != undefined) {
                this.displayText = data.displayText;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get displayText() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 1) as HighlyStructuredMessage;
    }
    set displayText(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        displayText?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        id?: string;
    }) {
        const message = new QuickReplyButton({});
        if (data.displayText != null) {
            message.displayText = HighlyStructuredMessage.fromObject(data.displayText);
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            displayText?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            id?: string;
        } = {
            displayText: pb_1.Message.getField(this, 1) != null ? this.displayText != null ? this.displayText.toObject() : undefined : undefined,
            id: pb_1.Message.getField(this, 2) != null ? this.id : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.displayText, () => this.displayText.serialize(writer));
        if (typeof this.id === "string" && this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuickReplyButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuickReplyButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.displayText, () => message.displayText = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): QuickReplyButton {
        return QuickReplyButton.deserialize(bytes);
    }
}
export class URLButton extends pb_1.Message {
    constructor(data?: any[] | {
        displayText?: HighlyStructuredMessage;
        url?: HighlyStructuredMessage;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayText" in data && data.displayText != undefined) {
                this.displayText = data.displayText;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
        }
    }
    get displayText() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 1) as HighlyStructuredMessage;
    }
    set displayText(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get url() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 2) as HighlyStructuredMessage;
    }
    set url(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    static fromObject(data: {
        displayText?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        url?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
    }) {
        const message = new URLButton({});
        if (data.displayText != null) {
            message.displayText = HighlyStructuredMessage.fromObject(data.displayText);
        }
        if (data.url != null) {
            message.url = HighlyStructuredMessage.fromObject(data.url);
        }
        return message;
    }
    toObject() {
        const data: {
            displayText?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            url?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        } = {
            displayText: pb_1.Message.getField(this, 1) != null ? this.displayText != null ? this.displayText.toObject() : undefined : undefined,
            url: pb_1.Message.getField(this, 2) != null ? this.url != null ? this.url.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.displayText, () => this.displayText.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.url, () => this.url.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): URLButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new URLButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.displayText, () => message.displayText = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.url, () => message.url = HighlyStructuredMessage.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): URLButton {
        return URLButton.deserialize(bytes);
    }
}
export class CallButton extends pb_1.Message {
    constructor(data?: any[] | {
        displayText?: HighlyStructuredMessage;
        phoneNumber?: HighlyStructuredMessage;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayText" in data && data.displayText != undefined) {
                this.displayText = data.displayText;
            }
            if ("phoneNumber" in data && data.phoneNumber != undefined) {
                this.phoneNumber = data.phoneNumber;
            }
        }
    }
    get displayText() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 1) as HighlyStructuredMessage;
    }
    set displayText(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get phoneNumber() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 2) as HighlyStructuredMessage;
    }
    set phoneNumber(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    static fromObject(data: {
        displayText?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        phoneNumber?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
    }) {
        const message = new CallButton({});
        if (data.displayText != null) {
            message.displayText = HighlyStructuredMessage.fromObject(data.displayText);
        }
        if (data.phoneNumber != null) {
            message.phoneNumber = HighlyStructuredMessage.fromObject(data.phoneNumber);
        }
        return message;
    }
    toObject() {
        const data: {
            displayText?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            phoneNumber?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        } = {
            displayText: pb_1.Message.getField(this, 1) != null ? this.displayText != null ? this.displayText.toObject() : undefined : undefined,
            phoneNumber: pb_1.Message.getField(this, 2) != null ? this.phoneNumber != null ? this.phoneNumber.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.displayText, () => this.displayText.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.phoneNumber, () => this.phoneNumber.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.displayText, () => message.displayText = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.phoneNumber, () => message.phoneNumber = HighlyStructuredMessage.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CallButton {
        return CallButton.deserialize(bytes);
    }
}
export class TemplateButton extends pb_1.Message {
    constructor(data?: any[] | ({
        index?: number;
    } & (({
        quickReplyButton?: QuickReplyButton;
        urlButton?: never;
        callButton?: never;
    } | {
        quickReplyButton?: never;
        urlButton?: URLButton;
        callButton?: never;
    } | {
        quickReplyButton?: never;
        urlButton?: never;
        callButton?: CallButton;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2, 3]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
            if ("quickReplyButton" in data && data.quickReplyButton != undefined) {
                this.quickReplyButton = data.quickReplyButton;
            }
            if ("urlButton" in data && data.urlButton != undefined) {
                this.urlButton = data.urlButton;
            }
            if ("callButton" in data && data.callButton != undefined) {
                this.callButton = data.callButton;
            }
        }
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get quickReplyButton() {
        return pb_1.Message.getWrapperField(this, QuickReplyButton, 1) as QuickReplyButton;
    }
    set quickReplyButton(value: QuickReplyButton) {
        pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3], value);
    }
    get urlButton() {
        return pb_1.Message.getWrapperField(this, URLButton, 2) as URLButton;
    }
    set urlButton(value: URLButton) {
        pb_1.Message.setOneofWrapperField(this, 2, [1, 2, 3], value);
    }
    get callButton() {
        return pb_1.Message.getWrapperField(this, CallButton, 3) as CallButton;
    }
    set callButton(value: CallButton) {
        pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3], value);
    }
    get button() {
        const cases: {
            [index: number]: "none" | "quickReplyButton" | "urlButton" | "callButton";
        } = {
            0: "none",
            1: "quickReplyButton",
            2: "urlButton",
            3: "callButton"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        index?: number;
        quickReplyButton?: ReturnType<typeof QuickReplyButton.prototype.toObject>;
        urlButton?: ReturnType<typeof URLButton.prototype.toObject>;
        callButton?: ReturnType<typeof CallButton.prototype.toObject>;
    }) {
        const message = new TemplateButton({});
        if (data.index != null) {
            message.index = data.index;
        }
        if (data.quickReplyButton != null) {
            message.quickReplyButton = QuickReplyButton.fromObject(data.quickReplyButton);
        }
        if (data.urlButton != null) {
            message.urlButton = URLButton.fromObject(data.urlButton);
        }
        if (data.callButton != null) {
            message.callButton = CallButton.fromObject(data.callButton);
        }
        return message;
    }
    toObject() {
        const data: {
            index?: number;
            quickReplyButton?: ReturnType<typeof QuickReplyButton.prototype.toObject>;
            urlButton?: ReturnType<typeof URLButton.prototype.toObject>;
            callButton?: ReturnType<typeof CallButton.prototype.toObject>;
        } = {
            index: pb_1.Message.getField(this, 4) != null ? this.index : undefined,
            quickReplyButton: pb_1.Message.getField(this, 1) != null ? this.quickReplyButton != null ? this.quickReplyButton.toObject() : undefined : undefined,
            urlButton: pb_1.Message.getField(this, 2) != null ? this.urlButton != null ? this.urlButton.toObject() : undefined : undefined,
            callButton: pb_1.Message.getField(this, 3) != null ? this.callButton != null ? this.callButton.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.index);
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.quickReplyButton, () => this.quickReplyButton.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.urlButton, () => this.urlButton.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.callButton, () => this.callButton.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TemplateButton {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TemplateButton();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.index = reader.readUint32();
                    break;
                case 1:
                    reader.readMessage(message.quickReplyButton, () => message.quickReplyButton = QuickReplyButton.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.urlButton, () => message.urlButton = URLButton.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.callButton, () => message.callButton = CallButton.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TemplateButton {
        return TemplateButton.deserialize(bytes);
    }
}
export class Location extends pb_1.Message {
    constructor(data?: any[] | {
        degreesLatitude?: number;
        degreesLongitude?: number;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("degreesLatitude" in data && data.degreesLatitude != undefined) {
                this.degreesLatitude = data.degreesLatitude;
            }
            if ("degreesLongitude" in data && data.degreesLongitude != undefined) {
                this.degreesLongitude = data.degreesLongitude;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get degreesLatitude() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set degreesLatitude(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get degreesLongitude() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set degreesLongitude(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        degreesLatitude?: number;
        degreesLongitude?: number;
        name?: string;
    }) {
        const message = new Location({});
        if (data.degreesLatitude != null) {
            message.degreesLatitude = data.degreesLatitude;
        }
        if (data.degreesLongitude != null) {
            message.degreesLongitude = data.degreesLongitude;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            degreesLatitude?: number;
            degreesLongitude?: number;
            name?: string;
        } = {
            degreesLatitude: pb_1.Message.getField(this, 1) != null ? this.degreesLatitude : undefined,
            degreesLongitude: pb_1.Message.getField(this, 2) != null ? this.degreesLongitude : undefined,
            name: pb_1.Message.getField(this, 3) != null ? this.name : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeDouble(1, this.degreesLatitude);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeDouble(2, this.degreesLongitude);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(3, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Location {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Location();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.degreesLatitude = reader.readDouble();
                    break;
                case 2:
                    message.degreesLongitude = reader.readDouble();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Location {
        return Location.deserialize(bytes);
    }
}
export class Point extends pb_1.Message {
    constructor(data?: any[] | {
        xDeprecated?: number;
        yDeprecated?: number;
        x?: number;
        y?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("xDeprecated" in data && data.xDeprecated != undefined) {
                this.xDeprecated = data.xDeprecated;
            }
            if ("yDeprecated" in data && data.yDeprecated != undefined) {
                this.yDeprecated = data.yDeprecated;
            }
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
        }
    }
    get xDeprecated() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set xDeprecated(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get yDeprecated() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set yDeprecated(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        xDeprecated?: number;
        yDeprecated?: number;
        x?: number;
        y?: number;
    }) {
        const message = new Point({});
        if (data.xDeprecated != null) {
            message.xDeprecated = data.xDeprecated;
        }
        if (data.yDeprecated != null) {
            message.yDeprecated = data.yDeprecated;
        }
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        return message;
    }
    toObject() {
        const data: {
            xDeprecated?: number;
            yDeprecated?: number;
            x?: number;
            y?: number;
        } = {
            xDeprecated: pb_1.Message.getField(this, 1) != null ? this.xDeprecated : undefined,
            yDeprecated: pb_1.Message.getField(this, 2) != null ? this.yDeprecated : undefined,
            x: pb_1.Message.getField(this, 3) != null ? this.x : undefined,
            y: pb_1.Message.getField(this, 4) != null ? this.y : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeInt32(1, this.xDeprecated);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeInt32(2, this.yDeprecated);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeDouble(3, this.x);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeDouble(4, this.y);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Point {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Point();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.xDeprecated = reader.readInt32();
                    break;
                case 2:
                    message.yDeprecated = reader.readInt32();
                    break;
                case 3:
                    message.x = reader.readDouble();
                    break;
                case 4:
                    message.y = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Point {
        return Point.deserialize(bytes);
    }
}
export class InteractiveAnnotation extends pb_1.Message {
    constructor(data?: any[] | ({
        polygonVertices: Point[];
    } & (({
        location?: Location;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], [[2]]);
        if (!Array.isArray(data) && typeof data == "object") {
            this.polygonVertices = data.polygonVertices;
            if ("location" in data && data.location != undefined) {
                this.location = data.location;
            }
        }
    }
    get polygonVertices() {
        return pb_1.Message.getRepeatedWrapperField(this, Point, 1) as Point[];
    }
    set polygonVertices(value: Point[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get location() {
        return pb_1.Message.getWrapperField(this, Location, 2) as Location;
    }
    set location(value: Location) {
        pb_1.Message.setOneofWrapperField(this, 2, [2], value);
    }
    get action() {
        const cases: {
            [index: number]: "none" | "location";
        } = {
            0: "none",
            2: "location"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        polygonVertices: ReturnType<typeof Point.prototype.toObject>[];
        location?: ReturnType<typeof Location.prototype.toObject>;
    }) {
        const message = new InteractiveAnnotation({
            polygonVertices: data.polygonVertices.map(item => Point.fromObject(item))
        });
        if (data.location != null) {
            message.location = Location.fromObject(data.location);
        }
        return message;
    }
    toObject() {
        const data: {
            polygonVertices: ReturnType<typeof Point.prototype.toObject>[];
            location?: ReturnType<typeof Location.prototype.toObject>;
        } = {
            polygonVertices: pb_1.Message.getField(this, 1) != null ? this.polygonVertices.map((item: Point) => item.toObject()) : undefined,
            location: pb_1.Message.getField(this, 2) != null ? this.location != null ? this.location.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.polygonVertices.length)
            writer.writeRepeatedMessage(1, this.polygonVertices, (item: Point) => item.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.location, () => this.location.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InteractiveAnnotation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InteractiveAnnotation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.polygonVertices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Point.deserialize(reader), Point));
                    break;
                case 2:
                    reader.readMessage(message.location, () => message.location = Location.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InteractiveAnnotation {
        return InteractiveAnnotation.deserialize(bytes);
    }
}
export class AdReplyInfo extends pb_1.Message {
    constructor(data?: any[] | {
        advertiserName?: string;
        mediaType?: AdReplyInfo.AD_REPLY_INFO_MEDIATYPE;
        jpegThumbnail?: Uint8Array;
        caption?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("advertiserName" in data && data.advertiserName != undefined) {
                this.advertiserName = data.advertiserName;
            }
            if ("mediaType" in data && data.mediaType != undefined) {
                this.mediaType = data.mediaType;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("caption" in data && data.caption != undefined) {
                this.caption = data.caption;
            }
        }
    }
    get advertiserName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set advertiserName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get mediaType() {
        return pb_1.Message.getFieldWithDefault(this, 2, AdReplyInfo.AD_REPLY_INFO_MEDIATYPE.NONE) as AdReplyInfo.AD_REPLY_INFO_MEDIATYPE;
    }
    set mediaType(value: AdReplyInfo.AD_REPLY_INFO_MEDIATYPE) {
        pb_1.Message.setField(this, 2, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get caption() {
        return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
    }
    set caption(value: string) {
        pb_1.Message.setField(this, 17, value);
    }
    static fromObject(data: {
        advertiserName?: string;
        mediaType?: AdReplyInfo.AD_REPLY_INFO_MEDIATYPE;
        jpegThumbnail?: Uint8Array;
        caption?: string;
    }) {
        const message = new AdReplyInfo({});
        if (data.advertiserName != null) {
            message.advertiserName = data.advertiserName;
        }
        if (data.mediaType != null) {
            message.mediaType = data.mediaType;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.caption != null) {
            message.caption = data.caption;
        }
        return message;
    }
    toObject() {
        const data: {
            advertiserName?: string;
            mediaType?: AdReplyInfo.AD_REPLY_INFO_MEDIATYPE;
            jpegThumbnail?: Uint8Array;
            caption?: string;
        } = {
            advertiserName: pb_1.Message.getField(this, 1) != null ? this.advertiserName : undefined,
            mediaType: pb_1.Message.getField(this, 2) != null ? this.mediaType : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            caption: pb_1.Message.getField(this, 17) != null ? this.caption : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.advertiserName === "string" && this.advertiserName.length)
            writer.writeString(1, this.advertiserName);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeEnum(2, this.mediaType);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (typeof this.caption === "string" && this.caption.length)
            writer.writeString(17, this.caption);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdReplyInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdReplyInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.advertiserName = reader.readString();
                    break;
                case 2:
                    message.mediaType = reader.readEnum();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    message.caption = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdReplyInfo {
        return AdReplyInfo.deserialize(bytes);
    }
}
export namespace AdReplyInfo {
    export enum AD_REPLY_INFO_MEDIATYPE {
        NONE = 0,
        IMAGE = 1,
        VIDEO = 2
    }
}
export class ContextInfo extends pb_1.Message {
    constructor(data?: any[] | {
        stanzaId?: string;
        participant?: string;
        quotedMessage?: Message;
        remoteJid?: string;
        mentionedJid: string[];
        conversionSource?: string;
        conversionData?: Uint8Array;
        conversionDelaySeconds?: number;
        forwardingScore?: number;
        isForwarded?: boolean;
        quotedAd?: AdReplyInfo;
        placeholderKey?: MessageKey;
        expiration?: number;
        ephemeralSettingTimestamp?: number;
        ephemeralSharedSecret?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stanzaId" in data && data.stanzaId != undefined) {
                this.stanzaId = data.stanzaId;
            }
            if ("participant" in data && data.participant != undefined) {
                this.participant = data.participant;
            }
            if ("quotedMessage" in data && data.quotedMessage != undefined) {
                this.quotedMessage = data.quotedMessage;
            }
            if ("remoteJid" in data && data.remoteJid != undefined) {
                this.remoteJid = data.remoteJid;
            }
            this.mentionedJid = data.mentionedJid;
            if ("conversionSource" in data && data.conversionSource != undefined) {
                this.conversionSource = data.conversionSource;
            }
            if ("conversionData" in data && data.conversionData != undefined) {
                this.conversionData = data.conversionData;
            }
            if ("conversionDelaySeconds" in data && data.conversionDelaySeconds != undefined) {
                this.conversionDelaySeconds = data.conversionDelaySeconds;
            }
            if ("forwardingScore" in data && data.forwardingScore != undefined) {
                this.forwardingScore = data.forwardingScore;
            }
            if ("isForwarded" in data && data.isForwarded != undefined) {
                this.isForwarded = data.isForwarded;
            }
            if ("quotedAd" in data && data.quotedAd != undefined) {
                this.quotedAd = data.quotedAd;
            }
            if ("placeholderKey" in data && data.placeholderKey != undefined) {
                this.placeholderKey = data.placeholderKey;
            }
            if ("expiration" in data && data.expiration != undefined) {
                this.expiration = data.expiration;
            }
            if ("ephemeralSettingTimestamp" in data && data.ephemeralSettingTimestamp != undefined) {
                this.ephemeralSettingTimestamp = data.ephemeralSettingTimestamp;
            }
            if ("ephemeralSharedSecret" in data && data.ephemeralSharedSecret != undefined) {
                this.ephemeralSharedSecret = data.ephemeralSharedSecret;
            }
        }
    }
    get stanzaId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set stanzaId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get participant() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set participant(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get quotedMessage() {
        return pb_1.Message.getWrapperField(this, Message, 3) as Message;
    }
    set quotedMessage(value: Message) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get remoteJid() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set remoteJid(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get mentionedJid() {
        return pb_1.Message.getFieldWithDefault(this, 15, []) as string[];
    }
    set mentionedJid(value: string[]) {
        pb_1.Message.setField(this, 15, value);
    }
    get conversionSource() {
        return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
    }
    set conversionSource(value: string) {
        pb_1.Message.setField(this, 18, value);
    }
    get conversionData() {
        return pb_1.Message.getFieldWithDefault(this, 19, new Uint8Array()) as Uint8Array;
    }
    set conversionData(value: Uint8Array) {
        pb_1.Message.setField(this, 19, value);
    }
    get conversionDelaySeconds() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set conversionDelaySeconds(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get forwardingScore() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set forwardingScore(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get isForwarded() {
        return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
    }
    set isForwarded(value: boolean) {
        pb_1.Message.setField(this, 22, value);
    }
    get quotedAd() {
        return pb_1.Message.getWrapperField(this, AdReplyInfo, 23) as AdReplyInfo;
    }
    set quotedAd(value: AdReplyInfo) {
        pb_1.Message.setWrapperField(this, 23, value);
    }
    get placeholderKey() {
        return pb_1.Message.getWrapperField(this, MessageKey, 24) as MessageKey;
    }
    set placeholderKey(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 24, value);
    }
    get expiration() {
        return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
    }
    set expiration(value: number) {
        pb_1.Message.setField(this, 25, value);
    }
    get ephemeralSettingTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
    }
    set ephemeralSettingTimestamp(value: number) {
        pb_1.Message.setField(this, 26, value);
    }
    get ephemeralSharedSecret() {
        return pb_1.Message.getFieldWithDefault(this, 27, new Uint8Array()) as Uint8Array;
    }
    set ephemeralSharedSecret(value: Uint8Array) {
        pb_1.Message.setField(this, 27, value);
    }
    static fromObject(data: {
        stanzaId?: string;
        participant?: string;
        quotedMessage?: ReturnType<typeof Message.prototype.toObject>;
        remoteJid?: string;
        mentionedJid: string[];
        conversionSource?: string;
        conversionData?: Uint8Array;
        conversionDelaySeconds?: number;
        forwardingScore?: number;
        isForwarded?: boolean;
        quotedAd?: ReturnType<typeof AdReplyInfo.prototype.toObject>;
        placeholderKey?: ReturnType<typeof MessageKey.prototype.toObject>;
        expiration?: number;
        ephemeralSettingTimestamp?: number;
        ephemeralSharedSecret?: Uint8Array;
    }) {
        const message = new ContextInfo({
            mentionedJid: data.mentionedJid
        });
        if (data.stanzaId != null) {
            message.stanzaId = data.stanzaId;
        }
        if (data.participant != null) {
            message.participant = data.participant;
        }
        if (data.quotedMessage != null) {
            message.quotedMessage = Message.fromObject(data.quotedMessage);
        }
        if (data.remoteJid != null) {
            message.remoteJid = data.remoteJid;
        }
        if (data.conversionSource != null) {
            message.conversionSource = data.conversionSource;
        }
        if (data.conversionData != null) {
            message.conversionData = data.conversionData;
        }
        if (data.conversionDelaySeconds != null) {
            message.conversionDelaySeconds = data.conversionDelaySeconds;
        }
        if (data.forwardingScore != null) {
            message.forwardingScore = data.forwardingScore;
        }
        if (data.isForwarded != null) {
            message.isForwarded = data.isForwarded;
        }
        if (data.quotedAd != null) {
            message.quotedAd = AdReplyInfo.fromObject(data.quotedAd);
        }
        if (data.placeholderKey != null) {
            message.placeholderKey = MessageKey.fromObject(data.placeholderKey);
        }
        if (data.expiration != null) {
            message.expiration = data.expiration;
        }
        if (data.ephemeralSettingTimestamp != null) {
            message.ephemeralSettingTimestamp = data.ephemeralSettingTimestamp;
        }
        if (data.ephemeralSharedSecret != null) {
            message.ephemeralSharedSecret = data.ephemeralSharedSecret;
        }
        return message;
    }
    toObject() {
        const data: {
            stanzaId?: string;
            participant?: string;
            quotedMessage?: ReturnType<typeof Message.prototype.toObject>;
            remoteJid?: string;
            mentionedJid: string[];
            conversionSource?: string;
            conversionData?: Uint8Array;
            conversionDelaySeconds?: number;
            forwardingScore?: number;
            isForwarded?: boolean;
            quotedAd?: ReturnType<typeof AdReplyInfo.prototype.toObject>;
            placeholderKey?: ReturnType<typeof MessageKey.prototype.toObject>;
            expiration?: number;
            ephemeralSettingTimestamp?: number;
            ephemeralSharedSecret?: Uint8Array;
        } = {
            stanzaId: pb_1.Message.getField(this, 1) != null ? this.stanzaId : undefined,
            participant: pb_1.Message.getField(this, 2) != null ? this.participant : undefined,
            quotedMessage: pb_1.Message.getField(this, 3) != null ? this.quotedMessage != null ? this.quotedMessage.toObject() : undefined : undefined,
            remoteJid: pb_1.Message.getField(this, 4) != null ? this.remoteJid : undefined,
            mentionedJid: pb_1.Message.getField(this, 15) != null ? this.mentionedJid : undefined,
            conversionSource: pb_1.Message.getField(this, 18) != null ? this.conversionSource : undefined,
            conversionData: pb_1.Message.getField(this, 19) != null ? this.conversionData : undefined,
            conversionDelaySeconds: pb_1.Message.getField(this, 20) != null ? this.conversionDelaySeconds : undefined,
            forwardingScore: pb_1.Message.getField(this, 21) != null ? this.forwardingScore : undefined,
            isForwarded: pb_1.Message.getField(this, 22) != null ? this.isForwarded : undefined,
            quotedAd: pb_1.Message.getField(this, 23) != null ? this.quotedAd != null ? this.quotedAd.toObject() : undefined : undefined,
            placeholderKey: pb_1.Message.getField(this, 24) != null ? this.placeholderKey != null ? this.placeholderKey.toObject() : undefined : undefined,
            expiration: pb_1.Message.getField(this, 25) != null ? this.expiration : undefined,
            ephemeralSettingTimestamp: pb_1.Message.getField(this, 26) != null ? this.ephemeralSettingTimestamp : undefined,
            ephemeralSharedSecret: pb_1.Message.getField(this, 27) != null ? this.ephemeralSharedSecret : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.stanzaId === "string" && this.stanzaId.length)
            writer.writeString(1, this.stanzaId);
        if (typeof this.participant === "string" && this.participant.length)
            writer.writeString(2, this.participant);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.quotedMessage, () => this.quotedMessage.serialize(writer));
        if (typeof this.remoteJid === "string" && this.remoteJid.length)
            writer.writeString(4, this.remoteJid);
        if (this.mentionedJid.length)
            writer.writeRepeatedString(15, this.mentionedJid);
        if (typeof this.conversionSource === "string" && this.conversionSource.length)
            writer.writeString(18, this.conversionSource);
        if (pb_1.Message.getField(this, 19) != null)
            writer.writeBytes(19, this.conversionData);
        if (pb_1.Message.getField(this, 20) != null)
            writer.writeUint32(20, this.conversionDelaySeconds);
        if (pb_1.Message.getField(this, 21) != null)
            writer.writeUint32(21, this.forwardingScore);
        if (pb_1.Message.getField(this, 22) != null)
            writer.writeBool(22, this.isForwarded);
        if (pb_1.Message.getField(this, 23) != null)
            writer.writeMessage(23, this.quotedAd, () => this.quotedAd.serialize(writer));
        if (pb_1.Message.getField(this, 24) != null)
            writer.writeMessage(24, this.placeholderKey, () => this.placeholderKey.serialize(writer));
        if (pb_1.Message.getField(this, 25) != null)
            writer.writeUint32(25, this.expiration);
        if (pb_1.Message.getField(this, 26) != null)
            writer.writeInt64(26, this.ephemeralSettingTimestamp);
        if (pb_1.Message.getField(this, 27) != null)
            writer.writeBytes(27, this.ephemeralSharedSecret);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContextInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContextInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.stanzaId = reader.readString();
                    break;
                case 2:
                    message.participant = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.quotedMessage, () => message.quotedMessage = Message.deserialize(reader));
                    break;
                case 4:
                    message.remoteJid = reader.readString();
                    break;
                case 15:
                    pb_1.Message.addToRepeatedField(message, 15, reader.readString());
                    break;
                case 18:
                    message.conversionSource = reader.readString();
                    break;
                case 19:
                    message.conversionData = reader.readBytes();
                    break;
                case 20:
                    message.conversionDelaySeconds = reader.readUint32();
                    break;
                case 21:
                    message.forwardingScore = reader.readUint32();
                    break;
                case 22:
                    message.isForwarded = reader.readBool();
                    break;
                case 23:
                    reader.readMessage(message.quotedAd, () => message.quotedAd = AdReplyInfo.deserialize(reader));
                    break;
                case 24:
                    reader.readMessage(message.placeholderKey, () => message.placeholderKey = MessageKey.deserialize(reader));
                    break;
                case 25:
                    message.expiration = reader.readUint32();
                    break;
                case 26:
                    message.ephemeralSettingTimestamp = reader.readInt64();
                    break;
                case 27:
                    message.ephemeralSharedSecret = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ContextInfo {
        return ContextInfo.deserialize(bytes);
    }
}
export class SenderKeyDistributionMessage extends pb_1.Message {
    constructor(data?: any[] | {
        groupId?: string;
        axolotlSenderKeyDistributionMessage?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("groupId" in data && data.groupId != undefined) {
                this.groupId = data.groupId;
            }
            if ("axolotlSenderKeyDistributionMessage" in data && data.axolotlSenderKeyDistributionMessage != undefined) {
                this.axolotlSenderKeyDistributionMessage = data.axolotlSenderKeyDistributionMessage;
            }
        }
    }
    get groupId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set groupId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get axolotlSenderKeyDistributionMessage() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
    }
    set axolotlSenderKeyDistributionMessage(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        groupId?: string;
        axolotlSenderKeyDistributionMessage?: Uint8Array;
    }) {
        const message = new SenderKeyDistributionMessage({});
        if (data.groupId != null) {
            message.groupId = data.groupId;
        }
        if (data.axolotlSenderKeyDistributionMessage != null) {
            message.axolotlSenderKeyDistributionMessage = data.axolotlSenderKeyDistributionMessage;
        }
        return message;
    }
    toObject() {
        const data: {
            groupId?: string;
            axolotlSenderKeyDistributionMessage?: Uint8Array;
        } = {
            groupId: pb_1.Message.getField(this, 1) != null ? this.groupId : undefined,
            axolotlSenderKeyDistributionMessage: pb_1.Message.getField(this, 2) != null ? this.axolotlSenderKeyDistributionMessage : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.groupId === "string" && this.groupId.length)
            writer.writeString(1, this.groupId);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeBytes(2, this.axolotlSenderKeyDistributionMessage);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SenderKeyDistributionMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SenderKeyDistributionMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.groupId = reader.readString();
                    break;
                case 2:
                    message.axolotlSenderKeyDistributionMessage = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SenderKeyDistributionMessage {
        return SenderKeyDistributionMessage.deserialize(bytes);
    }
}
export class ImageMessage extends pb_1.Message {
    constructor(data?: any[] | {
        url?: string;
        mimetype?: string;
        caption?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        height?: number;
        width?: number;
        mediaKey?: Uint8Array;
        fileEncSha256?: Uint8Array;
        interactiveAnnotations: InteractiveAnnotation[];
        directPath?: string;
        mediaKeyTimestamp?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
        firstScanSidecar?: Uint8Array;
        firstScanLength?: number;
        experimentGroupId?: number;
        scansSidecar?: Uint8Array;
        scanLengths: number[];
        midQualityFileSha256?: Uint8Array;
        midQualityFileEncSha256?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 22], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("mimetype" in data && data.mimetype != undefined) {
                this.mimetype = data.mimetype;
            }
            if ("caption" in data && data.caption != undefined) {
                this.caption = data.caption;
            }
            if ("fileSha256" in data && data.fileSha256 != undefined) {
                this.fileSha256 = data.fileSha256;
            }
            if ("fileLength" in data && data.fileLength != undefined) {
                this.fileLength = data.fileLength;
            }
            if ("height" in data && data.height != undefined) {
                this.height = data.height;
            }
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
            if ("mediaKey" in data && data.mediaKey != undefined) {
                this.mediaKey = data.mediaKey;
            }
            if ("fileEncSha256" in data && data.fileEncSha256 != undefined) {
                this.fileEncSha256 = data.fileEncSha256;
            }
            this.interactiveAnnotations = data.interactiveAnnotations;
            if ("directPath" in data && data.directPath != undefined) {
                this.directPath = data.directPath;
            }
            if ("mediaKeyTimestamp" in data && data.mediaKeyTimestamp != undefined) {
                this.mediaKeyTimestamp = data.mediaKeyTimestamp;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
            if ("firstScanSidecar" in data && data.firstScanSidecar != undefined) {
                this.firstScanSidecar = data.firstScanSidecar;
            }
            if ("firstScanLength" in data && data.firstScanLength != undefined) {
                this.firstScanLength = data.firstScanLength;
            }
            if ("experimentGroupId" in data && data.experimentGroupId != undefined) {
                this.experimentGroupId = data.experimentGroupId;
            }
            if ("scansSidecar" in data && data.scansSidecar != undefined) {
                this.scansSidecar = data.scansSidecar;
            }
            this.scanLengths = data.scanLengths;
            if ("midQualityFileSha256" in data && data.midQualityFileSha256 != undefined) {
                this.midQualityFileSha256 = data.midQualityFileSha256;
            }
            if ("midQualityFileEncSha256" in data && data.midQualityFileEncSha256 != undefined) {
                this.midQualityFileEncSha256 = data.midQualityFileEncSha256;
            }
        }
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get mimetype() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set mimetype(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get caption() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set caption(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set fileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileLength() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set fileLength(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get height() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set height(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get mediaKey() {
        return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array()) as Uint8Array;
    }
    set mediaKey(value: Uint8Array) {
        pb_1.Message.setField(this, 8, value);
    }
    get fileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array()) as Uint8Array;
    }
    set fileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 9, value);
    }
    get interactiveAnnotations() {
        return pb_1.Message.getRepeatedWrapperField(this, InteractiveAnnotation, 10) as InteractiveAnnotation[];
    }
    set interactiveAnnotations(value: InteractiveAnnotation[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get directPath() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set directPath(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get mediaKeyTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set mediaKeyTimestamp(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get firstScanSidecar() {
        return pb_1.Message.getFieldWithDefault(this, 18, new Uint8Array()) as Uint8Array;
    }
    set firstScanSidecar(value: Uint8Array) {
        pb_1.Message.setField(this, 18, value);
    }
    get firstScanLength() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set firstScanLength(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    get experimentGroupId() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
    }
    set experimentGroupId(value: number) {
        pb_1.Message.setField(this, 20, value);
    }
    get scansSidecar() {
        return pb_1.Message.getFieldWithDefault(this, 21, new Uint8Array()) as Uint8Array;
    }
    set scansSidecar(value: Uint8Array) {
        pb_1.Message.setField(this, 21, value);
    }
    get scanLengths() {
        return pb_1.Message.getFieldWithDefault(this, 22, []) as number[];
    }
    set scanLengths(value: number[]) {
        pb_1.Message.setField(this, 22, value);
    }
    get midQualityFileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 23, new Uint8Array()) as Uint8Array;
    }
    set midQualityFileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 23, value);
    }
    get midQualityFileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 24, new Uint8Array()) as Uint8Array;
    }
    set midQualityFileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 24, value);
    }
    static fromObject(data: {
        url?: string;
        mimetype?: string;
        caption?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        height?: number;
        width?: number;
        mediaKey?: Uint8Array;
        fileEncSha256?: Uint8Array;
        interactiveAnnotations: ReturnType<typeof InteractiveAnnotation.prototype.toObject>[];
        directPath?: string;
        mediaKeyTimestamp?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        firstScanSidecar?: Uint8Array;
        firstScanLength?: number;
        experimentGroupId?: number;
        scansSidecar?: Uint8Array;
        scanLengths: number[];
        midQualityFileSha256?: Uint8Array;
        midQualityFileEncSha256?: Uint8Array;
    }) {
        const message = new ImageMessage({
            interactiveAnnotations: data.interactiveAnnotations.map(item => InteractiveAnnotation.fromObject(item)),
            scanLengths: data.scanLengths
        });
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.mimetype != null) {
            message.mimetype = data.mimetype;
        }
        if (data.caption != null) {
            message.caption = data.caption;
        }
        if (data.fileSha256 != null) {
            message.fileSha256 = data.fileSha256;
        }
        if (data.fileLength != null) {
            message.fileLength = data.fileLength;
        }
        if (data.height != null) {
            message.height = data.height;
        }
        if (data.width != null) {
            message.width = data.width;
        }
        if (data.mediaKey != null) {
            message.mediaKey = data.mediaKey;
        }
        if (data.fileEncSha256 != null) {
            message.fileEncSha256 = data.fileEncSha256;
        }
        if (data.directPath != null) {
            message.directPath = data.directPath;
        }
        if (data.mediaKeyTimestamp != null) {
            message.mediaKeyTimestamp = data.mediaKeyTimestamp;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        if (data.firstScanSidecar != null) {
            message.firstScanSidecar = data.firstScanSidecar;
        }
        if (data.firstScanLength != null) {
            message.firstScanLength = data.firstScanLength;
        }
        if (data.experimentGroupId != null) {
            message.experimentGroupId = data.experimentGroupId;
        }
        if (data.scansSidecar != null) {
            message.scansSidecar = data.scansSidecar;
        }
        if (data.midQualityFileSha256 != null) {
            message.midQualityFileSha256 = data.midQualityFileSha256;
        }
        if (data.midQualityFileEncSha256 != null) {
            message.midQualityFileEncSha256 = data.midQualityFileEncSha256;
        }
        return message;
    }
    toObject() {
        const data: {
            url?: string;
            mimetype?: string;
            caption?: string;
            fileSha256?: Uint8Array;
            fileLength?: number;
            height?: number;
            width?: number;
            mediaKey?: Uint8Array;
            fileEncSha256?: Uint8Array;
            interactiveAnnotations: ReturnType<typeof InteractiveAnnotation.prototype.toObject>[];
            directPath?: string;
            mediaKeyTimestamp?: number;
            jpegThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
            firstScanSidecar?: Uint8Array;
            firstScanLength?: number;
            experimentGroupId?: number;
            scansSidecar?: Uint8Array;
            scanLengths: number[];
            midQualityFileSha256?: Uint8Array;
            midQualityFileEncSha256?: Uint8Array;
        } = {
            url: pb_1.Message.getField(this, 1) != null ? this.url : undefined,
            mimetype: pb_1.Message.getField(this, 2) != null ? this.mimetype : undefined,
            caption: pb_1.Message.getField(this, 3) != null ? this.caption : undefined,
            fileSha256: pb_1.Message.getField(this, 4) != null ? this.fileSha256 : undefined,
            fileLength: pb_1.Message.getField(this, 5) != null ? this.fileLength : undefined,
            height: pb_1.Message.getField(this, 6) != null ? this.height : undefined,
            width: pb_1.Message.getField(this, 7) != null ? this.width : undefined,
            mediaKey: pb_1.Message.getField(this, 8) != null ? this.mediaKey : undefined,
            fileEncSha256: pb_1.Message.getField(this, 9) != null ? this.fileEncSha256 : undefined,
            interactiveAnnotations: pb_1.Message.getField(this, 10) != null ? this.interactiveAnnotations.map((item: InteractiveAnnotation) => item.toObject()) : undefined,
            directPath: pb_1.Message.getField(this, 11) != null ? this.directPath : undefined,
            mediaKeyTimestamp: pb_1.Message.getField(this, 12) != null ? this.mediaKeyTimestamp : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined,
            firstScanSidecar: pb_1.Message.getField(this, 18) != null ? this.firstScanSidecar : undefined,
            firstScanLength: pb_1.Message.getField(this, 19) != null ? this.firstScanLength : undefined,
            experimentGroupId: pb_1.Message.getField(this, 20) != null ? this.experimentGroupId : undefined,
            scansSidecar: pb_1.Message.getField(this, 21) != null ? this.scansSidecar : undefined,
            scanLengths: pb_1.Message.getField(this, 22) != null ? this.scanLengths : undefined,
            midQualityFileSha256: pb_1.Message.getField(this, 23) != null ? this.midQualityFileSha256 : undefined,
            midQualityFileEncSha256: pb_1.Message.getField(this, 24) != null ? this.midQualityFileEncSha256 : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(1, this.url);
        if (typeof this.mimetype === "string" && this.mimetype.length)
            writer.writeString(2, this.mimetype);
        if (typeof this.caption === "string" && this.caption.length)
            writer.writeString(3, this.caption);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeBytes(4, this.fileSha256);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint64(5, this.fileLength);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeUint32(6, this.height);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeUint32(7, this.width);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeBytes(8, this.mediaKey);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeBytes(9, this.fileEncSha256);
        if (this.interactiveAnnotations.length)
            writer.writeRepeatedMessage(10, this.interactiveAnnotations, (item: InteractiveAnnotation) => item.serialize(writer));
        if (typeof this.directPath === "string" && this.directPath.length)
            writer.writeString(11, this.directPath);
        if (pb_1.Message.getField(this, 12) != null)
            writer.writeInt64(12, this.mediaKeyTimestamp);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeBytes(18, this.firstScanSidecar);
        if (pb_1.Message.getField(this, 19) != null)
            writer.writeUint32(19, this.firstScanLength);
        if (pb_1.Message.getField(this, 20) != null)
            writer.writeUint32(20, this.experimentGroupId);
        if (pb_1.Message.getField(this, 21) != null)
            writer.writeBytes(21, this.scansSidecar);
        if (this.scanLengths.length)
            writer.writeRepeatedUint32(22, this.scanLengths);
        if (pb_1.Message.getField(this, 23) != null)
            writer.writeBytes(23, this.midQualityFileSha256);
        if (pb_1.Message.getField(this, 24) != null)
            writer.writeBytes(24, this.midQualityFileEncSha256);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.url = reader.readString();
                    break;
                case 2:
                    message.mimetype = reader.readString();
                    break;
                case 3:
                    message.caption = reader.readString();
                    break;
                case 4:
                    message.fileSha256 = reader.readBytes();
                    break;
                case 5:
                    message.fileLength = reader.readUint64();
                    break;
                case 6:
                    message.height = reader.readUint32();
                    break;
                case 7:
                    message.width = reader.readUint32();
                    break;
                case 8:
                    message.mediaKey = reader.readBytes();
                    break;
                case 9:
                    message.fileEncSha256 = reader.readBytes();
                    break;
                case 10:
                    reader.readMessage(message.interactiveAnnotations, () => pb_1.Message.addToRepeatedWrapperField(message, 10, InteractiveAnnotation.deserialize(reader), InteractiveAnnotation));
                    break;
                case 11:
                    message.directPath = reader.readString();
                    break;
                case 12:
                    message.mediaKeyTimestamp = reader.readInt64();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                case 18:
                    message.firstScanSidecar = reader.readBytes();
                    break;
                case 19:
                    message.firstScanLength = reader.readUint32();
                    break;
                case 20:
                    message.experimentGroupId = reader.readUint32();
                    break;
                case 21:
                    message.scansSidecar = reader.readBytes();
                    break;
                case 22:
                    pb_1.Message.addToRepeatedField(message, 22, reader.readUint32());
                    break;
                case 23:
                    message.midQualityFileSha256 = reader.readBytes();
                    break;
                case 24:
                    message.midQualityFileEncSha256 = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ImageMessage {
        return ImageMessage.deserialize(bytes);
    }
}
export class ContactMessage extends pb_1.Message {
    constructor(data?: any[] | {
        displayName?: string;
        vcard?: string;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayName" in data && data.displayName != undefined) {
                this.displayName = data.displayName;
            }
            if ("vcard" in data && data.vcard != undefined) {
                this.vcard = data.vcard;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get displayName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set displayName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get vcard() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set vcard(value: string) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        displayName?: string;
        vcard?: string;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new ContactMessage({});
        if (data.displayName != null) {
            message.displayName = data.displayName;
        }
        if (data.vcard != null) {
            message.vcard = data.vcard;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            displayName?: string;
            vcard?: string;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            displayName: pb_1.Message.getField(this, 1) != null ? this.displayName : undefined,
            vcard: pb_1.Message.getField(this, 16) != null ? this.vcard : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.displayName === "string" && this.displayName.length)
            writer.writeString(1, this.displayName);
        if (typeof this.vcard === "string" && this.vcard.length)
            writer.writeString(16, this.vcard);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.displayName = reader.readString();
                    break;
                case 16:
                    message.vcard = reader.readString();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ContactMessage {
        return ContactMessage.deserialize(bytes);
    }
}
export class LocationMessage extends pb_1.Message {
    constructor(data?: any[] | {
        degreesLatitude?: number;
        degreesLongitude?: number;
        name?: string;
        address?: string;
        url?: string;
        isLive?: boolean;
        accuracyInMeters?: number;
        speedInMps?: number;
        degreesClockwiseFromMagneticNorth?: number;
        comment?: string;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("degreesLatitude" in data && data.degreesLatitude != undefined) {
                this.degreesLatitude = data.degreesLatitude;
            }
            if ("degreesLongitude" in data && data.degreesLongitude != undefined) {
                this.degreesLongitude = data.degreesLongitude;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("isLive" in data && data.isLive != undefined) {
                this.isLive = data.isLive;
            }
            if ("accuracyInMeters" in data && data.accuracyInMeters != undefined) {
                this.accuracyInMeters = data.accuracyInMeters;
            }
            if ("speedInMps" in data && data.speedInMps != undefined) {
                this.speedInMps = data.speedInMps;
            }
            if ("degreesClockwiseFromMagneticNorth" in data && data.degreesClockwiseFromMagneticNorth != undefined) {
                this.degreesClockwiseFromMagneticNorth = data.degreesClockwiseFromMagneticNorth;
            }
            if ("comment" in data && data.comment != undefined) {
                this.comment = data.comment;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get degreesLatitude() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set degreesLatitude(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get degreesLongitude() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set degreesLongitude(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set address(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get isLive() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set isLive(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get accuracyInMeters() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set accuracyInMeters(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get speedInMps() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set speedInMps(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get degreesClockwiseFromMagneticNorth() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set degreesClockwiseFromMagneticNorth(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get comment() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set comment(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        degreesLatitude?: number;
        degreesLongitude?: number;
        name?: string;
        address?: string;
        url?: string;
        isLive?: boolean;
        accuracyInMeters?: number;
        speedInMps?: number;
        degreesClockwiseFromMagneticNorth?: number;
        comment?: string;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new LocationMessage({});
        if (data.degreesLatitude != null) {
            message.degreesLatitude = data.degreesLatitude;
        }
        if (data.degreesLongitude != null) {
            message.degreesLongitude = data.degreesLongitude;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.isLive != null) {
            message.isLive = data.isLive;
        }
        if (data.accuracyInMeters != null) {
            message.accuracyInMeters = data.accuracyInMeters;
        }
        if (data.speedInMps != null) {
            message.speedInMps = data.speedInMps;
        }
        if (data.degreesClockwiseFromMagneticNorth != null) {
            message.degreesClockwiseFromMagneticNorth = data.degreesClockwiseFromMagneticNorth;
        }
        if (data.comment != null) {
            message.comment = data.comment;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            degreesLatitude?: number;
            degreesLongitude?: number;
            name?: string;
            address?: string;
            url?: string;
            isLive?: boolean;
            accuracyInMeters?: number;
            speedInMps?: number;
            degreesClockwiseFromMagneticNorth?: number;
            comment?: string;
            jpegThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            degreesLatitude: pb_1.Message.getField(this, 1) != null ? this.degreesLatitude : undefined,
            degreesLongitude: pb_1.Message.getField(this, 2) != null ? this.degreesLongitude : undefined,
            name: pb_1.Message.getField(this, 3) != null ? this.name : undefined,
            address: pb_1.Message.getField(this, 4) != null ? this.address : undefined,
            url: pb_1.Message.getField(this, 5) != null ? this.url : undefined,
            isLive: pb_1.Message.getField(this, 6) != null ? this.isLive : undefined,
            accuracyInMeters: pb_1.Message.getField(this, 7) != null ? this.accuracyInMeters : undefined,
            speedInMps: pb_1.Message.getField(this, 8) != null ? this.speedInMps : undefined,
            degreesClockwiseFromMagneticNorth: pb_1.Message.getField(this, 9) != null ? this.degreesClockwiseFromMagneticNorth : undefined,
            comment: pb_1.Message.getField(this, 11) != null ? this.comment : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeDouble(1, this.degreesLatitude);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeDouble(2, this.degreesLongitude);
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(3, this.name);
        if (typeof this.address === "string" && this.address.length)
            writer.writeString(4, this.address);
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(5, this.url);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeBool(6, this.isLive);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeUint32(7, this.accuracyInMeters);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeFloat(8, this.speedInMps);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeUint32(9, this.degreesClockwiseFromMagneticNorth);
        if (typeof this.comment === "string" && this.comment.length)
            writer.writeString(11, this.comment);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocationMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocationMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.degreesLatitude = reader.readDouble();
                    break;
                case 2:
                    message.degreesLongitude = reader.readDouble();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 4:
                    message.address = reader.readString();
                    break;
                case 5:
                    message.url = reader.readString();
                    break;
                case 6:
                    message.isLive = reader.readBool();
                    break;
                case 7:
                    message.accuracyInMeters = reader.readUint32();
                    break;
                case 8:
                    message.speedInMps = reader.readFloat();
                    break;
                case 9:
                    message.degreesClockwiseFromMagneticNorth = reader.readUint32();
                    break;
                case 11:
                    message.comment = reader.readString();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LocationMessage {
        return LocationMessage.deserialize(bytes);
    }
}
export class ExtendedTextMessage extends pb_1.Message {
    constructor(data?: any[] | {
        text?: string;
        matchedText?: string;
        canonicalUrl?: string;
        description?: string;
        title?: string;
        textArgb?: number;
        backgroundArgb?: number;
        font?: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_FONTTYPE;
        previewType?: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_PREVIEWTYPE;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
        doNotPlayInline?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("matchedText" in data && data.matchedText != undefined) {
                this.matchedText = data.matchedText;
            }
            if ("canonicalUrl" in data && data.canonicalUrl != undefined) {
                this.canonicalUrl = data.canonicalUrl;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("textArgb" in data && data.textArgb != undefined) {
                this.textArgb = data.textArgb;
            }
            if ("backgroundArgb" in data && data.backgroundArgb != undefined) {
                this.backgroundArgb = data.backgroundArgb;
            }
            if ("font" in data && data.font != undefined) {
                this.font = data.font;
            }
            if ("previewType" in data && data.previewType != undefined) {
                this.previewType = data.previewType;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
            if ("doNotPlayInline" in data && data.doNotPlayInline != undefined) {
                this.doNotPlayInline = data.doNotPlayInline;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get matchedText() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set matchedText(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get canonicalUrl() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set canonicalUrl(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get textArgb() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set textArgb(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get backgroundArgb() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set backgroundArgb(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get font() {
        return pb_1.Message.getFieldWithDefault(this, 9, ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_FONTTYPE.SANS_SERIF) as ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_FONTTYPE;
    }
    set font(value: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_FONTTYPE) {
        pb_1.Message.setField(this, 9, value);
    }
    get previewType() {
        return pb_1.Message.getFieldWithDefault(this, 10, ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_PREVIEWTYPE.NONE) as ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_PREVIEWTYPE;
    }
    set previewType(value: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_PREVIEWTYPE) {
        pb_1.Message.setField(this, 10, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get doNotPlayInline() {
        return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
    }
    set doNotPlayInline(value: boolean) {
        pb_1.Message.setField(this, 18, value);
    }
    static fromObject(data: {
        text?: string;
        matchedText?: string;
        canonicalUrl?: string;
        description?: string;
        title?: string;
        textArgb?: number;
        backgroundArgb?: number;
        font?: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_FONTTYPE;
        previewType?: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_PREVIEWTYPE;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        doNotPlayInline?: boolean;
    }) {
        const message = new ExtendedTextMessage({});
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.matchedText != null) {
            message.matchedText = data.matchedText;
        }
        if (data.canonicalUrl != null) {
            message.canonicalUrl = data.canonicalUrl;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.textArgb != null) {
            message.textArgb = data.textArgb;
        }
        if (data.backgroundArgb != null) {
            message.backgroundArgb = data.backgroundArgb;
        }
        if (data.font != null) {
            message.font = data.font;
        }
        if (data.previewType != null) {
            message.previewType = data.previewType;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        if (data.doNotPlayInline != null) {
            message.doNotPlayInline = data.doNotPlayInline;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
            matchedText?: string;
            canonicalUrl?: string;
            description?: string;
            title?: string;
            textArgb?: number;
            backgroundArgb?: number;
            font?: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_FONTTYPE;
            previewType?: ExtendedTextMessage.EXTENDED_TEXT_MESSAGE_PREVIEWTYPE;
            jpegThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
            doNotPlayInline?: boolean;
        } = {
            text: pb_1.Message.getField(this, 1) != null ? this.text : undefined,
            matchedText: pb_1.Message.getField(this, 2) != null ? this.matchedText : undefined,
            canonicalUrl: pb_1.Message.getField(this, 4) != null ? this.canonicalUrl : undefined,
            description: pb_1.Message.getField(this, 5) != null ? this.description : undefined,
            title: pb_1.Message.getField(this, 6) != null ? this.title : undefined,
            textArgb: pb_1.Message.getField(this, 7) != null ? this.textArgb : undefined,
            backgroundArgb: pb_1.Message.getField(this, 8) != null ? this.backgroundArgb : undefined,
            font: pb_1.Message.getField(this, 9) != null ? this.font : undefined,
            previewType: pb_1.Message.getField(this, 10) != null ? this.previewType : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined,
            doNotPlayInline: pb_1.Message.getField(this, 18) != null ? this.doNotPlayInline : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.text === "string" && this.text.length)
            writer.writeString(1, this.text);
        if (typeof this.matchedText === "string" && this.matchedText.length)
            writer.writeString(2, this.matchedText);
        if (typeof this.canonicalUrl === "string" && this.canonicalUrl.length)
            writer.writeString(4, this.canonicalUrl);
        if (typeof this.description === "string" && this.description.length)
            writer.writeString(5, this.description);
        if (typeof this.title === "string" && this.title.length)
            writer.writeString(6, this.title);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeFixed32(7, this.textArgb);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeFixed32(8, this.backgroundArgb);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeEnum(9, this.font);
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeEnum(10, this.previewType);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeBool(18, this.doNotPlayInline);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtendedTextMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtendedTextMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                case 2:
                    message.matchedText = reader.readString();
                    break;
                case 4:
                    message.canonicalUrl = reader.readString();
                    break;
                case 5:
                    message.description = reader.readString();
                    break;
                case 6:
                    message.title = reader.readString();
                    break;
                case 7:
                    message.textArgb = reader.readFixed32();
                    break;
                case 8:
                    message.backgroundArgb = reader.readFixed32();
                    break;
                case 9:
                    message.font = reader.readEnum();
                    break;
                case 10:
                    message.previewType = reader.readEnum();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                case 18:
                    message.doNotPlayInline = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExtendedTextMessage {
        return ExtendedTextMessage.deserialize(bytes);
    }
}
export namespace ExtendedTextMessage {
    export enum EXTENDED_TEXT_MESSAGE_FONTTYPE {
        SANS_SERIF = 0,
        SERIF = 1,
        NORICAN_REGULAR = 2,
        BRYNDAN_WRITE = 3,
        BEBASNEUE_REGULAR = 4,
        OSWALD_HEAVY = 5
    }
    export enum EXTENDED_TEXT_MESSAGE_PREVIEWTYPE {
        NONE = 0,
        VIDEO = 1
    }
}
export class DocumentMessage extends pb_1.Message {
    constructor(data?: any[] | {
        url?: string;
        mimetype?: string;
        title?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        pageCount?: number;
        mediaKey?: Uint8Array;
        fileName?: string;
        fileEncSha256?: Uint8Array;
        directPath?: string;
        mediaKeyTimestamp?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("mimetype" in data && data.mimetype != undefined) {
                this.mimetype = data.mimetype;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("fileSha256" in data && data.fileSha256 != undefined) {
                this.fileSha256 = data.fileSha256;
            }
            if ("fileLength" in data && data.fileLength != undefined) {
                this.fileLength = data.fileLength;
            }
            if ("pageCount" in data && data.pageCount != undefined) {
                this.pageCount = data.pageCount;
            }
            if ("mediaKey" in data && data.mediaKey != undefined) {
                this.mediaKey = data.mediaKey;
            }
            if ("fileName" in data && data.fileName != undefined) {
                this.fileName = data.fileName;
            }
            if ("fileEncSha256" in data && data.fileEncSha256 != undefined) {
                this.fileEncSha256 = data.fileEncSha256;
            }
            if ("directPath" in data && data.directPath != undefined) {
                this.directPath = data.directPath;
            }
            if ("mediaKeyTimestamp" in data && data.mediaKeyTimestamp != undefined) {
                this.mediaKeyTimestamp = data.mediaKeyTimestamp;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get mimetype() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set mimetype(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set fileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get fileLength() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set fileLength(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get pageCount() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set pageCount(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get mediaKey() {
        return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array()) as Uint8Array;
    }
    set mediaKey(value: Uint8Array) {
        pb_1.Message.setField(this, 7, value);
    }
    get fileName() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set fileName(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get fileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array()) as Uint8Array;
    }
    set fileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 9, value);
    }
    get directPath() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set directPath(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get mediaKeyTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set mediaKeyTimestamp(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        url?: string;
        mimetype?: string;
        title?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        pageCount?: number;
        mediaKey?: Uint8Array;
        fileName?: string;
        fileEncSha256?: Uint8Array;
        directPath?: string;
        mediaKeyTimestamp?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new DocumentMessage({});
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.mimetype != null) {
            message.mimetype = data.mimetype;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.fileSha256 != null) {
            message.fileSha256 = data.fileSha256;
        }
        if (data.fileLength != null) {
            message.fileLength = data.fileLength;
        }
        if (data.pageCount != null) {
            message.pageCount = data.pageCount;
        }
        if (data.mediaKey != null) {
            message.mediaKey = data.mediaKey;
        }
        if (data.fileName != null) {
            message.fileName = data.fileName;
        }
        if (data.fileEncSha256 != null) {
            message.fileEncSha256 = data.fileEncSha256;
        }
        if (data.directPath != null) {
            message.directPath = data.directPath;
        }
        if (data.mediaKeyTimestamp != null) {
            message.mediaKeyTimestamp = data.mediaKeyTimestamp;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            url?: string;
            mimetype?: string;
            title?: string;
            fileSha256?: Uint8Array;
            fileLength?: number;
            pageCount?: number;
            mediaKey?: Uint8Array;
            fileName?: string;
            fileEncSha256?: Uint8Array;
            directPath?: string;
            mediaKeyTimestamp?: number;
            jpegThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            url: pb_1.Message.getField(this, 1) != null ? this.url : undefined,
            mimetype: pb_1.Message.getField(this, 2) != null ? this.mimetype : undefined,
            title: pb_1.Message.getField(this, 3) != null ? this.title : undefined,
            fileSha256: pb_1.Message.getField(this, 4) != null ? this.fileSha256 : undefined,
            fileLength: pb_1.Message.getField(this, 5) != null ? this.fileLength : undefined,
            pageCount: pb_1.Message.getField(this, 6) != null ? this.pageCount : undefined,
            mediaKey: pb_1.Message.getField(this, 7) != null ? this.mediaKey : undefined,
            fileName: pb_1.Message.getField(this, 8) != null ? this.fileName : undefined,
            fileEncSha256: pb_1.Message.getField(this, 9) != null ? this.fileEncSha256 : undefined,
            directPath: pb_1.Message.getField(this, 10) != null ? this.directPath : undefined,
            mediaKeyTimestamp: pb_1.Message.getField(this, 11) != null ? this.mediaKeyTimestamp : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(1, this.url);
        if (typeof this.mimetype === "string" && this.mimetype.length)
            writer.writeString(2, this.mimetype);
        if (typeof this.title === "string" && this.title.length)
            writer.writeString(3, this.title);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeBytes(4, this.fileSha256);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint64(5, this.fileLength);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeUint32(6, this.pageCount);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeBytes(7, this.mediaKey);
        if (typeof this.fileName === "string" && this.fileName.length)
            writer.writeString(8, this.fileName);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeBytes(9, this.fileEncSha256);
        if (typeof this.directPath === "string" && this.directPath.length)
            writer.writeString(10, this.directPath);
        if (pb_1.Message.getField(this, 11) != null)
            writer.writeInt64(11, this.mediaKeyTimestamp);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DocumentMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DocumentMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.url = reader.readString();
                    break;
                case 2:
                    message.mimetype = reader.readString();
                    break;
                case 3:
                    message.title = reader.readString();
                    break;
                case 4:
                    message.fileSha256 = reader.readBytes();
                    break;
                case 5:
                    message.fileLength = reader.readUint64();
                    break;
                case 6:
                    message.pageCount = reader.readUint32();
                    break;
                case 7:
                    message.mediaKey = reader.readBytes();
                    break;
                case 8:
                    message.fileName = reader.readString();
                    break;
                case 9:
                    message.fileEncSha256 = reader.readBytes();
                    break;
                case 10:
                    message.directPath = reader.readString();
                    break;
                case 11:
                    message.mediaKeyTimestamp = reader.readInt64();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DocumentMessage {
        return DocumentMessage.deserialize(bytes);
    }
}
export class AudioMessage extends pb_1.Message {
    constructor(data?: any[] | {
        url?: string;
        mimetype?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        seconds?: number;
        ptt?: boolean;
        mediaKey?: Uint8Array;
        fileEncSha256?: Uint8Array;
        directPath?: string;
        mediaKeyTimestamp?: number;
        contextInfo?: ContextInfo;
        streamingSidecar?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("mimetype" in data && data.mimetype != undefined) {
                this.mimetype = data.mimetype;
            }
            if ("fileSha256" in data && data.fileSha256 != undefined) {
                this.fileSha256 = data.fileSha256;
            }
            if ("fileLength" in data && data.fileLength != undefined) {
                this.fileLength = data.fileLength;
            }
            if ("seconds" in data && data.seconds != undefined) {
                this.seconds = data.seconds;
            }
            if ("ptt" in data && data.ptt != undefined) {
                this.ptt = data.ptt;
            }
            if ("mediaKey" in data && data.mediaKey != undefined) {
                this.mediaKey = data.mediaKey;
            }
            if ("fileEncSha256" in data && data.fileEncSha256 != undefined) {
                this.fileEncSha256 = data.fileEncSha256;
            }
            if ("directPath" in data && data.directPath != undefined) {
                this.directPath = data.directPath;
            }
            if ("mediaKeyTimestamp" in data && data.mediaKeyTimestamp != undefined) {
                this.mediaKeyTimestamp = data.mediaKeyTimestamp;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
            if ("streamingSidecar" in data && data.streamingSidecar != undefined) {
                this.streamingSidecar = data.streamingSidecar;
            }
        }
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get mimetype() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set mimetype(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get fileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set fileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileLength() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set fileLength(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get seconds() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set seconds(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get ptt() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set ptt(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get mediaKey() {
        return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array()) as Uint8Array;
    }
    set mediaKey(value: Uint8Array) {
        pb_1.Message.setField(this, 7, value);
    }
    get fileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array()) as Uint8Array;
    }
    set fileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 8, value);
    }
    get directPath() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set directPath(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get mediaKeyTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set mediaKeyTimestamp(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get streamingSidecar() {
        return pb_1.Message.getFieldWithDefault(this, 18, new Uint8Array()) as Uint8Array;
    }
    set streamingSidecar(value: Uint8Array) {
        pb_1.Message.setField(this, 18, value);
    }
    static fromObject(data: {
        url?: string;
        mimetype?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        seconds?: number;
        ptt?: boolean;
        mediaKey?: Uint8Array;
        fileEncSha256?: Uint8Array;
        directPath?: string;
        mediaKeyTimestamp?: number;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        streamingSidecar?: Uint8Array;
    }) {
        const message = new AudioMessage({});
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.mimetype != null) {
            message.mimetype = data.mimetype;
        }
        if (data.fileSha256 != null) {
            message.fileSha256 = data.fileSha256;
        }
        if (data.fileLength != null) {
            message.fileLength = data.fileLength;
        }
        if (data.seconds != null) {
            message.seconds = data.seconds;
        }
        if (data.ptt != null) {
            message.ptt = data.ptt;
        }
        if (data.mediaKey != null) {
            message.mediaKey = data.mediaKey;
        }
        if (data.fileEncSha256 != null) {
            message.fileEncSha256 = data.fileEncSha256;
        }
        if (data.directPath != null) {
            message.directPath = data.directPath;
        }
        if (data.mediaKeyTimestamp != null) {
            message.mediaKeyTimestamp = data.mediaKeyTimestamp;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        if (data.streamingSidecar != null) {
            message.streamingSidecar = data.streamingSidecar;
        }
        return message;
    }
    toObject() {
        const data: {
            url?: string;
            mimetype?: string;
            fileSha256?: Uint8Array;
            fileLength?: number;
            seconds?: number;
            ptt?: boolean;
            mediaKey?: Uint8Array;
            fileEncSha256?: Uint8Array;
            directPath?: string;
            mediaKeyTimestamp?: number;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
            streamingSidecar?: Uint8Array;
        } = {
            url: pb_1.Message.getField(this, 1) != null ? this.url : undefined,
            mimetype: pb_1.Message.getField(this, 2) != null ? this.mimetype : undefined,
            fileSha256: pb_1.Message.getField(this, 3) != null ? this.fileSha256 : undefined,
            fileLength: pb_1.Message.getField(this, 4) != null ? this.fileLength : undefined,
            seconds: pb_1.Message.getField(this, 5) != null ? this.seconds : undefined,
            ptt: pb_1.Message.getField(this, 6) != null ? this.ptt : undefined,
            mediaKey: pb_1.Message.getField(this, 7) != null ? this.mediaKey : undefined,
            fileEncSha256: pb_1.Message.getField(this, 8) != null ? this.fileEncSha256 : undefined,
            directPath: pb_1.Message.getField(this, 9) != null ? this.directPath : undefined,
            mediaKeyTimestamp: pb_1.Message.getField(this, 10) != null ? this.mediaKeyTimestamp : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined,
            streamingSidecar: pb_1.Message.getField(this, 18) != null ? this.streamingSidecar : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(1, this.url);
        if (typeof this.mimetype === "string" && this.mimetype.length)
            writer.writeString(2, this.mimetype);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeBytes(3, this.fileSha256);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint64(4, this.fileLength);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint32(5, this.seconds);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeBool(6, this.ptt);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeBytes(7, this.mediaKey);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeBytes(8, this.fileEncSha256);
        if (typeof this.directPath === "string" && this.directPath.length)
            writer.writeString(9, this.directPath);
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeInt64(10, this.mediaKeyTimestamp);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeBytes(18, this.streamingSidecar);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AudioMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AudioMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.url = reader.readString();
                    break;
                case 2:
                    message.mimetype = reader.readString();
                    break;
                case 3:
                    message.fileSha256 = reader.readBytes();
                    break;
                case 4:
                    message.fileLength = reader.readUint64();
                    break;
                case 5:
                    message.seconds = reader.readUint32();
                    break;
                case 6:
                    message.ptt = reader.readBool();
                    break;
                case 7:
                    message.mediaKey = reader.readBytes();
                    break;
                case 8:
                    message.fileEncSha256 = reader.readBytes();
                    break;
                case 9:
                    message.directPath = reader.readString();
                    break;
                case 10:
                    message.mediaKeyTimestamp = reader.readInt64();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                case 18:
                    message.streamingSidecar = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AudioMessage {
        return AudioMessage.deserialize(bytes);
    }
}
export class VideoMessage extends pb_1.Message {
    constructor(data?: any[] | {
        url?: string;
        mimetype?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        seconds?: number;
        mediaKey?: Uint8Array;
        caption?: string;
        gifPlayback?: boolean;
        height?: number;
        width?: number;
        fileEncSha256?: Uint8Array;
        interactiveAnnotations: InteractiveAnnotation[];
        directPath?: string;
        mediaKeyTimestamp?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
        streamingSidecar?: Uint8Array;
        gifAttribution?: VideoMessage.VIDEO_MESSAGE_ATTRIBUTION;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("mimetype" in data && data.mimetype != undefined) {
                this.mimetype = data.mimetype;
            }
            if ("fileSha256" in data && data.fileSha256 != undefined) {
                this.fileSha256 = data.fileSha256;
            }
            if ("fileLength" in data && data.fileLength != undefined) {
                this.fileLength = data.fileLength;
            }
            if ("seconds" in data && data.seconds != undefined) {
                this.seconds = data.seconds;
            }
            if ("mediaKey" in data && data.mediaKey != undefined) {
                this.mediaKey = data.mediaKey;
            }
            if ("caption" in data && data.caption != undefined) {
                this.caption = data.caption;
            }
            if ("gifPlayback" in data && data.gifPlayback != undefined) {
                this.gifPlayback = data.gifPlayback;
            }
            if ("height" in data && data.height != undefined) {
                this.height = data.height;
            }
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
            if ("fileEncSha256" in data && data.fileEncSha256 != undefined) {
                this.fileEncSha256 = data.fileEncSha256;
            }
            this.interactiveAnnotations = data.interactiveAnnotations;
            if ("directPath" in data && data.directPath != undefined) {
                this.directPath = data.directPath;
            }
            if ("mediaKeyTimestamp" in data && data.mediaKeyTimestamp != undefined) {
                this.mediaKeyTimestamp = data.mediaKeyTimestamp;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
            if ("streamingSidecar" in data && data.streamingSidecar != undefined) {
                this.streamingSidecar = data.streamingSidecar;
            }
            if ("gifAttribution" in data && data.gifAttribution != undefined) {
                this.gifAttribution = data.gifAttribution;
            }
        }
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get mimetype() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set mimetype(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get fileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set fileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileLength() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set fileLength(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get seconds() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set seconds(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get mediaKey() {
        return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array()) as Uint8Array;
    }
    set mediaKey(value: Uint8Array) {
        pb_1.Message.setField(this, 6, value);
    }
    get caption() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set caption(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get gifPlayback() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set gifPlayback(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get height() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set height(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get fileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 11, new Uint8Array()) as Uint8Array;
    }
    set fileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 11, value);
    }
    get interactiveAnnotations() {
        return pb_1.Message.getRepeatedWrapperField(this, InteractiveAnnotation, 12) as InteractiveAnnotation[];
    }
    set interactiveAnnotations(value: InteractiveAnnotation[]) {
        pb_1.Message.setRepeatedWrapperField(this, 12, value);
    }
    get directPath() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set directPath(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get mediaKeyTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set mediaKeyTimestamp(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get streamingSidecar() {
        return pb_1.Message.getFieldWithDefault(this, 18, new Uint8Array()) as Uint8Array;
    }
    set streamingSidecar(value: Uint8Array) {
        pb_1.Message.setField(this, 18, value);
    }
    get gifAttribution() {
        return pb_1.Message.getFieldWithDefault(this, 19, VideoMessage.VIDEO_MESSAGE_ATTRIBUTION.NONE) as VideoMessage.VIDEO_MESSAGE_ATTRIBUTION;
    }
    set gifAttribution(value: VideoMessage.VIDEO_MESSAGE_ATTRIBUTION) {
        pb_1.Message.setField(this, 19, value);
    }
    static fromObject(data: {
        url?: string;
        mimetype?: string;
        fileSha256?: Uint8Array;
        fileLength?: number;
        seconds?: number;
        mediaKey?: Uint8Array;
        caption?: string;
        gifPlayback?: boolean;
        height?: number;
        width?: number;
        fileEncSha256?: Uint8Array;
        interactiveAnnotations: ReturnType<typeof InteractiveAnnotation.prototype.toObject>[];
        directPath?: string;
        mediaKeyTimestamp?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        streamingSidecar?: Uint8Array;
        gifAttribution?: VideoMessage.VIDEO_MESSAGE_ATTRIBUTION;
    }) {
        const message = new VideoMessage({
            interactiveAnnotations: data.interactiveAnnotations.map(item => InteractiveAnnotation.fromObject(item))
        });
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.mimetype != null) {
            message.mimetype = data.mimetype;
        }
        if (data.fileSha256 != null) {
            message.fileSha256 = data.fileSha256;
        }
        if (data.fileLength != null) {
            message.fileLength = data.fileLength;
        }
        if (data.seconds != null) {
            message.seconds = data.seconds;
        }
        if (data.mediaKey != null) {
            message.mediaKey = data.mediaKey;
        }
        if (data.caption != null) {
            message.caption = data.caption;
        }
        if (data.gifPlayback != null) {
            message.gifPlayback = data.gifPlayback;
        }
        if (data.height != null) {
            message.height = data.height;
        }
        if (data.width != null) {
            message.width = data.width;
        }
        if (data.fileEncSha256 != null) {
            message.fileEncSha256 = data.fileEncSha256;
        }
        if (data.directPath != null) {
            message.directPath = data.directPath;
        }
        if (data.mediaKeyTimestamp != null) {
            message.mediaKeyTimestamp = data.mediaKeyTimestamp;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        if (data.streamingSidecar != null) {
            message.streamingSidecar = data.streamingSidecar;
        }
        if (data.gifAttribution != null) {
            message.gifAttribution = data.gifAttribution;
        }
        return message;
    }
    toObject() {
        const data: {
            url?: string;
            mimetype?: string;
            fileSha256?: Uint8Array;
            fileLength?: number;
            seconds?: number;
            mediaKey?: Uint8Array;
            caption?: string;
            gifPlayback?: boolean;
            height?: number;
            width?: number;
            fileEncSha256?: Uint8Array;
            interactiveAnnotations: ReturnType<typeof InteractiveAnnotation.prototype.toObject>[];
            directPath?: string;
            mediaKeyTimestamp?: number;
            jpegThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
            streamingSidecar?: Uint8Array;
            gifAttribution?: VideoMessage.VIDEO_MESSAGE_ATTRIBUTION;
        } = {
            url: pb_1.Message.getField(this, 1) != null ? this.url : undefined,
            mimetype: pb_1.Message.getField(this, 2) != null ? this.mimetype : undefined,
            fileSha256: pb_1.Message.getField(this, 3) != null ? this.fileSha256 : undefined,
            fileLength: pb_1.Message.getField(this, 4) != null ? this.fileLength : undefined,
            seconds: pb_1.Message.getField(this, 5) != null ? this.seconds : undefined,
            mediaKey: pb_1.Message.getField(this, 6) != null ? this.mediaKey : undefined,
            caption: pb_1.Message.getField(this, 7) != null ? this.caption : undefined,
            gifPlayback: pb_1.Message.getField(this, 8) != null ? this.gifPlayback : undefined,
            height: pb_1.Message.getField(this, 9) != null ? this.height : undefined,
            width: pb_1.Message.getField(this, 10) != null ? this.width : undefined,
            fileEncSha256: pb_1.Message.getField(this, 11) != null ? this.fileEncSha256 : undefined,
            interactiveAnnotations: pb_1.Message.getField(this, 12) != null ? this.interactiveAnnotations.map((item: InteractiveAnnotation) => item.toObject()) : undefined,
            directPath: pb_1.Message.getField(this, 13) != null ? this.directPath : undefined,
            mediaKeyTimestamp: pb_1.Message.getField(this, 14) != null ? this.mediaKeyTimestamp : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined,
            streamingSidecar: pb_1.Message.getField(this, 18) != null ? this.streamingSidecar : undefined,
            gifAttribution: pb_1.Message.getField(this, 19) != null ? this.gifAttribution : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(1, this.url);
        if (typeof this.mimetype === "string" && this.mimetype.length)
            writer.writeString(2, this.mimetype);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeBytes(3, this.fileSha256);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint64(4, this.fileLength);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint32(5, this.seconds);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeBytes(6, this.mediaKey);
        if (typeof this.caption === "string" && this.caption.length)
            writer.writeString(7, this.caption);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeBool(8, this.gifPlayback);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeUint32(9, this.height);
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeUint32(10, this.width);
        if (pb_1.Message.getField(this, 11) != null)
            writer.writeBytes(11, this.fileEncSha256);
        if (this.interactiveAnnotations.length)
            writer.writeRepeatedMessage(12, this.interactiveAnnotations, (item: InteractiveAnnotation) => item.serialize(writer));
        if (typeof this.directPath === "string" && this.directPath.length)
            writer.writeString(13, this.directPath);
        if (pb_1.Message.getField(this, 14) != null)
            writer.writeInt64(14, this.mediaKeyTimestamp);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeBytes(18, this.streamingSidecar);
        if (pb_1.Message.getField(this, 19) != null)
            writer.writeEnum(19, this.gifAttribution);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VideoMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VideoMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.url = reader.readString();
                    break;
                case 2:
                    message.mimetype = reader.readString();
                    break;
                case 3:
                    message.fileSha256 = reader.readBytes();
                    break;
                case 4:
                    message.fileLength = reader.readUint64();
                    break;
                case 5:
                    message.seconds = reader.readUint32();
                    break;
                case 6:
                    message.mediaKey = reader.readBytes();
                    break;
                case 7:
                    message.caption = reader.readString();
                    break;
                case 8:
                    message.gifPlayback = reader.readBool();
                    break;
                case 9:
                    message.height = reader.readUint32();
                    break;
                case 10:
                    message.width = reader.readUint32();
                    break;
                case 11:
                    message.fileEncSha256 = reader.readBytes();
                    break;
                case 12:
                    reader.readMessage(message.interactiveAnnotations, () => pb_1.Message.addToRepeatedWrapperField(message, 12, InteractiveAnnotation.deserialize(reader), InteractiveAnnotation));
                    break;
                case 13:
                    message.directPath = reader.readString();
                    break;
                case 14:
                    message.mediaKeyTimestamp = reader.readInt64();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                case 18:
                    message.streamingSidecar = reader.readBytes();
                    break;
                case 19:
                    message.gifAttribution = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VideoMessage {
        return VideoMessage.deserialize(bytes);
    }
}
export namespace VideoMessage {
    export enum VIDEO_MESSAGE_ATTRIBUTION {
        NONE = 0,
        GIPHY = 1,
        TENOR = 2
    }
}
export class Call extends pb_1.Message {
    constructor(data?: any[] | {
        callKey?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("callKey" in data && data.callKey != undefined) {
                this.callKey = data.callKey;
            }
        }
    }
    get callKey() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
    }
    set callKey(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        callKey?: Uint8Array;
    }) {
        const message = new Call({});
        if (data.callKey != null) {
            message.callKey = data.callKey;
        }
        return message;
    }
    toObject() {
        const data: {
            callKey?: Uint8Array;
        } = {
            callKey: pb_1.Message.getField(this, 1) != null ? this.callKey : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeBytes(1, this.callKey);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Call {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Call();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.callKey = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Call {
        return Call.deserialize(bytes);
    }
}
export class Chat extends pb_1.Message {
    constructor(data?: any[] | {
        displayName?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayName" in data && data.displayName != undefined) {
                this.displayName = data.displayName;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get displayName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set displayName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        displayName?: string;
        id?: string;
    }) {
        const message = new Chat({});
        if (data.displayName != null) {
            message.displayName = data.displayName;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            displayName?: string;
            id?: string;
        } = {
            displayName: pb_1.Message.getField(this, 1) != null ? this.displayName : undefined,
            id: pb_1.Message.getField(this, 2) != null ? this.id : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.displayName === "string" && this.displayName.length)
            writer.writeString(1, this.displayName);
        if (typeof this.id === "string" && this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chat {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Chat();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.displayName = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Chat {
        return Chat.deserialize(bytes);
    }
}
export class ProtocolMessage extends pb_1.Message {
    constructor(data?: any[] | {
        key?: MessageKey;
        type?: ProtocolMessage.PROTOCOL_MESSAGE_TYPE;
        ephemeralExpiration?: number;
        ephemeralSettingTimestamp?: number;
        historySyncNotification?: HistorySyncNotification;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("ephemeralExpiration" in data && data.ephemeralExpiration != undefined) {
                this.ephemeralExpiration = data.ephemeralExpiration;
            }
            if ("ephemeralSettingTimestamp" in data && data.ephemeralSettingTimestamp != undefined) {
                this.ephemeralSettingTimestamp = data.ephemeralSettingTimestamp;
            }
            if ("historySyncNotification" in data && data.historySyncNotification != undefined) {
                this.historySyncNotification = data.historySyncNotification;
            }
        }
    }
    get key() {
        return pb_1.Message.getWrapperField(this, MessageKey, 1) as MessageKey;
    }
    set key(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 2, ProtocolMessage.PROTOCOL_MESSAGE_TYPE.REVOKE) as ProtocolMessage.PROTOCOL_MESSAGE_TYPE;
    }
    set type(value: ProtocolMessage.PROTOCOL_MESSAGE_TYPE) {
        pb_1.Message.setField(this, 2, value);
    }
    get ephemeralExpiration() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set ephemeralExpiration(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get ephemeralSettingTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set ephemeralSettingTimestamp(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get historySyncNotification() {
        return pb_1.Message.getWrapperField(this, HistorySyncNotification, 6) as HistorySyncNotification;
    }
    set historySyncNotification(value: HistorySyncNotification) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    static fromObject(data: {
        key?: ReturnType<typeof MessageKey.prototype.toObject>;
        type?: ProtocolMessage.PROTOCOL_MESSAGE_TYPE;
        ephemeralExpiration?: number;
        ephemeralSettingTimestamp?: number;
        historySyncNotification?: ReturnType<typeof HistorySyncNotification.prototype.toObject>;
    }) {
        const message = new ProtocolMessage({});
        if (data.key != null) {
            message.key = MessageKey.fromObject(data.key);
        }
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.ephemeralExpiration != null) {
            message.ephemeralExpiration = data.ephemeralExpiration;
        }
        if (data.ephemeralSettingTimestamp != null) {
            message.ephemeralSettingTimestamp = data.ephemeralSettingTimestamp;
        }
        if (data.historySyncNotification != null) {
            message.historySyncNotification = HistorySyncNotification.fromObject(data.historySyncNotification);
        }
        return message;
    }
    toObject() {
        const data: {
            key?: ReturnType<typeof MessageKey.prototype.toObject>;
            type?: ProtocolMessage.PROTOCOL_MESSAGE_TYPE;
            ephemeralExpiration?: number;
            ephemeralSettingTimestamp?: number;
            historySyncNotification?: ReturnType<typeof HistorySyncNotification.prototype.toObject>;
        } = {
            key: pb_1.Message.getField(this, 1) != null ? this.key != null ? this.key.toObject() : undefined : undefined,
            type: pb_1.Message.getField(this, 2) != null ? this.type : undefined,
            ephemeralExpiration: pb_1.Message.getField(this, 4) != null ? this.ephemeralExpiration : undefined,
            ephemeralSettingTimestamp: pb_1.Message.getField(this, 5) != null ? this.ephemeralSettingTimestamp : undefined,
            historySyncNotification: pb_1.Message.getField(this, 6) != null ? this.historySyncNotification != null ? this.historySyncNotification.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.key, () => this.key.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeEnum(2, this.type);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.ephemeralExpiration);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeInt64(5, this.ephemeralSettingTimestamp);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeMessage(6, this.historySyncNotification, () => this.historySyncNotification.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.key, () => message.key = MessageKey.deserialize(reader));
                    break;
                case 2:
                    message.type = reader.readEnum();
                    break;
                case 4:
                    message.ephemeralExpiration = reader.readUint32();
                    break;
                case 5:
                    message.ephemeralSettingTimestamp = reader.readInt64();
                    break;
                case 6:
                    reader.readMessage(message.historySyncNotification, () => message.historySyncNotification = HistorySyncNotification.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtocolMessage {
        return ProtocolMessage.deserialize(bytes);
    }
}
export namespace ProtocolMessage {
    export enum PROTOCOL_MESSAGE_TYPE {
        REVOKE = 0,
        EPHEMERAL_SETTING = 3,
        EPHEMERAL_SYNC_RESPONSE = 4,
        HISTORY_SYNC_NOTIFICATION = 5
    }
}
export class HistorySyncNotification extends pb_1.Message {
    constructor(data?: any[] | {
        fileSha256?: Uint8Array;
        fileLength?: number;
        mediaKey?: Uint8Array;
        fileEncSha256?: Uint8Array;
        directPath?: string;
        syncType?: HistorySyncNotification.HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE;
        chunkOrder?: number;
        originalMessageId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fileSha256" in data && data.fileSha256 != undefined) {
                this.fileSha256 = data.fileSha256;
            }
            if ("fileLength" in data && data.fileLength != undefined) {
                this.fileLength = data.fileLength;
            }
            if ("mediaKey" in data && data.mediaKey != undefined) {
                this.mediaKey = data.mediaKey;
            }
            if ("fileEncSha256" in data && data.fileEncSha256 != undefined) {
                this.fileEncSha256 = data.fileEncSha256;
            }
            if ("directPath" in data && data.directPath != undefined) {
                this.directPath = data.directPath;
            }
            if ("syncType" in data && data.syncType != undefined) {
                this.syncType = data.syncType;
            }
            if ("chunkOrder" in data && data.chunkOrder != undefined) {
                this.chunkOrder = data.chunkOrder;
            }
            if ("originalMessageId" in data && data.originalMessageId != undefined) {
                this.originalMessageId = data.originalMessageId;
            }
        }
    }
    get fileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
    }
    set fileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    get fileLength() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set fileLength(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get mediaKey() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set mediaKey(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get fileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set fileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get directPath() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set directPath(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get syncType() {
        return pb_1.Message.getFieldWithDefault(this, 6, HistorySyncNotification.HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE.INITIAL_BOOTSTRAP) as HistorySyncNotification.HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE;
    }
    set syncType(value: HistorySyncNotification.HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE) {
        pb_1.Message.setField(this, 6, value);
    }
    get chunkOrder() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set chunkOrder(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get originalMessageId() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set originalMessageId(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        fileSha256?: Uint8Array;
        fileLength?: number;
        mediaKey?: Uint8Array;
        fileEncSha256?: Uint8Array;
        directPath?: string;
        syncType?: HistorySyncNotification.HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE;
        chunkOrder?: number;
        originalMessageId?: string;
    }) {
        const message = new HistorySyncNotification({});
        if (data.fileSha256 != null) {
            message.fileSha256 = data.fileSha256;
        }
        if (data.fileLength != null) {
            message.fileLength = data.fileLength;
        }
        if (data.mediaKey != null) {
            message.mediaKey = data.mediaKey;
        }
        if (data.fileEncSha256 != null) {
            message.fileEncSha256 = data.fileEncSha256;
        }
        if (data.directPath != null) {
            message.directPath = data.directPath;
        }
        if (data.syncType != null) {
            message.syncType = data.syncType;
        }
        if (data.chunkOrder != null) {
            message.chunkOrder = data.chunkOrder;
        }
        if (data.originalMessageId != null) {
            message.originalMessageId = data.originalMessageId;
        }
        return message;
    }
    toObject() {
        const data: {
            fileSha256?: Uint8Array;
            fileLength?: number;
            mediaKey?: Uint8Array;
            fileEncSha256?: Uint8Array;
            directPath?: string;
            syncType?: HistorySyncNotification.HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE;
            chunkOrder?: number;
            originalMessageId?: string;
        } = {
            fileSha256: pb_1.Message.getField(this, 1) != null ? this.fileSha256 : undefined,
            fileLength: pb_1.Message.getField(this, 2) != null ? this.fileLength : undefined,
            mediaKey: pb_1.Message.getField(this, 3) != null ? this.mediaKey : undefined,
            fileEncSha256: pb_1.Message.getField(this, 4) != null ? this.fileEncSha256 : undefined,
            directPath: pb_1.Message.getField(this, 5) != null ? this.directPath : undefined,
            syncType: pb_1.Message.getField(this, 6) != null ? this.syncType : undefined,
            chunkOrder: pb_1.Message.getField(this, 7) != null ? this.chunkOrder : undefined,
            originalMessageId: pb_1.Message.getField(this, 8) != null ? this.originalMessageId : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeBytes(1, this.fileSha256);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeUint64(2, this.fileLength);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeBytes(3, this.mediaKey);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeBytes(4, this.fileEncSha256);
        if (typeof this.directPath === "string" && this.directPath.length)
            writer.writeString(5, this.directPath);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeEnum(6, this.syncType);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeUint32(7, this.chunkOrder);
        if (typeof this.originalMessageId === "string" && this.originalMessageId.length)
            writer.writeString(8, this.originalMessageId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistorySyncNotification {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistorySyncNotification();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.fileSha256 = reader.readBytes();
                    break;
                case 2:
                    message.fileLength = reader.readUint64();
                    break;
                case 3:
                    message.mediaKey = reader.readBytes();
                    break;
                case 4:
                    message.fileEncSha256 = reader.readBytes();
                    break;
                case 5:
                    message.directPath = reader.readString();
                    break;
                case 6:
                    message.syncType = reader.readEnum();
                    break;
                case 7:
                    message.chunkOrder = reader.readUint32();
                    break;
                case 8:
                    message.originalMessageId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HistorySyncNotification {
        return HistorySyncNotification.deserialize(bytes);
    }
}
export namespace HistorySyncNotification {
    export enum HISTORY_SYNC_NOTIFICATION_HISTORYSYNCTYPE {
        INITIAL_BOOTSTRAP = 0,
        INITIAL_STATUS_V3 = 1,
        FULL = 2,
        RECENT = 3,
        RESEND = 4
    }
}
export class ContactsArrayMessage extends pb_1.Message {
    constructor(data?: any[] | {
        displayName?: string;
        contacts: ContactMessage[];
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("displayName" in data && data.displayName != undefined) {
                this.displayName = data.displayName;
            }
            this.contacts = data.contacts;
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get displayName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set displayName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get contacts() {
        return pb_1.Message.getRepeatedWrapperField(this, ContactMessage, 2) as ContactMessage[];
    }
    set contacts(value: ContactMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        displayName?: string;
        contacts: ReturnType<typeof ContactMessage.prototype.toObject>[];
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new ContactsArrayMessage({
            contacts: data.contacts.map(item => ContactMessage.fromObject(item))
        });
        if (data.displayName != null) {
            message.displayName = data.displayName;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            displayName?: string;
            contacts: ReturnType<typeof ContactMessage.prototype.toObject>[];
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            displayName: pb_1.Message.getField(this, 1) != null ? this.displayName : undefined,
            contacts: pb_1.Message.getField(this, 2) != null ? this.contacts.map((item: ContactMessage) => item.toObject()) : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.displayName === "string" && this.displayName.length)
            writer.writeString(1, this.displayName);
        if (this.contacts.length)
            writer.writeRepeatedMessage(2, this.contacts, (item: ContactMessage) => item.serialize(writer));
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContactsArrayMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContactsArrayMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.displayName = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.contacts, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ContactMessage.deserialize(reader), ContactMessage));
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ContactsArrayMessage {
        return ContactsArrayMessage.deserialize(bytes);
    }
}
export class HSMCurrency extends pb_1.Message {
    constructor(data?: any[] | {
        currencyCode?: string;
        amount1000?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currencyCode" in data && data.currencyCode != undefined) {
                this.currencyCode = data.currencyCode;
            }
            if ("amount1000" in data && data.amount1000 != undefined) {
                this.amount1000 = data.amount1000;
            }
        }
    }
    get currencyCode() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set currencyCode(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount1000() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount1000(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        currencyCode?: string;
        amount1000?: number;
    }) {
        const message = new HSMCurrency({});
        if (data.currencyCode != null) {
            message.currencyCode = data.currencyCode;
        }
        if (data.amount1000 != null) {
            message.amount1000 = data.amount1000;
        }
        return message;
    }
    toObject() {
        const data: {
            currencyCode?: string;
            amount1000?: number;
        } = {
            currencyCode: pb_1.Message.getField(this, 1) != null ? this.currencyCode : undefined,
            amount1000: pb_1.Message.getField(this, 2) != null ? this.amount1000 : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.currencyCode === "string" && this.currencyCode.length)
            writer.writeString(1, this.currencyCode);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeInt64(2, this.amount1000);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HSMCurrency {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HSMCurrency();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currencyCode = reader.readString();
                    break;
                case 2:
                    message.amount1000 = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HSMCurrency {
        return HSMCurrency.deserialize(bytes);
    }
}
export class HSMDateTimeComponent extends pb_1.Message {
    constructor(data?: any[] | {
        dayOfWeek?: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE;
        year?: number;
        month?: number;
        dayOfMonth?: number;
        hour?: number;
        minute?: number;
        calendar?: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_CALENDARTYPE;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dayOfWeek" in data && data.dayOfWeek != undefined) {
                this.dayOfWeek = data.dayOfWeek;
            }
            if ("year" in data && data.year != undefined) {
                this.year = data.year;
            }
            if ("month" in data && data.month != undefined) {
                this.month = data.month;
            }
            if ("dayOfMonth" in data && data.dayOfMonth != undefined) {
                this.dayOfMonth = data.dayOfMonth;
            }
            if ("hour" in data && data.hour != undefined) {
                this.hour = data.hour;
            }
            if ("minute" in data && data.minute != undefined) {
                this.minute = data.minute;
            }
            if ("calendar" in data && data.calendar != undefined) {
                this.calendar = data.calendar;
            }
        }
    }
    get dayOfWeek() {
        return pb_1.Message.getFieldWithDefault(this, 1, HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE.MONDAY) as HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE;
    }
    set dayOfWeek(value: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE) {
        pb_1.Message.setField(this, 1, value);
    }
    get year() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set year(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get month() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set month(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get dayOfMonth() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set dayOfMonth(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get hour() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set hour(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get minute() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set minute(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get calendar() {
        return pb_1.Message.getFieldWithDefault(this, 7, HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_CALENDARTYPE.GREGORIAN) as HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_CALENDARTYPE;
    }
    set calendar(value: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_CALENDARTYPE) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        dayOfWeek?: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE;
        year?: number;
        month?: number;
        dayOfMonth?: number;
        hour?: number;
        minute?: number;
        calendar?: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_CALENDARTYPE;
    }) {
        const message = new HSMDateTimeComponent({});
        if (data.dayOfWeek != null) {
            message.dayOfWeek = data.dayOfWeek;
        }
        if (data.year != null) {
            message.year = data.year;
        }
        if (data.month != null) {
            message.month = data.month;
        }
        if (data.dayOfMonth != null) {
            message.dayOfMonth = data.dayOfMonth;
        }
        if (data.hour != null) {
            message.hour = data.hour;
        }
        if (data.minute != null) {
            message.minute = data.minute;
        }
        if (data.calendar != null) {
            message.calendar = data.calendar;
        }
        return message;
    }
    toObject() {
        const data: {
            dayOfWeek?: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE;
            year?: number;
            month?: number;
            dayOfMonth?: number;
            hour?: number;
            minute?: number;
            calendar?: HSMDateTimeComponent.HSM_DATE_TIME_COMPONENT_CALENDARTYPE;
        } = {
            dayOfWeek: pb_1.Message.getField(this, 1) != null ? this.dayOfWeek : undefined,
            year: pb_1.Message.getField(this, 2) != null ? this.year : undefined,
            month: pb_1.Message.getField(this, 3) != null ? this.month : undefined,
            dayOfMonth: pb_1.Message.getField(this, 4) != null ? this.dayOfMonth : undefined,
            hour: pb_1.Message.getField(this, 5) != null ? this.hour : undefined,
            minute: pb_1.Message.getField(this, 6) != null ? this.minute : undefined,
            calendar: pb_1.Message.getField(this, 7) != null ? this.calendar : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeEnum(1, this.dayOfWeek);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeUint32(2, this.year);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeUint32(3, this.month);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.dayOfMonth);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint32(5, this.hour);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeUint32(6, this.minute);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeEnum(7, this.calendar);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HSMDateTimeComponent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HSMDateTimeComponent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dayOfWeek = reader.readEnum();
                    break;
                case 2:
                    message.year = reader.readUint32();
                    break;
                case 3:
                    message.month = reader.readUint32();
                    break;
                case 4:
                    message.dayOfMonth = reader.readUint32();
                    break;
                case 5:
                    message.hour = reader.readUint32();
                    break;
                case 6:
                    message.minute = reader.readUint32();
                    break;
                case 7:
                    message.calendar = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HSMDateTimeComponent {
        return HSMDateTimeComponent.deserialize(bytes);
    }
}
export namespace HSMDateTimeComponent {
    export enum HSM_DATE_TIME_COMPONENT_DAYOFWEEKTYPE {
        MONDAY = 1,
        TUESDAY = 2,
        WEDNESDAY = 3,
        THURSDAY = 4,
        FRIDAY = 5,
        SATURDAY = 6,
        SUNDAY = 7
    }
    export enum HSM_DATE_TIME_COMPONENT_CALENDARTYPE {
        GREGORIAN = 1,
        SOLAR_HIJRI = 2
    }
}
export class HSMDateTimeUnixEpoch extends pb_1.Message {
    constructor(data?: any[] | {
        timestamp?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
        }
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        timestamp?: number;
    }) {
        const message = new HSMDateTimeUnixEpoch({});
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp?: number;
        } = {
            timestamp: pb_1.Message.getField(this, 1) != null ? this.timestamp : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeInt64(1, this.timestamp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HSMDateTimeUnixEpoch {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HSMDateTimeUnixEpoch();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.timestamp = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HSMDateTimeUnixEpoch {
        return HSMDateTimeUnixEpoch.deserialize(bytes);
    }
}
export class HSMDateTime extends pb_1.Message {
    constructor(data?: any[] | ({} & (({
        component?: HSMDateTimeComponent;
        unixEpoch?: never;
    } | {
        component?: never;
        unixEpoch?: HSMDateTimeUnixEpoch;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("component" in data && data.component != undefined) {
                this.component = data.component;
            }
            if ("unixEpoch" in data && data.unixEpoch != undefined) {
                this.unixEpoch = data.unixEpoch;
            }
        }
    }
    get component() {
        return pb_1.Message.getWrapperField(this, HSMDateTimeComponent, 1) as HSMDateTimeComponent;
    }
    set component(value: HSMDateTimeComponent) {
        pb_1.Message.setOneofWrapperField(this, 1, [1, 2], value);
    }
    get unixEpoch() {
        return pb_1.Message.getWrapperField(this, HSMDateTimeUnixEpoch, 2) as HSMDateTimeUnixEpoch;
    }
    set unixEpoch(value: HSMDateTimeUnixEpoch) {
        pb_1.Message.setOneofWrapperField(this, 2, [1, 2], value);
    }
    get datetimeOneof() {
        const cases: {
            [index: number]: "none" | "component" | "unixEpoch";
        } = {
            0: "none",
            1: "component",
            2: "unixEpoch"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        component?: ReturnType<typeof HSMDateTimeComponent.prototype.toObject>;
        unixEpoch?: ReturnType<typeof HSMDateTimeUnixEpoch.prototype.toObject>;
    }) {
        const message = new HSMDateTime({});
        if (data.component != null) {
            message.component = HSMDateTimeComponent.fromObject(data.component);
        }
        if (data.unixEpoch != null) {
            message.unixEpoch = HSMDateTimeUnixEpoch.fromObject(data.unixEpoch);
        }
        return message;
    }
    toObject() {
        const data: {
            component?: ReturnType<typeof HSMDateTimeComponent.prototype.toObject>;
            unixEpoch?: ReturnType<typeof HSMDateTimeUnixEpoch.prototype.toObject>;
        } = {
            component: pb_1.Message.getField(this, 1) != null ? this.component != null ? this.component.toObject() : undefined : undefined,
            unixEpoch: pb_1.Message.getField(this, 2) != null ? this.unixEpoch != null ? this.unixEpoch.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.component, () => this.component.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.unixEpoch, () => this.unixEpoch.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HSMDateTime {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HSMDateTime();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.component, () => message.component = HSMDateTimeComponent.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.unixEpoch, () => message.unixEpoch = HSMDateTimeUnixEpoch.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HSMDateTime {
        return HSMDateTime.deserialize(bytes);
    }
}
export class HSMLocalizableParameter extends pb_1.Message {
    constructor(data?: any[] | ({
        default?: string;
    } & (({
        currency?: HSMCurrency;
        dateTime?: never;
    } | {
        currency?: never;
        dateTime?: HSMDateTime;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[2, 3]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("default" in data && data.default != undefined) {
                this.default = data.default;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("dateTime" in data && data.dateTime != undefined) {
                this.dateTime = data.dateTime;
            }
        }
    }
    get default() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set default(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get currency() {
        return pb_1.Message.getWrapperField(this, HSMCurrency, 2) as HSMCurrency;
    }
    set currency(value: HSMCurrency) {
        pb_1.Message.setOneofWrapperField(this, 2, [2, 3], value);
    }
    get dateTime() {
        return pb_1.Message.getWrapperField(this, HSMDateTime, 3) as HSMDateTime;
    }
    set dateTime(value: HSMDateTime) {
        pb_1.Message.setOneofWrapperField(this, 3, [2, 3], value);
    }
    get paramOneof() {
        const cases: {
            [index: number]: "none" | "currency" | "dateTime";
        } = {
            0: "none",
            2: "currency",
            3: "dateTime"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
    }
    static fromObject(data: {
        default?: string;
        currency?: ReturnType<typeof HSMCurrency.prototype.toObject>;
        dateTime?: ReturnType<typeof HSMDateTime.prototype.toObject>;
    }) {
        const message = new HSMLocalizableParameter({});
        if (data.default != null) {
            message.default = data.default;
        }
        if (data.currency != null) {
            message.currency = HSMCurrency.fromObject(data.currency);
        }
        if (data.dateTime != null) {
            message.dateTime = HSMDateTime.fromObject(data.dateTime);
        }
        return message;
    }
    toObject() {
        const data: {
            default?: string;
            currency?: ReturnType<typeof HSMCurrency.prototype.toObject>;
            dateTime?: ReturnType<typeof HSMDateTime.prototype.toObject>;
        } = {
            default: pb_1.Message.getField(this, 1) != null ? this.default : undefined,
            currency: pb_1.Message.getField(this, 2) != null ? this.currency != null ? this.currency.toObject() : undefined : undefined,
            dateTime: pb_1.Message.getField(this, 3) != null ? this.dateTime != null ? this.dateTime.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.default === "string" && this.default.length)
            writer.writeString(1, this.default);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.currency, () => this.currency.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.dateTime, () => this.dateTime.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HSMLocalizableParameter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HSMLocalizableParameter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.default = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.currency, () => message.currency = HSMCurrency.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.dateTime, () => message.dateTime = HSMDateTime.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HSMLocalizableParameter {
        return HSMLocalizableParameter.deserialize(bytes);
    }
}
export class HighlyStructuredMessage extends pb_1.Message {
    constructor(data?: any[] | {
        namespace?: string;
        elementName?: string;
        params: string[];
        fallbackLg?: string;
        fallbackLc?: string;
        localizableParams: HSMLocalizableParameter[];
        deterministicLg?: string;
        deterministicLc?: string;
        hydratedHsm?: TemplateMessage;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 6], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("namespace" in data && data.namespace != undefined) {
                this.namespace = data.namespace;
            }
            if ("elementName" in data && data.elementName != undefined) {
                this.elementName = data.elementName;
            }
            this.params = data.params;
            if ("fallbackLg" in data && data.fallbackLg != undefined) {
                this.fallbackLg = data.fallbackLg;
            }
            if ("fallbackLc" in data && data.fallbackLc != undefined) {
                this.fallbackLc = data.fallbackLc;
            }
            this.localizableParams = data.localizableParams;
            if ("deterministicLg" in data && data.deterministicLg != undefined) {
                this.deterministicLg = data.deterministicLg;
            }
            if ("deterministicLc" in data && data.deterministicLc != undefined) {
                this.deterministicLc = data.deterministicLc;
            }
            if ("hydratedHsm" in data && data.hydratedHsm != undefined) {
                this.hydratedHsm = data.hydratedHsm;
            }
        }
    }
    get namespace() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set namespace(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get elementName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set elementName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get params() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
    }
    set params(value: string[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get fallbackLg() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set fallbackLg(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get fallbackLc() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set fallbackLc(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get localizableParams() {
        return pb_1.Message.getRepeatedWrapperField(this, HSMLocalizableParameter, 6) as HSMLocalizableParameter[];
    }
    set localizableParams(value: HSMLocalizableParameter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get deterministicLg() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set deterministicLg(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get deterministicLc() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set deterministicLc(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get hydratedHsm() {
        return pb_1.Message.getWrapperField(this, TemplateMessage, 9) as TemplateMessage;
    }
    set hydratedHsm(value: TemplateMessage) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    static fromObject(data: {
        namespace?: string;
        elementName?: string;
        params: string[];
        fallbackLg?: string;
        fallbackLc?: string;
        localizableParams: ReturnType<typeof HSMLocalizableParameter.prototype.toObject>[];
        deterministicLg?: string;
        deterministicLc?: string;
        hydratedHsm?: ReturnType<typeof TemplateMessage.prototype.toObject>;
    }) {
        const message = new HighlyStructuredMessage({
            params: data.params,
            localizableParams: data.localizableParams.map(item => HSMLocalizableParameter.fromObject(item))
        });
        if (data.namespace != null) {
            message.namespace = data.namespace;
        }
        if (data.elementName != null) {
            message.elementName = data.elementName;
        }
        if (data.fallbackLg != null) {
            message.fallbackLg = data.fallbackLg;
        }
        if (data.fallbackLc != null) {
            message.fallbackLc = data.fallbackLc;
        }
        if (data.deterministicLg != null) {
            message.deterministicLg = data.deterministicLg;
        }
        if (data.deterministicLc != null) {
            message.deterministicLc = data.deterministicLc;
        }
        if (data.hydratedHsm != null) {
            message.hydratedHsm = TemplateMessage.fromObject(data.hydratedHsm);
        }
        return message;
    }
    toObject() {
        const data: {
            namespace?: string;
            elementName?: string;
            params: string[];
            fallbackLg?: string;
            fallbackLc?: string;
            localizableParams: ReturnType<typeof HSMLocalizableParameter.prototype.toObject>[];
            deterministicLg?: string;
            deterministicLc?: string;
            hydratedHsm?: ReturnType<typeof TemplateMessage.prototype.toObject>;
        } = {
            namespace: pb_1.Message.getField(this, 1) != null ? this.namespace : undefined,
            elementName: pb_1.Message.getField(this, 2) != null ? this.elementName : undefined,
            params: pb_1.Message.getField(this, 3) != null ? this.params : undefined,
            fallbackLg: pb_1.Message.getField(this, 4) != null ? this.fallbackLg : undefined,
            fallbackLc: pb_1.Message.getField(this, 5) != null ? this.fallbackLc : undefined,
            localizableParams: pb_1.Message.getField(this, 6) != null ? this.localizableParams.map((item: HSMLocalizableParameter) => item.toObject()) : undefined,
            deterministicLg: pb_1.Message.getField(this, 7) != null ? this.deterministicLg : undefined,
            deterministicLc: pb_1.Message.getField(this, 8) != null ? this.deterministicLc : undefined,
            hydratedHsm: pb_1.Message.getField(this, 9) != null ? this.hydratedHsm != null ? this.hydratedHsm.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.namespace === "string" && this.namespace.length)
            writer.writeString(1, this.namespace);
        if (typeof this.elementName === "string" && this.elementName.length)
            writer.writeString(2, this.elementName);
        if (this.params.length)
            writer.writeRepeatedString(3, this.params);
        if (typeof this.fallbackLg === "string" && this.fallbackLg.length)
            writer.writeString(4, this.fallbackLg);
        if (typeof this.fallbackLc === "string" && this.fallbackLc.length)
            writer.writeString(5, this.fallbackLc);
        if (this.localizableParams.length)
            writer.writeRepeatedMessage(6, this.localizableParams, (item: HSMLocalizableParameter) => item.serialize(writer));
        if (typeof this.deterministicLg === "string" && this.deterministicLg.length)
            writer.writeString(7, this.deterministicLg);
        if (typeof this.deterministicLc === "string" && this.deterministicLc.length)
            writer.writeString(8, this.deterministicLc);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeMessage(9, this.hydratedHsm, () => this.hydratedHsm.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HighlyStructuredMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HighlyStructuredMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.namespace = reader.readString();
                    break;
                case 2:
                    message.elementName = reader.readString();
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                case 4:
                    message.fallbackLg = reader.readString();
                    break;
                case 5:
                    message.fallbackLc = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.localizableParams, () => pb_1.Message.addToRepeatedWrapperField(message, 6, HSMLocalizableParameter.deserialize(reader), HSMLocalizableParameter));
                    break;
                case 7:
                    message.deterministicLg = reader.readString();
                    break;
                case 8:
                    message.deterministicLc = reader.readString();
                    break;
                case 9:
                    reader.readMessage(message.hydratedHsm, () => message.hydratedHsm = TemplateMessage.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HighlyStructuredMessage {
        return HighlyStructuredMessage.deserialize(bytes);
    }
}
export class SendPaymentMessage extends pb_1.Message {
    constructor(data?: any[] | {
        noteMessage?: Message;
        requestMessageKey?: MessageKey;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("noteMessage" in data && data.noteMessage != undefined) {
                this.noteMessage = data.noteMessage;
            }
            if ("requestMessageKey" in data && data.requestMessageKey != undefined) {
                this.requestMessageKey = data.requestMessageKey;
            }
        }
    }
    get noteMessage() {
        return pb_1.Message.getWrapperField(this, Message, 2) as Message;
    }
    set noteMessage(value: Message) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get requestMessageKey() {
        return pb_1.Message.getWrapperField(this, MessageKey, 3) as MessageKey;
    }
    set requestMessageKey(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    static fromObject(data: {
        noteMessage?: ReturnType<typeof Message.prototype.toObject>;
        requestMessageKey?: ReturnType<typeof MessageKey.prototype.toObject>;
    }) {
        const message = new SendPaymentMessage({});
        if (data.noteMessage != null) {
            message.noteMessage = Message.fromObject(data.noteMessage);
        }
        if (data.requestMessageKey != null) {
            message.requestMessageKey = MessageKey.fromObject(data.requestMessageKey);
        }
        return message;
    }
    toObject() {
        const data: {
            noteMessage?: ReturnType<typeof Message.prototype.toObject>;
            requestMessageKey?: ReturnType<typeof MessageKey.prototype.toObject>;
        } = {
            noteMessage: pb_1.Message.getField(this, 2) != null ? this.noteMessage != null ? this.noteMessage.toObject() : undefined : undefined,
            requestMessageKey: pb_1.Message.getField(this, 3) != null ? this.requestMessageKey != null ? this.requestMessageKey.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.noteMessage, () => this.noteMessage.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.requestMessageKey, () => this.requestMessageKey.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendPaymentMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendPaymentMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    reader.readMessage(message.noteMessage, () => message.noteMessage = Message.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.requestMessageKey, () => message.requestMessageKey = MessageKey.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SendPaymentMessage {
        return SendPaymentMessage.deserialize(bytes);
    }
}
export class RequestPaymentMessage extends pb_1.Message {
    constructor(data?: any[] | {
        noteMessage?: Message;
        currencyCodeIso4217?: string;
        amount1000?: number;
        requestFrom?: string;
        expiryTimestamp?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("noteMessage" in data && data.noteMessage != undefined) {
                this.noteMessage = data.noteMessage;
            }
            if ("currencyCodeIso4217" in data && data.currencyCodeIso4217 != undefined) {
                this.currencyCodeIso4217 = data.currencyCodeIso4217;
            }
            if ("amount1000" in data && data.amount1000 != undefined) {
                this.amount1000 = data.amount1000;
            }
            if ("requestFrom" in data && data.requestFrom != undefined) {
                this.requestFrom = data.requestFrom;
            }
            if ("expiryTimestamp" in data && data.expiryTimestamp != undefined) {
                this.expiryTimestamp = data.expiryTimestamp;
            }
        }
    }
    get noteMessage() {
        return pb_1.Message.getWrapperField(this, Message, 4) as Message;
    }
    set noteMessage(value: Message) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get currencyCodeIso4217() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set currencyCodeIso4217(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount1000() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount1000(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get requestFrom() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set requestFrom(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get expiryTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set expiryTimestamp(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        noteMessage?: ReturnType<typeof Message.prototype.toObject>;
        currencyCodeIso4217?: string;
        amount1000?: number;
        requestFrom?: string;
        expiryTimestamp?: number;
    }) {
        const message = new RequestPaymentMessage({});
        if (data.noteMessage != null) {
            message.noteMessage = Message.fromObject(data.noteMessage);
        }
        if (data.currencyCodeIso4217 != null) {
            message.currencyCodeIso4217 = data.currencyCodeIso4217;
        }
        if (data.amount1000 != null) {
            message.amount1000 = data.amount1000;
        }
        if (data.requestFrom != null) {
            message.requestFrom = data.requestFrom;
        }
        if (data.expiryTimestamp != null) {
            message.expiryTimestamp = data.expiryTimestamp;
        }
        return message;
    }
    toObject() {
        const data: {
            noteMessage?: ReturnType<typeof Message.prototype.toObject>;
            currencyCodeIso4217?: string;
            amount1000?: number;
            requestFrom?: string;
            expiryTimestamp?: number;
        } = {
            noteMessage: pb_1.Message.getField(this, 4) != null ? this.noteMessage != null ? this.noteMessage.toObject() : undefined : undefined,
            currencyCodeIso4217: pb_1.Message.getField(this, 1) != null ? this.currencyCodeIso4217 : undefined,
            amount1000: pb_1.Message.getField(this, 2) != null ? this.amount1000 : undefined,
            requestFrom: pb_1.Message.getField(this, 3) != null ? this.requestFrom : undefined,
            expiryTimestamp: pb_1.Message.getField(this, 5) != null ? this.expiryTimestamp : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeMessage(4, this.noteMessage, () => this.noteMessage.serialize(writer));
        if (typeof this.currencyCodeIso4217 === "string" && this.currencyCodeIso4217.length)
            writer.writeString(1, this.currencyCodeIso4217);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeUint64(2, this.amount1000);
        if (typeof this.requestFrom === "string" && this.requestFrom.length)
            writer.writeString(3, this.requestFrom);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeInt64(5, this.expiryTimestamp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RequestPaymentMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RequestPaymentMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    reader.readMessage(message.noteMessage, () => message.noteMessage = Message.deserialize(reader));
                    break;
                case 1:
                    message.currencyCodeIso4217 = reader.readString();
                    break;
                case 2:
                    message.amount1000 = reader.readUint64();
                    break;
                case 3:
                    message.requestFrom = reader.readString();
                    break;
                case 5:
                    message.expiryTimestamp = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RequestPaymentMessage {
        return RequestPaymentMessage.deserialize(bytes);
    }
}
export class DeclinePaymentRequestMessage extends pb_1.Message {
    constructor(data?: any[] | {
        key?: MessageKey;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
        }
    }
    get key() {
        return pb_1.Message.getWrapperField(this, MessageKey, 1) as MessageKey;
    }
    set key(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    static fromObject(data: {
        key?: ReturnType<typeof MessageKey.prototype.toObject>;
    }) {
        const message = new DeclinePaymentRequestMessage({});
        if (data.key != null) {
            message.key = MessageKey.fromObject(data.key);
        }
        return message;
    }
    toObject() {
        const data: {
            key?: ReturnType<typeof MessageKey.prototype.toObject>;
        } = {
            key: pb_1.Message.getField(this, 1) != null ? this.key != null ? this.key.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.key, () => this.key.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeclinePaymentRequestMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeclinePaymentRequestMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.key, () => message.key = MessageKey.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeclinePaymentRequestMessage {
        return DeclinePaymentRequestMessage.deserialize(bytes);
    }
}
export class CancelPaymentRequestMessage extends pb_1.Message {
    constructor(data?: any[] | {
        key?: MessageKey;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
        }
    }
    get key() {
        return pb_1.Message.getWrapperField(this, MessageKey, 1) as MessageKey;
    }
    set key(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    static fromObject(data: {
        key?: ReturnType<typeof MessageKey.prototype.toObject>;
    }) {
        const message = new CancelPaymentRequestMessage({});
        if (data.key != null) {
            message.key = MessageKey.fromObject(data.key);
        }
        return message;
    }
    toObject() {
        const data: {
            key?: ReturnType<typeof MessageKey.prototype.toObject>;
        } = {
            key: pb_1.Message.getField(this, 1) != null ? this.key != null ? this.key.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.key, () => this.key.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CancelPaymentRequestMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelPaymentRequestMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.key, () => message.key = MessageKey.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CancelPaymentRequestMessage {
        return CancelPaymentRequestMessage.deserialize(bytes);
    }
}
export class LiveLocationMessage extends pb_1.Message {
    constructor(data?: any[] | {
        degreesLatitude?: number;
        degreesLongitude?: number;
        accuracyInMeters?: number;
        speedInMps?: number;
        degreesClockwiseFromMagneticNorth?: number;
        caption?: string;
        sequenceNumber?: number;
        timeOffset?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("degreesLatitude" in data && data.degreesLatitude != undefined) {
                this.degreesLatitude = data.degreesLatitude;
            }
            if ("degreesLongitude" in data && data.degreesLongitude != undefined) {
                this.degreesLongitude = data.degreesLongitude;
            }
            if ("accuracyInMeters" in data && data.accuracyInMeters != undefined) {
                this.accuracyInMeters = data.accuracyInMeters;
            }
            if ("speedInMps" in data && data.speedInMps != undefined) {
                this.speedInMps = data.speedInMps;
            }
            if ("degreesClockwiseFromMagneticNorth" in data && data.degreesClockwiseFromMagneticNorth != undefined) {
                this.degreesClockwiseFromMagneticNorth = data.degreesClockwiseFromMagneticNorth;
            }
            if ("caption" in data && data.caption != undefined) {
                this.caption = data.caption;
            }
            if ("sequenceNumber" in data && data.sequenceNumber != undefined) {
                this.sequenceNumber = data.sequenceNumber;
            }
            if ("timeOffset" in data && data.timeOffset != undefined) {
                this.timeOffset = data.timeOffset;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get degreesLatitude() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set degreesLatitude(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get degreesLongitude() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set degreesLongitude(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get accuracyInMeters() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set accuracyInMeters(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get speedInMps() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set speedInMps(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get degreesClockwiseFromMagneticNorth() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set degreesClockwiseFromMagneticNorth(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get caption() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set caption(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get sequenceNumber() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set sequenceNumber(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get timeOffset() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set timeOffset(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        degreesLatitude?: number;
        degreesLongitude?: number;
        accuracyInMeters?: number;
        speedInMps?: number;
        degreesClockwiseFromMagneticNorth?: number;
        caption?: string;
        sequenceNumber?: number;
        timeOffset?: number;
        jpegThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new LiveLocationMessage({});
        if (data.degreesLatitude != null) {
            message.degreesLatitude = data.degreesLatitude;
        }
        if (data.degreesLongitude != null) {
            message.degreesLongitude = data.degreesLongitude;
        }
        if (data.accuracyInMeters != null) {
            message.accuracyInMeters = data.accuracyInMeters;
        }
        if (data.speedInMps != null) {
            message.speedInMps = data.speedInMps;
        }
        if (data.degreesClockwiseFromMagneticNorth != null) {
            message.degreesClockwiseFromMagneticNorth = data.degreesClockwiseFromMagneticNorth;
        }
        if (data.caption != null) {
            message.caption = data.caption;
        }
        if (data.sequenceNumber != null) {
            message.sequenceNumber = data.sequenceNumber;
        }
        if (data.timeOffset != null) {
            message.timeOffset = data.timeOffset;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            degreesLatitude?: number;
            degreesLongitude?: number;
            accuracyInMeters?: number;
            speedInMps?: number;
            degreesClockwiseFromMagneticNorth?: number;
            caption?: string;
            sequenceNumber?: number;
            timeOffset?: number;
            jpegThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            degreesLatitude: pb_1.Message.getField(this, 1) != null ? this.degreesLatitude : undefined,
            degreesLongitude: pb_1.Message.getField(this, 2) != null ? this.degreesLongitude : undefined,
            accuracyInMeters: pb_1.Message.getField(this, 3) != null ? this.accuracyInMeters : undefined,
            speedInMps: pb_1.Message.getField(this, 4) != null ? this.speedInMps : undefined,
            degreesClockwiseFromMagneticNorth: pb_1.Message.getField(this, 5) != null ? this.degreesClockwiseFromMagneticNorth : undefined,
            caption: pb_1.Message.getField(this, 6) != null ? this.caption : undefined,
            sequenceNumber: pb_1.Message.getField(this, 7) != null ? this.sequenceNumber : undefined,
            timeOffset: pb_1.Message.getField(this, 8) != null ? this.timeOffset : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 16) != null ? this.jpegThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeDouble(1, this.degreesLatitude);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeDouble(2, this.degreesLongitude);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeUint32(3, this.accuracyInMeters);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeFloat(4, this.speedInMps);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint32(5, this.degreesClockwiseFromMagneticNorth);
        if (typeof this.caption === "string" && this.caption.length)
            writer.writeString(6, this.caption);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeInt64(7, this.sequenceNumber);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeUint32(8, this.timeOffset);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.jpegThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LiveLocationMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LiveLocationMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.degreesLatitude = reader.readDouble();
                    break;
                case 2:
                    message.degreesLongitude = reader.readDouble();
                    break;
                case 3:
                    message.accuracyInMeters = reader.readUint32();
                    break;
                case 4:
                    message.speedInMps = reader.readFloat();
                    break;
                case 5:
                    message.degreesClockwiseFromMagneticNorth = reader.readUint32();
                    break;
                case 6:
                    message.caption = reader.readString();
                    break;
                case 7:
                    message.sequenceNumber = reader.readInt64();
                    break;
                case 8:
                    message.timeOffset = reader.readUint32();
                    break;
                case 16:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LiveLocationMessage {
        return LiveLocationMessage.deserialize(bytes);
    }
}
export class StickerMessage extends pb_1.Message {
    constructor(data?: any[] | {
        url?: string;
        fileSha256?: Uint8Array;
        fileEncSha256?: Uint8Array;
        mediaKey?: Uint8Array;
        mimetype?: string;
        height?: number;
        width?: number;
        directPath?: string;
        fileLength?: number;
        mediaKeyTimestamp?: number;
        firstFrameLength?: number;
        firstFrameSidecar?: Uint8Array;
        isAnimated?: boolean;
        pngThumbnail?: Uint8Array;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("fileSha256" in data && data.fileSha256 != undefined) {
                this.fileSha256 = data.fileSha256;
            }
            if ("fileEncSha256" in data && data.fileEncSha256 != undefined) {
                this.fileEncSha256 = data.fileEncSha256;
            }
            if ("mediaKey" in data && data.mediaKey != undefined) {
                this.mediaKey = data.mediaKey;
            }
            if ("mimetype" in data && data.mimetype != undefined) {
                this.mimetype = data.mimetype;
            }
            if ("height" in data && data.height != undefined) {
                this.height = data.height;
            }
            if ("width" in data && data.width != undefined) {
                this.width = data.width;
            }
            if ("directPath" in data && data.directPath != undefined) {
                this.directPath = data.directPath;
            }
            if ("fileLength" in data && data.fileLength != undefined) {
                this.fileLength = data.fileLength;
            }
            if ("mediaKeyTimestamp" in data && data.mediaKeyTimestamp != undefined) {
                this.mediaKeyTimestamp = data.mediaKeyTimestamp;
            }
            if ("firstFrameLength" in data && data.firstFrameLength != undefined) {
                this.firstFrameLength = data.firstFrameLength;
            }
            if ("firstFrameSidecar" in data && data.firstFrameSidecar != undefined) {
                this.firstFrameSidecar = data.firstFrameSidecar;
            }
            if ("isAnimated" in data && data.isAnimated != undefined) {
                this.isAnimated = data.isAnimated;
            }
            if ("pngThumbnail" in data && data.pngThumbnail != undefined) {
                this.pngThumbnail = data.pngThumbnail;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get fileSha256() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
    }
    set fileSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get fileEncSha256() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
    }
    set fileEncSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get mediaKey() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
    }
    set mediaKey(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get mimetype() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set mimetype(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get height() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set height(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get width() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set width(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get directPath() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set directPath(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get fileLength() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set fileLength(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get mediaKeyTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set mediaKeyTimestamp(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get firstFrameLength() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set firstFrameLength(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get firstFrameSidecar() {
        return pb_1.Message.getFieldWithDefault(this, 12, new Uint8Array()) as Uint8Array;
    }
    set firstFrameSidecar(value: Uint8Array) {
        pb_1.Message.setField(this, 12, value);
    }
    get isAnimated() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set isAnimated(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get pngThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array()) as Uint8Array;
    }
    set pngThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 16, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        url?: string;
        fileSha256?: Uint8Array;
        fileEncSha256?: Uint8Array;
        mediaKey?: Uint8Array;
        mimetype?: string;
        height?: number;
        width?: number;
        directPath?: string;
        fileLength?: number;
        mediaKeyTimestamp?: number;
        firstFrameLength?: number;
        firstFrameSidecar?: Uint8Array;
        isAnimated?: boolean;
        pngThumbnail?: Uint8Array;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new StickerMessage({});
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.fileSha256 != null) {
            message.fileSha256 = data.fileSha256;
        }
        if (data.fileEncSha256 != null) {
            message.fileEncSha256 = data.fileEncSha256;
        }
        if (data.mediaKey != null) {
            message.mediaKey = data.mediaKey;
        }
        if (data.mimetype != null) {
            message.mimetype = data.mimetype;
        }
        if (data.height != null) {
            message.height = data.height;
        }
        if (data.width != null) {
            message.width = data.width;
        }
        if (data.directPath != null) {
            message.directPath = data.directPath;
        }
        if (data.fileLength != null) {
            message.fileLength = data.fileLength;
        }
        if (data.mediaKeyTimestamp != null) {
            message.mediaKeyTimestamp = data.mediaKeyTimestamp;
        }
        if (data.firstFrameLength != null) {
            message.firstFrameLength = data.firstFrameLength;
        }
        if (data.firstFrameSidecar != null) {
            message.firstFrameSidecar = data.firstFrameSidecar;
        }
        if (data.isAnimated != null) {
            message.isAnimated = data.isAnimated;
        }
        if (data.pngThumbnail != null) {
            message.pngThumbnail = data.pngThumbnail;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            url?: string;
            fileSha256?: Uint8Array;
            fileEncSha256?: Uint8Array;
            mediaKey?: Uint8Array;
            mimetype?: string;
            height?: number;
            width?: number;
            directPath?: string;
            fileLength?: number;
            mediaKeyTimestamp?: number;
            firstFrameLength?: number;
            firstFrameSidecar?: Uint8Array;
            isAnimated?: boolean;
            pngThumbnail?: Uint8Array;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            url: pb_1.Message.getField(this, 1) != null ? this.url : undefined,
            fileSha256: pb_1.Message.getField(this, 2) != null ? this.fileSha256 : undefined,
            fileEncSha256: pb_1.Message.getField(this, 3) != null ? this.fileEncSha256 : undefined,
            mediaKey: pb_1.Message.getField(this, 4) != null ? this.mediaKey : undefined,
            mimetype: pb_1.Message.getField(this, 5) != null ? this.mimetype : undefined,
            height: pb_1.Message.getField(this, 6) != null ? this.height : undefined,
            width: pb_1.Message.getField(this, 7) != null ? this.width : undefined,
            directPath: pb_1.Message.getField(this, 8) != null ? this.directPath : undefined,
            fileLength: pb_1.Message.getField(this, 9) != null ? this.fileLength : undefined,
            mediaKeyTimestamp: pb_1.Message.getField(this, 10) != null ? this.mediaKeyTimestamp : undefined,
            firstFrameLength: pb_1.Message.getField(this, 11) != null ? this.firstFrameLength : undefined,
            firstFrameSidecar: pb_1.Message.getField(this, 12) != null ? this.firstFrameSidecar : undefined,
            isAnimated: pb_1.Message.getField(this, 13) != null ? this.isAnimated : undefined,
            pngThumbnail: pb_1.Message.getField(this, 16) != null ? this.pngThumbnail : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(1, this.url);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeBytes(2, this.fileSha256);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeBytes(3, this.fileEncSha256);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeBytes(4, this.mediaKey);
        if (typeof this.mimetype === "string" && this.mimetype.length)
            writer.writeString(5, this.mimetype);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeUint32(6, this.height);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeUint32(7, this.width);
        if (typeof this.directPath === "string" && this.directPath.length)
            writer.writeString(8, this.directPath);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeUint64(9, this.fileLength);
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeInt64(10, this.mediaKeyTimestamp);
        if (pb_1.Message.getField(this, 11) != null)
            writer.writeUint32(11, this.firstFrameLength);
        if (pb_1.Message.getField(this, 12) != null)
            writer.writeBytes(12, this.firstFrameSidecar);
        if (pb_1.Message.getField(this, 13) != null)
            writer.writeBool(13, this.isAnimated);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBytes(16, this.pngThumbnail);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StickerMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StickerMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.url = reader.readString();
                    break;
                case 2:
                    message.fileSha256 = reader.readBytes();
                    break;
                case 3:
                    message.fileEncSha256 = reader.readBytes();
                    break;
                case 4:
                    message.mediaKey = reader.readBytes();
                    break;
                case 5:
                    message.mimetype = reader.readString();
                    break;
                case 6:
                    message.height = reader.readUint32();
                    break;
                case 7:
                    message.width = reader.readUint32();
                    break;
                case 8:
                    message.directPath = reader.readString();
                    break;
                case 9:
                    message.fileLength = reader.readUint64();
                    break;
                case 10:
                    message.mediaKeyTimestamp = reader.readInt64();
                    break;
                case 11:
                    message.firstFrameLength = reader.readUint32();
                    break;
                case 12:
                    message.firstFrameSidecar = reader.readBytes();
                    break;
                case 13:
                    message.isAnimated = reader.readBool();
                    break;
                case 16:
                    message.pngThumbnail = reader.readBytes();
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StickerMessage {
        return StickerMessage.deserialize(bytes);
    }
}
export class FourRowTemplate extends pb_1.Message {
    constructor(data?: any[] | ({
        content?: HighlyStructuredMessage;
        footer?: HighlyStructuredMessage;
        buttons: TemplateButton[];
    } & (({
        documentMessage?: DocumentMessage;
        highlyStructuredMessage?: never;
        imageMessage?: never;
        videoMessage?: never;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        highlyStructuredMessage?: HighlyStructuredMessage;
        imageMessage?: never;
        videoMessage?: never;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        highlyStructuredMessage?: never;
        imageMessage?: ImageMessage;
        videoMessage?: never;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        highlyStructuredMessage?: never;
        imageMessage?: never;
        videoMessage?: VideoMessage;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        highlyStructuredMessage?: never;
        imageMessage?: never;
        videoMessage?: never;
        locationMessage?: LocationMessage;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], [[1, 2, 3, 4, 5]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
            if ("footer" in data && data.footer != undefined) {
                this.footer = data.footer;
            }
            this.buttons = data.buttons;
            if ("documentMessage" in data && data.documentMessage != undefined) {
                this.documentMessage = data.documentMessage;
            }
            if ("highlyStructuredMessage" in data && data.highlyStructuredMessage != undefined) {
                this.highlyStructuredMessage = data.highlyStructuredMessage;
            }
            if ("imageMessage" in data && data.imageMessage != undefined) {
                this.imageMessage = data.imageMessage;
            }
            if ("videoMessage" in data && data.videoMessage != undefined) {
                this.videoMessage = data.videoMessage;
            }
            if ("locationMessage" in data && data.locationMessage != undefined) {
                this.locationMessage = data.locationMessage;
            }
        }
    }
    get content() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 6) as HighlyStructuredMessage;
    }
    set content(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get footer() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 7) as HighlyStructuredMessage;
    }
    set footer(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get buttons() {
        return pb_1.Message.getRepeatedWrapperField(this, TemplateButton, 8) as TemplateButton[];
    }
    set buttons(value: TemplateButton[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get documentMessage() {
        return pb_1.Message.getWrapperField(this, DocumentMessage, 1) as DocumentMessage;
    }
    set documentMessage(value: DocumentMessage) {
        pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3, 4, 5], value);
    }
    get highlyStructuredMessage() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 2) as HighlyStructuredMessage;
    }
    set highlyStructuredMessage(value: HighlyStructuredMessage) {
        pb_1.Message.setOneofWrapperField(this, 2, [1, 2, 3, 4, 5], value);
    }
    get imageMessage() {
        return pb_1.Message.getWrapperField(this, ImageMessage, 3) as ImageMessage;
    }
    set imageMessage(value: ImageMessage) {
        pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3, 4, 5], value);
    }
    get videoMessage() {
        return pb_1.Message.getWrapperField(this, VideoMessage, 4) as VideoMessage;
    }
    set videoMessage(value: VideoMessage) {
        pb_1.Message.setOneofWrapperField(this, 4, [1, 2, 3, 4, 5], value);
    }
    get locationMessage() {
        return pb_1.Message.getWrapperField(this, LocationMessage, 5) as LocationMessage;
    }
    set locationMessage(value: LocationMessage) {
        pb_1.Message.setOneofWrapperField(this, 5, [1, 2, 3, 4, 5], value);
    }
    get title() {
        const cases: {
            [index: number]: "none" | "documentMessage" | "highlyStructuredMessage" | "imageMessage" | "videoMessage" | "locationMessage";
        } = {
            0: "none",
            1: "documentMessage",
            2: "highlyStructuredMessage",
            3: "imageMessage",
            4: "videoMessage",
            5: "locationMessage"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
    }
    static fromObject(data: {
        content?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        footer?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        buttons: ReturnType<typeof TemplateButton.prototype.toObject>[];
        documentMessage?: ReturnType<typeof DocumentMessage.prototype.toObject>;
        highlyStructuredMessage?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        imageMessage?: ReturnType<typeof ImageMessage.prototype.toObject>;
        videoMessage?: ReturnType<typeof VideoMessage.prototype.toObject>;
        locationMessage?: ReturnType<typeof LocationMessage.prototype.toObject>;
    }) {
        const message = new FourRowTemplate({
            buttons: data.buttons.map(item => TemplateButton.fromObject(item))
        });
        if (data.content != null) {
            message.content = HighlyStructuredMessage.fromObject(data.content);
        }
        if (data.footer != null) {
            message.footer = HighlyStructuredMessage.fromObject(data.footer);
        }
        if (data.documentMessage != null) {
            message.documentMessage = DocumentMessage.fromObject(data.documentMessage);
        }
        if (data.highlyStructuredMessage != null) {
            message.highlyStructuredMessage = HighlyStructuredMessage.fromObject(data.highlyStructuredMessage);
        }
        if (data.imageMessage != null) {
            message.imageMessage = ImageMessage.fromObject(data.imageMessage);
        }
        if (data.videoMessage != null) {
            message.videoMessage = VideoMessage.fromObject(data.videoMessage);
        }
        if (data.locationMessage != null) {
            message.locationMessage = LocationMessage.fromObject(data.locationMessage);
        }
        return message;
    }
    toObject() {
        const data: {
            content?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            footer?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            buttons: ReturnType<typeof TemplateButton.prototype.toObject>[];
            documentMessage?: ReturnType<typeof DocumentMessage.prototype.toObject>;
            highlyStructuredMessage?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            imageMessage?: ReturnType<typeof ImageMessage.prototype.toObject>;
            videoMessage?: ReturnType<typeof VideoMessage.prototype.toObject>;
            locationMessage?: ReturnType<typeof LocationMessage.prototype.toObject>;
        } = {
            content: pb_1.Message.getField(this, 6) != null ? this.content != null ? this.content.toObject() : undefined : undefined,
            footer: pb_1.Message.getField(this, 7) != null ? this.footer != null ? this.footer.toObject() : undefined : undefined,
            buttons: pb_1.Message.getField(this, 8) != null ? this.buttons.map((item: TemplateButton) => item.toObject()) : undefined,
            documentMessage: pb_1.Message.getField(this, 1) != null ? this.documentMessage != null ? this.documentMessage.toObject() : undefined : undefined,
            highlyStructuredMessage: pb_1.Message.getField(this, 2) != null ? this.highlyStructuredMessage != null ? this.highlyStructuredMessage.toObject() : undefined : undefined,
            imageMessage: pb_1.Message.getField(this, 3) != null ? this.imageMessage != null ? this.imageMessage.toObject() : undefined : undefined,
            videoMessage: pb_1.Message.getField(this, 4) != null ? this.videoMessage != null ? this.videoMessage.toObject() : undefined : undefined,
            locationMessage: pb_1.Message.getField(this, 5) != null ? this.locationMessage != null ? this.locationMessage.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeMessage(6, this.content, () => this.content.serialize(writer));
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeMessage(7, this.footer, () => this.footer.serialize(writer));
        if (this.buttons.length)
            writer.writeRepeatedMessage(8, this.buttons, (item: TemplateButton) => item.serialize(writer));
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.documentMessage, () => this.documentMessage.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.highlyStructuredMessage, () => this.highlyStructuredMessage.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.imageMessage, () => this.imageMessage.serialize(writer));
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeMessage(4, this.videoMessage, () => this.videoMessage.serialize(writer));
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeMessage(5, this.locationMessage, () => this.locationMessage.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FourRowTemplate {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FourRowTemplate();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    reader.readMessage(message.content, () => message.content = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.footer, () => message.footer = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.buttons, () => pb_1.Message.addToRepeatedWrapperField(message, 8, TemplateButton.deserialize(reader), TemplateButton));
                    break;
                case 1:
                    reader.readMessage(message.documentMessage, () => message.documentMessage = DocumentMessage.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.highlyStructuredMessage, () => message.highlyStructuredMessage = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.imageMessage, () => message.imageMessage = ImageMessage.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.videoMessage, () => message.videoMessage = VideoMessage.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.locationMessage, () => message.locationMessage = LocationMessage.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FourRowTemplate {
        return FourRowTemplate.deserialize(bytes);
    }
}
export class HydratedFourRowTemplate extends pb_1.Message {
    constructor(data?: any[] | ({
        hydratedContentText?: string;
        hydratedFooterText?: string;
        hydratedButtons: HydratedTemplateButton[];
        templateId?: string;
    } & (({
        documentMessage?: DocumentMessage;
        hydratedTitleText?: never;
        imageMessage?: never;
        videoMessage?: never;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        hydratedTitleText?: string;
        imageMessage?: never;
        videoMessage?: never;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        hydratedTitleText?: never;
        imageMessage?: ImageMessage;
        videoMessage?: never;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        hydratedTitleText?: never;
        imageMessage?: never;
        videoMessage?: VideoMessage;
        locationMessage?: never;
    } | {
        documentMessage?: never;
        hydratedTitleText?: never;
        imageMessage?: never;
        videoMessage?: never;
        locationMessage?: LocationMessage;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], [[1, 2, 3, 4, 5]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hydratedContentText" in data && data.hydratedContentText != undefined) {
                this.hydratedContentText = data.hydratedContentText;
            }
            if ("hydratedFooterText" in data && data.hydratedFooterText != undefined) {
                this.hydratedFooterText = data.hydratedFooterText;
            }
            this.hydratedButtons = data.hydratedButtons;
            if ("templateId" in data && data.templateId != undefined) {
                this.templateId = data.templateId;
            }
            if ("documentMessage" in data && data.documentMessage != undefined) {
                this.documentMessage = data.documentMessage;
            }
            if ("hydratedTitleText" in data && data.hydratedTitleText != undefined) {
                this.hydratedTitleText = data.hydratedTitleText;
            }
            if ("imageMessage" in data && data.imageMessage != undefined) {
                this.imageMessage = data.imageMessage;
            }
            if ("videoMessage" in data && data.videoMessage != undefined) {
                this.videoMessage = data.videoMessage;
            }
            if ("locationMessage" in data && data.locationMessage != undefined) {
                this.locationMessage = data.locationMessage;
            }
        }
    }
    get hydratedContentText() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set hydratedContentText(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get hydratedFooterText() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set hydratedFooterText(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get hydratedButtons() {
        return pb_1.Message.getRepeatedWrapperField(this, HydratedTemplateButton, 8) as HydratedTemplateButton[];
    }
    set hydratedButtons(value: HydratedTemplateButton[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get templateId() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set templateId(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get documentMessage() {
        return pb_1.Message.getWrapperField(this, DocumentMessage, 1) as DocumentMessage;
    }
    set documentMessage(value: DocumentMessage) {
        pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3, 4, 5], value);
    }
    get hydratedTitleText() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set hydratedTitleText(value: string) {
        pb_1.Message.setOneofField(this, 2, [1, 2, 3, 4, 5], value);
    }
    get imageMessage() {
        return pb_1.Message.getWrapperField(this, ImageMessage, 3) as ImageMessage;
    }
    set imageMessage(value: ImageMessage) {
        pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3, 4, 5], value);
    }
    get videoMessage() {
        return pb_1.Message.getWrapperField(this, VideoMessage, 4) as VideoMessage;
    }
    set videoMessage(value: VideoMessage) {
        pb_1.Message.setOneofWrapperField(this, 4, [1, 2, 3, 4, 5], value);
    }
    get locationMessage() {
        return pb_1.Message.getWrapperField(this, LocationMessage, 5) as LocationMessage;
    }
    set locationMessage(value: LocationMessage) {
        pb_1.Message.setOneofWrapperField(this, 5, [1, 2, 3, 4, 5], value);
    }
    get title() {
        const cases: {
            [index: number]: "none" | "documentMessage" | "hydratedTitleText" | "imageMessage" | "videoMessage" | "locationMessage";
        } = {
            0: "none",
            1: "documentMessage",
            2: "hydratedTitleText",
            3: "imageMessage",
            4: "videoMessage",
            5: "locationMessage"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5])];
    }
    static fromObject(data: {
        hydratedContentText?: string;
        hydratedFooterText?: string;
        hydratedButtons: ReturnType<typeof HydratedTemplateButton.prototype.toObject>[];
        templateId?: string;
        documentMessage?: ReturnType<typeof DocumentMessage.prototype.toObject>;
        hydratedTitleText?: string;
        imageMessage?: ReturnType<typeof ImageMessage.prototype.toObject>;
        videoMessage?: ReturnType<typeof VideoMessage.prototype.toObject>;
        locationMessage?: ReturnType<typeof LocationMessage.prototype.toObject>;
    }) {
        const message = new HydratedFourRowTemplate({
            hydratedButtons: data.hydratedButtons.map(item => HydratedTemplateButton.fromObject(item))
        });
        if (data.hydratedContentText != null) {
            message.hydratedContentText = data.hydratedContentText;
        }
        if (data.hydratedFooterText != null) {
            message.hydratedFooterText = data.hydratedFooterText;
        }
        if (data.templateId != null) {
            message.templateId = data.templateId;
        }
        if (data.documentMessage != null) {
            message.documentMessage = DocumentMessage.fromObject(data.documentMessage);
        }
        if (data.hydratedTitleText != null) {
            message.hydratedTitleText = data.hydratedTitleText;
        }
        if (data.imageMessage != null) {
            message.imageMessage = ImageMessage.fromObject(data.imageMessage);
        }
        if (data.videoMessage != null) {
            message.videoMessage = VideoMessage.fromObject(data.videoMessage);
        }
        if (data.locationMessage != null) {
            message.locationMessage = LocationMessage.fromObject(data.locationMessage);
        }
        return message;
    }
    toObject() {
        const data: {
            hydratedContentText?: string;
            hydratedFooterText?: string;
            hydratedButtons: ReturnType<typeof HydratedTemplateButton.prototype.toObject>[];
            templateId?: string;
            documentMessage?: ReturnType<typeof DocumentMessage.prototype.toObject>;
            hydratedTitleText?: string;
            imageMessage?: ReturnType<typeof ImageMessage.prototype.toObject>;
            videoMessage?: ReturnType<typeof VideoMessage.prototype.toObject>;
            locationMessage?: ReturnType<typeof LocationMessage.prototype.toObject>;
        } = {
            hydratedContentText: pb_1.Message.getField(this, 6) != null ? this.hydratedContentText : undefined,
            hydratedFooterText: pb_1.Message.getField(this, 7) != null ? this.hydratedFooterText : undefined,
            hydratedButtons: pb_1.Message.getField(this, 8) != null ? this.hydratedButtons.map((item: HydratedTemplateButton) => item.toObject()) : undefined,
            templateId: pb_1.Message.getField(this, 9) != null ? this.templateId : undefined,
            documentMessage: pb_1.Message.getField(this, 1) != null ? this.documentMessage != null ? this.documentMessage.toObject() : undefined : undefined,
            hydratedTitleText: pb_1.Message.getField(this, 2) != null ? this.hydratedTitleText : undefined,
            imageMessage: pb_1.Message.getField(this, 3) != null ? this.imageMessage != null ? this.imageMessage.toObject() : undefined : undefined,
            videoMessage: pb_1.Message.getField(this, 4) != null ? this.videoMessage != null ? this.videoMessage.toObject() : undefined : undefined,
            locationMessage: pb_1.Message.getField(this, 5) != null ? this.locationMessage != null ? this.locationMessage.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.hydratedContentText === "string" && this.hydratedContentText.length)
            writer.writeString(6, this.hydratedContentText);
        if (typeof this.hydratedFooterText === "string" && this.hydratedFooterText.length)
            writer.writeString(7, this.hydratedFooterText);
        if (this.hydratedButtons.length)
            writer.writeRepeatedMessage(8, this.hydratedButtons, (item: HydratedTemplateButton) => item.serialize(writer));
        if (typeof this.templateId === "string" && this.templateId.length)
            writer.writeString(9, this.templateId);
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.documentMessage, () => this.documentMessage.serialize(writer));
        if (typeof this.hydratedTitleText === "string" && this.hydratedTitleText.length)
            writer.writeString(2, this.hydratedTitleText);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.imageMessage, () => this.imageMessage.serialize(writer));
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeMessage(4, this.videoMessage, () => this.videoMessage.serialize(writer));
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeMessage(5, this.locationMessage, () => this.locationMessage.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HydratedFourRowTemplate {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HydratedFourRowTemplate();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.hydratedContentText = reader.readString();
                    break;
                case 7:
                    message.hydratedFooterText = reader.readString();
                    break;
                case 8:
                    reader.readMessage(message.hydratedButtons, () => pb_1.Message.addToRepeatedWrapperField(message, 8, HydratedTemplateButton.deserialize(reader), HydratedTemplateButton));
                    break;
                case 9:
                    message.templateId = reader.readString();
                    break;
                case 1:
                    reader.readMessage(message.documentMessage, () => message.documentMessage = DocumentMessage.deserialize(reader));
                    break;
                case 2:
                    message.hydratedTitleText = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.imageMessage, () => message.imageMessage = ImageMessage.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.videoMessage, () => message.videoMessage = VideoMessage.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.locationMessage, () => message.locationMessage = LocationMessage.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HydratedFourRowTemplate {
        return HydratedFourRowTemplate.deserialize(bytes);
    }
}
export class TemplateMessage extends pb_1.Message {
    constructor(data?: any[] | ({
        contextInfo?: ContextInfo;
        hydratedTemplate?: HydratedFourRowTemplate;
    } & (({
        fourRowTemplate?: FourRowTemplate;
        hydratedFourRowTemplate?: never;
    } | {
        fourRowTemplate?: never;
        hydratedFourRowTemplate?: HydratedFourRowTemplate;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2]]);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
            if ("hydratedTemplate" in data && data.hydratedTemplate != undefined) {
                this.hydratedTemplate = data.hydratedTemplate;
            }
            if ("fourRowTemplate" in data && data.fourRowTemplate != undefined) {
                this.fourRowTemplate = data.fourRowTemplate;
            }
            if ("hydratedFourRowTemplate" in data && data.hydratedFourRowTemplate != undefined) {
                this.hydratedFourRowTemplate = data.hydratedFourRowTemplate;
            }
        }
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 3) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hydratedTemplate() {
        return pb_1.Message.getWrapperField(this, HydratedFourRowTemplate, 4) as HydratedFourRowTemplate;
    }
    set hydratedTemplate(value: HydratedFourRowTemplate) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get fourRowTemplate() {
        return pb_1.Message.getWrapperField(this, FourRowTemplate, 1) as FourRowTemplate;
    }
    set fourRowTemplate(value: FourRowTemplate) {
        pb_1.Message.setOneofWrapperField(this, 1, [1, 2], value);
    }
    get hydratedFourRowTemplate() {
        return pb_1.Message.getWrapperField(this, HydratedFourRowTemplate, 2) as HydratedFourRowTemplate;
    }
    set hydratedFourRowTemplate(value: HydratedFourRowTemplate) {
        pb_1.Message.setOneofWrapperField(this, 2, [1, 2], value);
    }
    get format() {
        const cases: {
            [index: number]: "none" | "fourRowTemplate" | "hydratedFourRowTemplate";
        } = {
            0: "none",
            1: "fourRowTemplate",
            2: "hydratedFourRowTemplate"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        hydratedTemplate?: ReturnType<typeof HydratedFourRowTemplate.prototype.toObject>;
        fourRowTemplate?: ReturnType<typeof FourRowTemplate.prototype.toObject>;
        hydratedFourRowTemplate?: ReturnType<typeof HydratedFourRowTemplate.prototype.toObject>;
    }) {
        const message = new TemplateMessage({});
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        if (data.hydratedTemplate != null) {
            message.hydratedTemplate = HydratedFourRowTemplate.fromObject(data.hydratedTemplate);
        }
        if (data.fourRowTemplate != null) {
            message.fourRowTemplate = FourRowTemplate.fromObject(data.fourRowTemplate);
        }
        if (data.hydratedFourRowTemplate != null) {
            message.hydratedFourRowTemplate = HydratedFourRowTemplate.fromObject(data.hydratedFourRowTemplate);
        }
        return message;
    }
    toObject() {
        const data: {
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
            hydratedTemplate?: ReturnType<typeof HydratedFourRowTemplate.prototype.toObject>;
            fourRowTemplate?: ReturnType<typeof FourRowTemplate.prototype.toObject>;
            hydratedFourRowTemplate?: ReturnType<typeof HydratedFourRowTemplate.prototype.toObject>;
        } = {
            contextInfo: pb_1.Message.getField(this, 3) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined,
            hydratedTemplate: pb_1.Message.getField(this, 4) != null ? this.hydratedTemplate != null ? this.hydratedTemplate.toObject() : undefined : undefined,
            fourRowTemplate: pb_1.Message.getField(this, 1) != null ? this.fourRowTemplate != null ? this.fourRowTemplate.toObject() : undefined : undefined,
            hydratedFourRowTemplate: pb_1.Message.getField(this, 2) != null ? this.hydratedFourRowTemplate != null ? this.hydratedFourRowTemplate.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeMessage(4, this.hydratedTemplate, () => this.hydratedTemplate.serialize(writer));
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.fourRowTemplate, () => this.fourRowTemplate.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.hydratedFourRowTemplate, () => this.hydratedFourRowTemplate.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TemplateMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TemplateMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.hydratedTemplate, () => message.hydratedTemplate = HydratedFourRowTemplate.deserialize(reader));
                    break;
                case 1:
                    reader.readMessage(message.fourRowTemplate, () => message.fourRowTemplate = FourRowTemplate.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.hydratedFourRowTemplate, () => message.hydratedFourRowTemplate = HydratedFourRowTemplate.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TemplateMessage {
        return TemplateMessage.deserialize(bytes);
    }
}
export class TemplateButtonReplyMessage extends pb_1.Message {
    constructor(data?: any[] | {
        selectedId?: string;
        selectedDisplayText?: string;
        contextInfo?: ContextInfo;
        selectedIndex?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("selectedId" in data && data.selectedId != undefined) {
                this.selectedId = data.selectedId;
            }
            if ("selectedDisplayText" in data && data.selectedDisplayText != undefined) {
                this.selectedDisplayText = data.selectedDisplayText;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
            if ("selectedIndex" in data && data.selectedIndex != undefined) {
                this.selectedIndex = data.selectedIndex;
            }
        }
    }
    get selectedId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set selectedId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get selectedDisplayText() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set selectedDisplayText(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 3) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get selectedIndex() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set selectedIndex(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        selectedId?: string;
        selectedDisplayText?: string;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        selectedIndex?: number;
    }) {
        const message = new TemplateButtonReplyMessage({});
        if (data.selectedId != null) {
            message.selectedId = data.selectedId;
        }
        if (data.selectedDisplayText != null) {
            message.selectedDisplayText = data.selectedDisplayText;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        if (data.selectedIndex != null) {
            message.selectedIndex = data.selectedIndex;
        }
        return message;
    }
    toObject() {
        const data: {
            selectedId?: string;
            selectedDisplayText?: string;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
            selectedIndex?: number;
        } = {
            selectedId: pb_1.Message.getField(this, 1) != null ? this.selectedId : undefined,
            selectedDisplayText: pb_1.Message.getField(this, 2) != null ? this.selectedDisplayText : undefined,
            contextInfo: pb_1.Message.getField(this, 3) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined,
            selectedIndex: pb_1.Message.getField(this, 4) != null ? this.selectedIndex : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.selectedId === "string" && this.selectedId.length)
            writer.writeString(1, this.selectedId);
        if (typeof this.selectedDisplayText === "string" && this.selectedDisplayText.length)
            writer.writeString(2, this.selectedDisplayText);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.selectedIndex);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TemplateButtonReplyMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TemplateButtonReplyMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.selectedId = reader.readString();
                    break;
                case 2:
                    message.selectedDisplayText = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                case 4:
                    message.selectedIndex = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TemplateButtonReplyMessage {
        return TemplateButtonReplyMessage.deserialize(bytes);
    }
}
export class CatalogSnapshot extends pb_1.Message {
    constructor(data?: any[] | {
        catalogImage?: ImageMessage;
        title?: string;
        description?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("catalogImage" in data && data.catalogImage != undefined) {
                this.catalogImage = data.catalogImage;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
        }
    }
    get catalogImage() {
        return pb_1.Message.getWrapperField(this, ImageMessage, 1) as ImageMessage;
    }
    set catalogImage(value: ImageMessage) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        catalogImage?: ReturnType<typeof ImageMessage.prototype.toObject>;
        title?: string;
        description?: string;
    }) {
        const message = new CatalogSnapshot({});
        if (data.catalogImage != null) {
            message.catalogImage = ImageMessage.fromObject(data.catalogImage);
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        return message;
    }
    toObject() {
        const data: {
            catalogImage?: ReturnType<typeof ImageMessage.prototype.toObject>;
            title?: string;
            description?: string;
        } = {
            catalogImage: pb_1.Message.getField(this, 1) != null ? this.catalogImage != null ? this.catalogImage.toObject() : undefined : undefined,
            title: pb_1.Message.getField(this, 2) != null ? this.title : undefined,
            description: pb_1.Message.getField(this, 3) != null ? this.description : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.catalogImage, () => this.catalogImage.serialize(writer));
        if (typeof this.title === "string" && this.title.length)
            writer.writeString(2, this.title);
        if (typeof this.description === "string" && this.description.length)
            writer.writeString(3, this.description);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CatalogSnapshot {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CatalogSnapshot();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.catalogImage, () => message.catalogImage = ImageMessage.deserialize(reader));
                    break;
                case 2:
                    message.title = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CatalogSnapshot {
        return CatalogSnapshot.deserialize(bytes);
    }
}
export class ProductSnapshot extends pb_1.Message {
    constructor(data?: any[] | {
        productImage?: ImageMessage;
        productId?: string;
        title?: string;
        description?: string;
        currencyCode?: string;
        priceAmount1000?: number;
        retailerId?: string;
        url?: string;
        productImageCount?: number;
        firstImageId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("productImage" in data && data.productImage != undefined) {
                this.productImage = data.productImage;
            }
            if ("productId" in data && data.productId != undefined) {
                this.productId = data.productId;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("currencyCode" in data && data.currencyCode != undefined) {
                this.currencyCode = data.currencyCode;
            }
            if ("priceAmount1000" in data && data.priceAmount1000 != undefined) {
                this.priceAmount1000 = data.priceAmount1000;
            }
            if ("retailerId" in data && data.retailerId != undefined) {
                this.retailerId = data.retailerId;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("productImageCount" in data && data.productImageCount != undefined) {
                this.productImageCount = data.productImageCount;
            }
            if ("firstImageId" in data && data.firstImageId != undefined) {
                this.firstImageId = data.firstImageId;
            }
        }
    }
    get productImage() {
        return pb_1.Message.getWrapperField(this, ImageMessage, 1) as ImageMessage;
    }
    set productImage(value: ImageMessage) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get productId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set productId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get currencyCode() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set currencyCode(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get priceAmount1000() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set priceAmount1000(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get retailerId() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set retailerId(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get productImageCount() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set productImageCount(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get firstImageId() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set firstImageId(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        productImage?: ReturnType<typeof ImageMessage.prototype.toObject>;
        productId?: string;
        title?: string;
        description?: string;
        currencyCode?: string;
        priceAmount1000?: number;
        retailerId?: string;
        url?: string;
        productImageCount?: number;
        firstImageId?: string;
    }) {
        const message = new ProductSnapshot({});
        if (data.productImage != null) {
            message.productImage = ImageMessage.fromObject(data.productImage);
        }
        if (data.productId != null) {
            message.productId = data.productId;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.currencyCode != null) {
            message.currencyCode = data.currencyCode;
        }
        if (data.priceAmount1000 != null) {
            message.priceAmount1000 = data.priceAmount1000;
        }
        if (data.retailerId != null) {
            message.retailerId = data.retailerId;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.productImageCount != null) {
            message.productImageCount = data.productImageCount;
        }
        if (data.firstImageId != null) {
            message.firstImageId = data.firstImageId;
        }
        return message;
    }
    toObject() {
        const data: {
            productImage?: ReturnType<typeof ImageMessage.prototype.toObject>;
            productId?: string;
            title?: string;
            description?: string;
            currencyCode?: string;
            priceAmount1000?: number;
            retailerId?: string;
            url?: string;
            productImageCount?: number;
            firstImageId?: string;
        } = {
            productImage: pb_1.Message.getField(this, 1) != null ? this.productImage != null ? this.productImage.toObject() : undefined : undefined,
            productId: pb_1.Message.getField(this, 2) != null ? this.productId : undefined,
            title: pb_1.Message.getField(this, 3) != null ? this.title : undefined,
            description: pb_1.Message.getField(this, 4) != null ? this.description : undefined,
            currencyCode: pb_1.Message.getField(this, 5) != null ? this.currencyCode : undefined,
            priceAmount1000: pb_1.Message.getField(this, 6) != null ? this.priceAmount1000 : undefined,
            retailerId: pb_1.Message.getField(this, 7) != null ? this.retailerId : undefined,
            url: pb_1.Message.getField(this, 8) != null ? this.url : undefined,
            productImageCount: pb_1.Message.getField(this, 9) != null ? this.productImageCount : undefined,
            firstImageId: pb_1.Message.getField(this, 11) != null ? this.firstImageId : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.productImage, () => this.productImage.serialize(writer));
        if (typeof this.productId === "string" && this.productId.length)
            writer.writeString(2, this.productId);
        if (typeof this.title === "string" && this.title.length)
            writer.writeString(3, this.title);
        if (typeof this.description === "string" && this.description.length)
            writer.writeString(4, this.description);
        if (typeof this.currencyCode === "string" && this.currencyCode.length)
            writer.writeString(5, this.currencyCode);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeInt64(6, this.priceAmount1000);
        if (typeof this.retailerId === "string" && this.retailerId.length)
            writer.writeString(7, this.retailerId);
        if (typeof this.url === "string" && this.url.length)
            writer.writeString(8, this.url);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeUint32(9, this.productImageCount);
        if (typeof this.firstImageId === "string" && this.firstImageId.length)
            writer.writeString(11, this.firstImageId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductSnapshot {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductSnapshot();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.productImage, () => message.productImage = ImageMessage.deserialize(reader));
                    break;
                case 2:
                    message.productId = reader.readString();
                    break;
                case 3:
                    message.title = reader.readString();
                    break;
                case 4:
                    message.description = reader.readString();
                    break;
                case 5:
                    message.currencyCode = reader.readString();
                    break;
                case 6:
                    message.priceAmount1000 = reader.readInt64();
                    break;
                case 7:
                    message.retailerId = reader.readString();
                    break;
                case 8:
                    message.url = reader.readString();
                    break;
                case 9:
                    message.productImageCount = reader.readUint32();
                    break;
                case 11:
                    message.firstImageId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductSnapshot {
        return ProductSnapshot.deserialize(bytes);
    }
}
export class ProductMessage extends pb_1.Message {
    constructor(data?: any[] | {
        product?: ProductSnapshot;
        businessOwnerJid?: string;
        catalog?: CatalogSnapshot;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("product" in data && data.product != undefined) {
                this.product = data.product;
            }
            if ("businessOwnerJid" in data && data.businessOwnerJid != undefined) {
                this.businessOwnerJid = data.businessOwnerJid;
            }
            if ("catalog" in data && data.catalog != undefined) {
                this.catalog = data.catalog;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get product() {
        return pb_1.Message.getWrapperField(this, ProductSnapshot, 1) as ProductSnapshot;
    }
    set product(value: ProductSnapshot) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get businessOwnerJid() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set businessOwnerJid(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get catalog() {
        return pb_1.Message.getWrapperField(this, CatalogSnapshot, 4) as CatalogSnapshot;
    }
    set catalog(value: CatalogSnapshot) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 17) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    static fromObject(data: {
        product?: ReturnType<typeof ProductSnapshot.prototype.toObject>;
        businessOwnerJid?: string;
        catalog?: ReturnType<typeof CatalogSnapshot.prototype.toObject>;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new ProductMessage({});
        if (data.product != null) {
            message.product = ProductSnapshot.fromObject(data.product);
        }
        if (data.businessOwnerJid != null) {
            message.businessOwnerJid = data.businessOwnerJid;
        }
        if (data.catalog != null) {
            message.catalog = CatalogSnapshot.fromObject(data.catalog);
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            product?: ReturnType<typeof ProductSnapshot.prototype.toObject>;
            businessOwnerJid?: string;
            catalog?: ReturnType<typeof CatalogSnapshot.prototype.toObject>;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            product: pb_1.Message.getField(this, 1) != null ? this.product != null ? this.product.toObject() : undefined : undefined,
            businessOwnerJid: pb_1.Message.getField(this, 2) != null ? this.businessOwnerJid : undefined,
            catalog: pb_1.Message.getField(this, 4) != null ? this.catalog != null ? this.catalog.toObject() : undefined : undefined,
            contextInfo: pb_1.Message.getField(this, 17) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.product, () => this.product.serialize(writer));
        if (typeof this.businessOwnerJid === "string" && this.businessOwnerJid.length)
            writer.writeString(2, this.businessOwnerJid);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeMessage(4, this.catalog, () => this.catalog.serialize(writer));
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeMessage(17, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.product, () => message.product = ProductSnapshot.deserialize(reader));
                    break;
                case 2:
                    message.businessOwnerJid = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.catalog, () => message.catalog = CatalogSnapshot.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductMessage {
        return ProductMessage.deserialize(bytes);
    }
}
export class GroupInviteMessage extends pb_1.Message {
    constructor(data?: any[] | {
        groupJid?: string;
        inviteCode?: string;
        inviteExpiration?: number;
        groupName?: string;
        jpegThumbnail?: Uint8Array;
        caption?: string;
        contextInfo?: ContextInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("groupJid" in data && data.groupJid != undefined) {
                this.groupJid = data.groupJid;
            }
            if ("inviteCode" in data && data.inviteCode != undefined) {
                this.inviteCode = data.inviteCode;
            }
            if ("inviteExpiration" in data && data.inviteExpiration != undefined) {
                this.inviteExpiration = data.inviteExpiration;
            }
            if ("groupName" in data && data.groupName != undefined) {
                this.groupName = data.groupName;
            }
            if ("jpegThumbnail" in data && data.jpegThumbnail != undefined) {
                this.jpegThumbnail = data.jpegThumbnail;
            }
            if ("caption" in data && data.caption != undefined) {
                this.caption = data.caption;
            }
            if ("contextInfo" in data && data.contextInfo != undefined) {
                this.contextInfo = data.contextInfo;
            }
        }
    }
    get groupJid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set groupJid(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get inviteCode() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set inviteCode(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get inviteExpiration() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set inviteExpiration(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get groupName() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set groupName(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get jpegThumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
    }
    set jpegThumbnail(value: Uint8Array) {
        pb_1.Message.setField(this, 5, value);
    }
    get caption() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set caption(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get contextInfo() {
        return pb_1.Message.getWrapperField(this, ContextInfo, 7) as ContextInfo;
    }
    set contextInfo(value: ContextInfo) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    static fromObject(data: {
        groupJid?: string;
        inviteCode?: string;
        inviteExpiration?: number;
        groupName?: string;
        jpegThumbnail?: Uint8Array;
        caption?: string;
        contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
    }) {
        const message = new GroupInviteMessage({});
        if (data.groupJid != null) {
            message.groupJid = data.groupJid;
        }
        if (data.inviteCode != null) {
            message.inviteCode = data.inviteCode;
        }
        if (data.inviteExpiration != null) {
            message.inviteExpiration = data.inviteExpiration;
        }
        if (data.groupName != null) {
            message.groupName = data.groupName;
        }
        if (data.jpegThumbnail != null) {
            message.jpegThumbnail = data.jpegThumbnail;
        }
        if (data.caption != null) {
            message.caption = data.caption;
        }
        if (data.contextInfo != null) {
            message.contextInfo = ContextInfo.fromObject(data.contextInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            groupJid?: string;
            inviteCode?: string;
            inviteExpiration?: number;
            groupName?: string;
            jpegThumbnail?: Uint8Array;
            caption?: string;
            contextInfo?: ReturnType<typeof ContextInfo.prototype.toObject>;
        } = {
            groupJid: pb_1.Message.getField(this, 1) != null ? this.groupJid : undefined,
            inviteCode: pb_1.Message.getField(this, 2) != null ? this.inviteCode : undefined,
            inviteExpiration: pb_1.Message.getField(this, 3) != null ? this.inviteExpiration : undefined,
            groupName: pb_1.Message.getField(this, 4) != null ? this.groupName : undefined,
            jpegThumbnail: pb_1.Message.getField(this, 5) != null ? this.jpegThumbnail : undefined,
            caption: pb_1.Message.getField(this, 6) != null ? this.caption : undefined,
            contextInfo: pb_1.Message.getField(this, 7) != null ? this.contextInfo != null ? this.contextInfo.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.groupJid === "string" && this.groupJid.length)
            writer.writeString(1, this.groupJid);
        if (typeof this.inviteCode === "string" && this.inviteCode.length)
            writer.writeString(2, this.inviteCode);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeInt64(3, this.inviteExpiration);
        if (typeof this.groupName === "string" && this.groupName.length)
            writer.writeString(4, this.groupName);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeBytes(5, this.jpegThumbnail);
        if (typeof this.caption === "string" && this.caption.length)
            writer.writeString(6, this.caption);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeMessage(7, this.contextInfo, () => this.contextInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupInviteMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupInviteMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.groupJid = reader.readString();
                    break;
                case 2:
                    message.inviteCode = reader.readString();
                    break;
                case 3:
                    message.inviteExpiration = reader.readInt64();
                    break;
                case 4:
                    message.groupName = reader.readString();
                    break;
                case 5:
                    message.jpegThumbnail = reader.readBytes();
                    break;
                case 6:
                    message.caption = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.contextInfo, () => message.contextInfo = ContextInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupInviteMessage {
        return GroupInviteMessage.deserialize(bytes);
    }
}
export class DeviceSentMessage extends pb_1.Message {
    constructor(data?: any[] | {
        destinationJid?: string;
        message?: Message;
        phash?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("destinationJid" in data && data.destinationJid != undefined) {
                this.destinationJid = data.destinationJid;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("phash" in data && data.phash != undefined) {
                this.phash = data.phash;
            }
        }
    }
    get destinationJid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set destinationJid(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getWrapperField(this, Message, 2) as Message;
    }
    set message(value: Message) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get phash() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set phash(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        destinationJid?: string;
        message?: ReturnType<typeof Message.prototype.toObject>;
        phash?: string;
    }) {
        const message = new DeviceSentMessage({});
        if (data.destinationJid != null) {
            message.destinationJid = data.destinationJid;
        }
        if (data.message != null) {
            message.message = Message.fromObject(data.message);
        }
        if (data.phash != null) {
            message.phash = data.phash;
        }
        return message;
    }
    toObject() {
        const data: {
            destinationJid?: string;
            message?: ReturnType<typeof Message.prototype.toObject>;
            phash?: string;
        } = {
            destinationJid: pb_1.Message.getField(this, 1) != null ? this.destinationJid : undefined,
            message: pb_1.Message.getField(this, 2) != null ? this.message != null ? this.message.toObject() : undefined : undefined,
            phash: pb_1.Message.getField(this, 3) != null ? this.phash : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.destinationJid === "string" && this.destinationJid.length)
            writer.writeString(1, this.destinationJid);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.message, () => this.message.serialize(writer));
        if (typeof this.phash === "string" && this.phash.length)
            writer.writeString(3, this.phash);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceSentMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceSentMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.destinationJid = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                    break;
                case 3:
                    message.phash = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeviceSentMessage {
        return DeviceSentMessage.deserialize(bytes);
    }
}
export class Message extends pb_1.Message {
    constructor(data?: any[] | {
        conversation?: string;
        senderKeyDistributionMessage?: SenderKeyDistributionMessage;
        imageMessage?: ImageMessage;
        contactMessage?: ContactMessage;
        locationMessage?: LocationMessage;
        extendedTextMessage?: ExtendedTextMessage;
        documentMessage?: DocumentMessage;
        audioMessage?: AudioMessage;
        videoMessage?: VideoMessage;
        call?: Call;
        chat?: Chat;
        protocolMessage?: ProtocolMessage;
        contactsArrayMessage?: ContactsArrayMessage;
        highlyStructuredMessage?: HighlyStructuredMessage;
        fastRatchetKeySenderKeyDistributionMessage?: SenderKeyDistributionMessage;
        sendPaymentMessage?: SendPaymentMessage;
        liveLocationMessage?: LiveLocationMessage;
        requestPaymentMessage?: RequestPaymentMessage;
        declinePaymentRequestMessage?: DeclinePaymentRequestMessage;
        cancelPaymentRequestMessage?: CancelPaymentRequestMessage;
        templateMessage?: TemplateMessage;
        stickerMessage?: StickerMessage;
        groupInviteMessage?: GroupInviteMessage;
        templateButtonReplyMessage?: TemplateButtonReplyMessage;
        productMessage?: ProductMessage;
        deviceSentMessage?: DeviceSentMessage;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("conversation" in data && data.conversation != undefined) {
                this.conversation = data.conversation;
            }
            if ("senderKeyDistributionMessage" in data && data.senderKeyDistributionMessage != undefined) {
                this.senderKeyDistributionMessage = data.senderKeyDistributionMessage;
            }
            if ("imageMessage" in data && data.imageMessage != undefined) {
                this.imageMessage = data.imageMessage;
            }
            if ("contactMessage" in data && data.contactMessage != undefined) {
                this.contactMessage = data.contactMessage;
            }
            if ("locationMessage" in data && data.locationMessage != undefined) {
                this.locationMessage = data.locationMessage;
            }
            if ("extendedTextMessage" in data && data.extendedTextMessage != undefined) {
                this.extendedTextMessage = data.extendedTextMessage;
            }
            if ("documentMessage" in data && data.documentMessage != undefined) {
                this.documentMessage = data.documentMessage;
            }
            if ("audioMessage" in data && data.audioMessage != undefined) {
                this.audioMessage = data.audioMessage;
            }
            if ("videoMessage" in data && data.videoMessage != undefined) {
                this.videoMessage = data.videoMessage;
            }
            if ("call" in data && data.call != undefined) {
                this.call = data.call;
            }
            if ("chat" in data && data.chat != undefined) {
                this.chat = data.chat;
            }
            if ("protocolMessage" in data && data.protocolMessage != undefined) {
                this.protocolMessage = data.protocolMessage;
            }
            if ("contactsArrayMessage" in data && data.contactsArrayMessage != undefined) {
                this.contactsArrayMessage = data.contactsArrayMessage;
            }
            if ("highlyStructuredMessage" in data && data.highlyStructuredMessage != undefined) {
                this.highlyStructuredMessage = data.highlyStructuredMessage;
            }
            if ("fastRatchetKeySenderKeyDistributionMessage" in data && data.fastRatchetKeySenderKeyDistributionMessage != undefined) {
                this.fastRatchetKeySenderKeyDistributionMessage = data.fastRatchetKeySenderKeyDistributionMessage;
            }
            if ("sendPaymentMessage" in data && data.sendPaymentMessage != undefined) {
                this.sendPaymentMessage = data.sendPaymentMessage;
            }
            if ("liveLocationMessage" in data && data.liveLocationMessage != undefined) {
                this.liveLocationMessage = data.liveLocationMessage;
            }
            if ("requestPaymentMessage" in data && data.requestPaymentMessage != undefined) {
                this.requestPaymentMessage = data.requestPaymentMessage;
            }
            if ("declinePaymentRequestMessage" in data && data.declinePaymentRequestMessage != undefined) {
                this.declinePaymentRequestMessage = data.declinePaymentRequestMessage;
            }
            if ("cancelPaymentRequestMessage" in data && data.cancelPaymentRequestMessage != undefined) {
                this.cancelPaymentRequestMessage = data.cancelPaymentRequestMessage;
            }
            if ("templateMessage" in data && data.templateMessage != undefined) {
                this.templateMessage = data.templateMessage;
            }
            if ("stickerMessage" in data && data.stickerMessage != undefined) {
                this.stickerMessage = data.stickerMessage;
            }
            if ("groupInviteMessage" in data && data.groupInviteMessage != undefined) {
                this.groupInviteMessage = data.groupInviteMessage;
            }
            if ("templateButtonReplyMessage" in data && data.templateButtonReplyMessage != undefined) {
                this.templateButtonReplyMessage = data.templateButtonReplyMessage;
            }
            if ("productMessage" in data && data.productMessage != undefined) {
                this.productMessage = data.productMessage;
            }
            if ("deviceSentMessage" in data && data.deviceSentMessage != undefined) {
                this.deviceSentMessage = data.deviceSentMessage;
            }
        }
    }
    get conversation() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set conversation(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get senderKeyDistributionMessage() {
        return pb_1.Message.getWrapperField(this, SenderKeyDistributionMessage, 2) as SenderKeyDistributionMessage;
    }
    set senderKeyDistributionMessage(value: SenderKeyDistributionMessage) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get imageMessage() {
        return pb_1.Message.getWrapperField(this, ImageMessage, 3) as ImageMessage;
    }
    set imageMessage(value: ImageMessage) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get contactMessage() {
        return pb_1.Message.getWrapperField(this, ContactMessage, 4) as ContactMessage;
    }
    set contactMessage(value: ContactMessage) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get locationMessage() {
        return pb_1.Message.getWrapperField(this, LocationMessage, 5) as LocationMessage;
    }
    set locationMessage(value: LocationMessage) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get extendedTextMessage() {
        return pb_1.Message.getWrapperField(this, ExtendedTextMessage, 6) as ExtendedTextMessage;
    }
    set extendedTextMessage(value: ExtendedTextMessage) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get documentMessage() {
        return pb_1.Message.getWrapperField(this, DocumentMessage, 7) as DocumentMessage;
    }
    set documentMessage(value: DocumentMessage) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get audioMessage() {
        return pb_1.Message.getWrapperField(this, AudioMessage, 8) as AudioMessage;
    }
    set audioMessage(value: AudioMessage) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get videoMessage() {
        return pb_1.Message.getWrapperField(this, VideoMessage, 9) as VideoMessage;
    }
    set videoMessage(value: VideoMessage) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get call() {
        return pb_1.Message.getWrapperField(this, Call, 10) as Call;
    }
    set call(value: Call) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get chat() {
        return pb_1.Message.getWrapperField(this, Chat, 11) as Chat;
    }
    set chat(value: Chat) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get protocolMessage() {
        return pb_1.Message.getWrapperField(this, ProtocolMessage, 12) as ProtocolMessage;
    }
    set protocolMessage(value: ProtocolMessage) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get contactsArrayMessage() {
        return pb_1.Message.getWrapperField(this, ContactsArrayMessage, 13) as ContactsArrayMessage;
    }
    set contactsArrayMessage(value: ContactsArrayMessage) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get highlyStructuredMessage() {
        return pb_1.Message.getWrapperField(this, HighlyStructuredMessage, 14) as HighlyStructuredMessage;
    }
    set highlyStructuredMessage(value: HighlyStructuredMessage) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get fastRatchetKeySenderKeyDistributionMessage() {
        return pb_1.Message.getWrapperField(this, SenderKeyDistributionMessage, 15) as SenderKeyDistributionMessage;
    }
    set fastRatchetKeySenderKeyDistributionMessage(value: SenderKeyDistributionMessage) {
        pb_1.Message.setWrapperField(this, 15, value);
    }
    get sendPaymentMessage() {
        return pb_1.Message.getWrapperField(this, SendPaymentMessage, 16) as SendPaymentMessage;
    }
    set sendPaymentMessage(value: SendPaymentMessage) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get liveLocationMessage() {
        return pb_1.Message.getWrapperField(this, LiveLocationMessage, 18) as LiveLocationMessage;
    }
    set liveLocationMessage(value: LiveLocationMessage) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get requestPaymentMessage() {
        return pb_1.Message.getWrapperField(this, RequestPaymentMessage, 22) as RequestPaymentMessage;
    }
    set requestPaymentMessage(value: RequestPaymentMessage) {
        pb_1.Message.setWrapperField(this, 22, value);
    }
    get declinePaymentRequestMessage() {
        return pb_1.Message.getWrapperField(this, DeclinePaymentRequestMessage, 23) as DeclinePaymentRequestMessage;
    }
    set declinePaymentRequestMessage(value: DeclinePaymentRequestMessage) {
        pb_1.Message.setWrapperField(this, 23, value);
    }
    get cancelPaymentRequestMessage() {
        return pb_1.Message.getWrapperField(this, CancelPaymentRequestMessage, 24) as CancelPaymentRequestMessage;
    }
    set cancelPaymentRequestMessage(value: CancelPaymentRequestMessage) {
        pb_1.Message.setWrapperField(this, 24, value);
    }
    get templateMessage() {
        return pb_1.Message.getWrapperField(this, TemplateMessage, 25) as TemplateMessage;
    }
    set templateMessage(value: TemplateMessage) {
        pb_1.Message.setWrapperField(this, 25, value);
    }
    get stickerMessage() {
        return pb_1.Message.getWrapperField(this, StickerMessage, 26) as StickerMessage;
    }
    set stickerMessage(value: StickerMessage) {
        pb_1.Message.setWrapperField(this, 26, value);
    }
    get groupInviteMessage() {
        return pb_1.Message.getWrapperField(this, GroupInviteMessage, 28) as GroupInviteMessage;
    }
    set groupInviteMessage(value: GroupInviteMessage) {
        pb_1.Message.setWrapperField(this, 28, value);
    }
    get templateButtonReplyMessage() {
        return pb_1.Message.getWrapperField(this, TemplateButtonReplyMessage, 29) as TemplateButtonReplyMessage;
    }
    set templateButtonReplyMessage(value: TemplateButtonReplyMessage) {
        pb_1.Message.setWrapperField(this, 29, value);
    }
    get productMessage() {
        return pb_1.Message.getWrapperField(this, ProductMessage, 30) as ProductMessage;
    }
    set productMessage(value: ProductMessage) {
        pb_1.Message.setWrapperField(this, 30, value);
    }
    get deviceSentMessage() {
        return pb_1.Message.getWrapperField(this, DeviceSentMessage, 31) as DeviceSentMessage;
    }
    set deviceSentMessage(value: DeviceSentMessage) {
        pb_1.Message.setWrapperField(this, 31, value);
    }
    static fromObject(data: {
        conversation?: string;
        senderKeyDistributionMessage?: ReturnType<typeof SenderKeyDistributionMessage.prototype.toObject>;
        imageMessage?: ReturnType<typeof ImageMessage.prototype.toObject>;
        contactMessage?: ReturnType<typeof ContactMessage.prototype.toObject>;
        locationMessage?: ReturnType<typeof LocationMessage.prototype.toObject>;
        extendedTextMessage?: ReturnType<typeof ExtendedTextMessage.prototype.toObject>;
        documentMessage?: ReturnType<typeof DocumentMessage.prototype.toObject>;
        audioMessage?: ReturnType<typeof AudioMessage.prototype.toObject>;
        videoMessage?: ReturnType<typeof VideoMessage.prototype.toObject>;
        call?: ReturnType<typeof Call.prototype.toObject>;
        chat?: ReturnType<typeof Chat.prototype.toObject>;
        protocolMessage?: ReturnType<typeof ProtocolMessage.prototype.toObject>;
        contactsArrayMessage?: ReturnType<typeof ContactsArrayMessage.prototype.toObject>;
        highlyStructuredMessage?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
        fastRatchetKeySenderKeyDistributionMessage?: ReturnType<typeof SenderKeyDistributionMessage.prototype.toObject>;
        sendPaymentMessage?: ReturnType<typeof SendPaymentMessage.prototype.toObject>;
        liveLocationMessage?: ReturnType<typeof LiveLocationMessage.prototype.toObject>;
        requestPaymentMessage?: ReturnType<typeof RequestPaymentMessage.prototype.toObject>;
        declinePaymentRequestMessage?: ReturnType<typeof DeclinePaymentRequestMessage.prototype.toObject>;
        cancelPaymentRequestMessage?: ReturnType<typeof CancelPaymentRequestMessage.prototype.toObject>;
        templateMessage?: ReturnType<typeof TemplateMessage.prototype.toObject>;
        stickerMessage?: ReturnType<typeof StickerMessage.prototype.toObject>;
        groupInviteMessage?: ReturnType<typeof GroupInviteMessage.prototype.toObject>;
        templateButtonReplyMessage?: ReturnType<typeof TemplateButtonReplyMessage.prototype.toObject>;
        productMessage?: ReturnType<typeof ProductMessage.prototype.toObject>;
        deviceSentMessage?: ReturnType<typeof DeviceSentMessage.prototype.toObject>;
    }) {
        const message = new Message({});
        if (data.conversation != null) {
            message.conversation = data.conversation;
        }
        if (data.senderKeyDistributionMessage != null) {
            message.senderKeyDistributionMessage = SenderKeyDistributionMessage.fromObject(data.senderKeyDistributionMessage);
        }
        if (data.imageMessage != null) {
            message.imageMessage = ImageMessage.fromObject(data.imageMessage);
        }
        if (data.contactMessage != null) {
            message.contactMessage = ContactMessage.fromObject(data.contactMessage);
        }
        if (data.locationMessage != null) {
            message.locationMessage = LocationMessage.fromObject(data.locationMessage);
        }
        if (data.extendedTextMessage != null) {
            message.extendedTextMessage = ExtendedTextMessage.fromObject(data.extendedTextMessage);
        }
        if (data.documentMessage != null) {
            message.documentMessage = DocumentMessage.fromObject(data.documentMessage);
        }
        if (data.audioMessage != null) {
            message.audioMessage = AudioMessage.fromObject(data.audioMessage);
        }
        if (data.videoMessage != null) {
            message.videoMessage = VideoMessage.fromObject(data.videoMessage);
        }
        if (data.call != null) {
            message.call = Call.fromObject(data.call);
        }
        if (data.chat != null) {
            message.chat = Chat.fromObject(data.chat);
        }
        if (data.protocolMessage != null) {
            message.protocolMessage = ProtocolMessage.fromObject(data.protocolMessage);
        }
        if (data.contactsArrayMessage != null) {
            message.contactsArrayMessage = ContactsArrayMessage.fromObject(data.contactsArrayMessage);
        }
        if (data.highlyStructuredMessage != null) {
            message.highlyStructuredMessage = HighlyStructuredMessage.fromObject(data.highlyStructuredMessage);
        }
        if (data.fastRatchetKeySenderKeyDistributionMessage != null) {
            message.fastRatchetKeySenderKeyDistributionMessage = SenderKeyDistributionMessage.fromObject(data.fastRatchetKeySenderKeyDistributionMessage);
        }
        if (data.sendPaymentMessage != null) {
            message.sendPaymentMessage = SendPaymentMessage.fromObject(data.sendPaymentMessage);
        }
        if (data.liveLocationMessage != null) {
            message.liveLocationMessage = LiveLocationMessage.fromObject(data.liveLocationMessage);
        }
        if (data.requestPaymentMessage != null) {
            message.requestPaymentMessage = RequestPaymentMessage.fromObject(data.requestPaymentMessage);
        }
        if (data.declinePaymentRequestMessage != null) {
            message.declinePaymentRequestMessage = DeclinePaymentRequestMessage.fromObject(data.declinePaymentRequestMessage);
        }
        if (data.cancelPaymentRequestMessage != null) {
            message.cancelPaymentRequestMessage = CancelPaymentRequestMessage.fromObject(data.cancelPaymentRequestMessage);
        }
        if (data.templateMessage != null) {
            message.templateMessage = TemplateMessage.fromObject(data.templateMessage);
        }
        if (data.stickerMessage != null) {
            message.stickerMessage = StickerMessage.fromObject(data.stickerMessage);
        }
        if (data.groupInviteMessage != null) {
            message.groupInviteMessage = GroupInviteMessage.fromObject(data.groupInviteMessage);
        }
        if (data.templateButtonReplyMessage != null) {
            message.templateButtonReplyMessage = TemplateButtonReplyMessage.fromObject(data.templateButtonReplyMessage);
        }
        if (data.productMessage != null) {
            message.productMessage = ProductMessage.fromObject(data.productMessage);
        }
        if (data.deviceSentMessage != null) {
            message.deviceSentMessage = DeviceSentMessage.fromObject(data.deviceSentMessage);
        }
        return message;
    }
    toObject() {
        const data: {
            conversation?: string;
            senderKeyDistributionMessage?: ReturnType<typeof SenderKeyDistributionMessage.prototype.toObject>;
            imageMessage?: ReturnType<typeof ImageMessage.prototype.toObject>;
            contactMessage?: ReturnType<typeof ContactMessage.prototype.toObject>;
            locationMessage?: ReturnType<typeof LocationMessage.prototype.toObject>;
            extendedTextMessage?: ReturnType<typeof ExtendedTextMessage.prototype.toObject>;
            documentMessage?: ReturnType<typeof DocumentMessage.prototype.toObject>;
            audioMessage?: ReturnType<typeof AudioMessage.prototype.toObject>;
            videoMessage?: ReturnType<typeof VideoMessage.prototype.toObject>;
            call?: ReturnType<typeof Call.prototype.toObject>;
            chat?: ReturnType<typeof Chat.prototype.toObject>;
            protocolMessage?: ReturnType<typeof ProtocolMessage.prototype.toObject>;
            contactsArrayMessage?: ReturnType<typeof ContactsArrayMessage.prototype.toObject>;
            highlyStructuredMessage?: ReturnType<typeof HighlyStructuredMessage.prototype.toObject>;
            fastRatchetKeySenderKeyDistributionMessage?: ReturnType<typeof SenderKeyDistributionMessage.prototype.toObject>;
            sendPaymentMessage?: ReturnType<typeof SendPaymentMessage.prototype.toObject>;
            liveLocationMessage?: ReturnType<typeof LiveLocationMessage.prototype.toObject>;
            requestPaymentMessage?: ReturnType<typeof RequestPaymentMessage.prototype.toObject>;
            declinePaymentRequestMessage?: ReturnType<typeof DeclinePaymentRequestMessage.prototype.toObject>;
            cancelPaymentRequestMessage?: ReturnType<typeof CancelPaymentRequestMessage.prototype.toObject>;
            templateMessage?: ReturnType<typeof TemplateMessage.prototype.toObject>;
            stickerMessage?: ReturnType<typeof StickerMessage.prototype.toObject>;
            groupInviteMessage?: ReturnType<typeof GroupInviteMessage.prototype.toObject>;
            templateButtonReplyMessage?: ReturnType<typeof TemplateButtonReplyMessage.prototype.toObject>;
            productMessage?: ReturnType<typeof ProductMessage.prototype.toObject>;
            deviceSentMessage?: ReturnType<typeof DeviceSentMessage.prototype.toObject>;
        } = {
            conversation: pb_1.Message.getField(this, 1) != null ? this.conversation : undefined,
            senderKeyDistributionMessage: pb_1.Message.getField(this, 2) != null ? this.senderKeyDistributionMessage != null ? this.senderKeyDistributionMessage.toObject() : undefined : undefined,
            imageMessage: pb_1.Message.getField(this, 3) != null ? this.imageMessage != null ? this.imageMessage.toObject() : undefined : undefined,
            contactMessage: pb_1.Message.getField(this, 4) != null ? this.contactMessage != null ? this.contactMessage.toObject() : undefined : undefined,
            locationMessage: pb_1.Message.getField(this, 5) != null ? this.locationMessage != null ? this.locationMessage.toObject() : undefined : undefined,
            extendedTextMessage: pb_1.Message.getField(this, 6) != null ? this.extendedTextMessage != null ? this.extendedTextMessage.toObject() : undefined : undefined,
            documentMessage: pb_1.Message.getField(this, 7) != null ? this.documentMessage != null ? this.documentMessage.toObject() : undefined : undefined,
            audioMessage: pb_1.Message.getField(this, 8) != null ? this.audioMessage != null ? this.audioMessage.toObject() : undefined : undefined,
            videoMessage: pb_1.Message.getField(this, 9) != null ? this.videoMessage != null ? this.videoMessage.toObject() : undefined : undefined,
            call: pb_1.Message.getField(this, 10) != null ? this.call != null ? this.call.toObject() : undefined : undefined,
            chat: pb_1.Message.getField(this, 11) != null ? this.chat != null ? this.chat.toObject() : undefined : undefined,
            protocolMessage: pb_1.Message.getField(this, 12) != null ? this.protocolMessage != null ? this.protocolMessage.toObject() : undefined : undefined,
            contactsArrayMessage: pb_1.Message.getField(this, 13) != null ? this.contactsArrayMessage != null ? this.contactsArrayMessage.toObject() : undefined : undefined,
            highlyStructuredMessage: pb_1.Message.getField(this, 14) != null ? this.highlyStructuredMessage != null ? this.highlyStructuredMessage.toObject() : undefined : undefined,
            fastRatchetKeySenderKeyDistributionMessage: pb_1.Message.getField(this, 15) != null ? this.fastRatchetKeySenderKeyDistributionMessage != null ? this.fastRatchetKeySenderKeyDistributionMessage.toObject() : undefined : undefined,
            sendPaymentMessage: pb_1.Message.getField(this, 16) != null ? this.sendPaymentMessage != null ? this.sendPaymentMessage.toObject() : undefined : undefined,
            liveLocationMessage: pb_1.Message.getField(this, 18) != null ? this.liveLocationMessage != null ? this.liveLocationMessage.toObject() : undefined : undefined,
            requestPaymentMessage: pb_1.Message.getField(this, 22) != null ? this.requestPaymentMessage != null ? this.requestPaymentMessage.toObject() : undefined : undefined,
            declinePaymentRequestMessage: pb_1.Message.getField(this, 23) != null ? this.declinePaymentRequestMessage != null ? this.declinePaymentRequestMessage.toObject() : undefined : undefined,
            cancelPaymentRequestMessage: pb_1.Message.getField(this, 24) != null ? this.cancelPaymentRequestMessage != null ? this.cancelPaymentRequestMessage.toObject() : undefined : undefined,
            templateMessage: pb_1.Message.getField(this, 25) != null ? this.templateMessage != null ? this.templateMessage.toObject() : undefined : undefined,
            stickerMessage: pb_1.Message.getField(this, 26) != null ? this.stickerMessage != null ? this.stickerMessage.toObject() : undefined : undefined,
            groupInviteMessage: pb_1.Message.getField(this, 28) != null ? this.groupInviteMessage != null ? this.groupInviteMessage.toObject() : undefined : undefined,
            templateButtonReplyMessage: pb_1.Message.getField(this, 29) != null ? this.templateButtonReplyMessage != null ? this.templateButtonReplyMessage.toObject() : undefined : undefined,
            productMessage: pb_1.Message.getField(this, 30) != null ? this.productMessage != null ? this.productMessage.toObject() : undefined : undefined,
            deviceSentMessage: pb_1.Message.getField(this, 31) != null ? this.deviceSentMessage != null ? this.deviceSentMessage.toObject() : undefined : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.conversation === "string" && this.conversation.length)
            writer.writeString(1, this.conversation);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.senderKeyDistributionMessage, () => this.senderKeyDistributionMessage.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeMessage(3, this.imageMessage, () => this.imageMessage.serialize(writer));
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeMessage(4, this.contactMessage, () => this.contactMessage.serialize(writer));
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeMessage(5, this.locationMessage, () => this.locationMessage.serialize(writer));
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeMessage(6, this.extendedTextMessage, () => this.extendedTextMessage.serialize(writer));
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeMessage(7, this.documentMessage, () => this.documentMessage.serialize(writer));
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeMessage(8, this.audioMessage, () => this.audioMessage.serialize(writer));
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeMessage(9, this.videoMessage, () => this.videoMessage.serialize(writer));
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeMessage(10, this.call, () => this.call.serialize(writer));
        if (pb_1.Message.getField(this, 11) != null)
            writer.writeMessage(11, this.chat, () => this.chat.serialize(writer));
        if (pb_1.Message.getField(this, 12) != null)
            writer.writeMessage(12, this.protocolMessage, () => this.protocolMessage.serialize(writer));
        if (pb_1.Message.getField(this, 13) != null)
            writer.writeMessage(13, this.contactsArrayMessage, () => this.contactsArrayMessage.serialize(writer));
        if (pb_1.Message.getField(this, 14) != null)
            writer.writeMessage(14, this.highlyStructuredMessage, () => this.highlyStructuredMessage.serialize(writer));
        if (pb_1.Message.getField(this, 15) != null)
            writer.writeMessage(15, this.fastRatchetKeySenderKeyDistributionMessage, () => this.fastRatchetKeySenderKeyDistributionMessage.serialize(writer));
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeMessage(16, this.sendPaymentMessage, () => this.sendPaymentMessage.serialize(writer));
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeMessage(18, this.liveLocationMessage, () => this.liveLocationMessage.serialize(writer));
        if (pb_1.Message.getField(this, 22) != null)
            writer.writeMessage(22, this.requestPaymentMessage, () => this.requestPaymentMessage.serialize(writer));
        if (pb_1.Message.getField(this, 23) != null)
            writer.writeMessage(23, this.declinePaymentRequestMessage, () => this.declinePaymentRequestMessage.serialize(writer));
        if (pb_1.Message.getField(this, 24) != null)
            writer.writeMessage(24, this.cancelPaymentRequestMessage, () => this.cancelPaymentRequestMessage.serialize(writer));
        if (pb_1.Message.getField(this, 25) != null)
            writer.writeMessage(25, this.templateMessage, () => this.templateMessage.serialize(writer));
        if (pb_1.Message.getField(this, 26) != null)
            writer.writeMessage(26, this.stickerMessage, () => this.stickerMessage.serialize(writer));
        if (pb_1.Message.getField(this, 28) != null)
            writer.writeMessage(28, this.groupInviteMessage, () => this.groupInviteMessage.serialize(writer));
        if (pb_1.Message.getField(this, 29) != null)
            writer.writeMessage(29, this.templateButtonReplyMessage, () => this.templateButtonReplyMessage.serialize(writer));
        if (pb_1.Message.getField(this, 30) != null)
            writer.writeMessage(30, this.productMessage, () => this.productMessage.serialize(writer));
        if (pb_1.Message.getField(this, 31) != null)
            writer.writeMessage(31, this.deviceSentMessage, () => this.deviceSentMessage.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.conversation = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.senderKeyDistributionMessage, () => message.senderKeyDistributionMessage = SenderKeyDistributionMessage.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.imageMessage, () => message.imageMessage = ImageMessage.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.contactMessage, () => message.contactMessage = ContactMessage.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.locationMessage, () => message.locationMessage = LocationMessage.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.extendedTextMessage, () => message.extendedTextMessage = ExtendedTextMessage.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.documentMessage, () => message.documentMessage = DocumentMessage.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.audioMessage, () => message.audioMessage = AudioMessage.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.videoMessage, () => message.videoMessage = VideoMessage.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.call, () => message.call = Call.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.chat, () => message.chat = Chat.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.protocolMessage, () => message.protocolMessage = ProtocolMessage.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.contactsArrayMessage, () => message.contactsArrayMessage = ContactsArrayMessage.deserialize(reader));
                    break;
                case 14:
                    reader.readMessage(message.highlyStructuredMessage, () => message.highlyStructuredMessage = HighlyStructuredMessage.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.fastRatchetKeySenderKeyDistributionMessage, () => message.fastRatchetKeySenderKeyDistributionMessage = SenderKeyDistributionMessage.deserialize(reader));
                    break;
                case 16:
                    reader.readMessage(message.sendPaymentMessage, () => message.sendPaymentMessage = SendPaymentMessage.deserialize(reader));
                    break;
                case 18:
                    reader.readMessage(message.liveLocationMessage, () => message.liveLocationMessage = LiveLocationMessage.deserialize(reader));
                    break;
                case 22:
                    reader.readMessage(message.requestPaymentMessage, () => message.requestPaymentMessage = RequestPaymentMessage.deserialize(reader));
                    break;
                case 23:
                    reader.readMessage(message.declinePaymentRequestMessage, () => message.declinePaymentRequestMessage = DeclinePaymentRequestMessage.deserialize(reader));
                    break;
                case 24:
                    reader.readMessage(message.cancelPaymentRequestMessage, () => message.cancelPaymentRequestMessage = CancelPaymentRequestMessage.deserialize(reader));
                    break;
                case 25:
                    reader.readMessage(message.templateMessage, () => message.templateMessage = TemplateMessage.deserialize(reader));
                    break;
                case 26:
                    reader.readMessage(message.stickerMessage, () => message.stickerMessage = StickerMessage.deserialize(reader));
                    break;
                case 28:
                    reader.readMessage(message.groupInviteMessage, () => message.groupInviteMessage = GroupInviteMessage.deserialize(reader));
                    break;
                case 29:
                    reader.readMessage(message.templateButtonReplyMessage, () => message.templateButtonReplyMessage = TemplateButtonReplyMessage.deserialize(reader));
                    break;
                case 30:
                    reader.readMessage(message.productMessage, () => message.productMessage = ProductMessage.deserialize(reader));
                    break;
                case 31:
                    reader.readMessage(message.deviceSentMessage, () => message.deviceSentMessage = DeviceSentMessage.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Message {
        return Message.deserialize(bytes);
    }
}
export class MessageKey extends pb_1.Message {
    constructor(data?: any[] | {
        remoteJid?: string;
        fromMe?: boolean;
        id?: string;
        participant?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("remoteJid" in data && data.remoteJid != undefined) {
                this.remoteJid = data.remoteJid;
            }
            if ("fromMe" in data && data.fromMe != undefined) {
                this.fromMe = data.fromMe;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("participant" in data && data.participant != undefined) {
                this.participant = data.participant;
            }
        }
    }
    get remoteJid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set remoteJid(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get fromMe() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set fromMe(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get participant() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set participant(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        remoteJid?: string;
        fromMe?: boolean;
        id?: string;
        participant?: string;
    }) {
        const message = new MessageKey({});
        if (data.remoteJid != null) {
            message.remoteJid = data.remoteJid;
        }
        if (data.fromMe != null) {
            message.fromMe = data.fromMe;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.participant != null) {
            message.participant = data.participant;
        }
        return message;
    }
    toObject() {
        const data: {
            remoteJid?: string;
            fromMe?: boolean;
            id?: string;
            participant?: string;
        } = {
            remoteJid: pb_1.Message.getField(this, 1) != null ? this.remoteJid : undefined,
            fromMe: pb_1.Message.getField(this, 2) != null ? this.fromMe : undefined,
            id: pb_1.Message.getField(this, 3) != null ? this.id : undefined,
            participant: pb_1.Message.getField(this, 4) != null ? this.participant : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.remoteJid === "string" && this.remoteJid.length)
            writer.writeString(1, this.remoteJid);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeBool(2, this.fromMe);
        if (typeof this.id === "string" && this.id.length)
            writer.writeString(3, this.id);
        if (typeof this.participant === "string" && this.participant.length)
            writer.writeString(4, this.participant);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MessageKey {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MessageKey();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.remoteJid = reader.readString();
                    break;
                case 2:
                    message.fromMe = reader.readBool();
                    break;
                case 3:
                    message.id = reader.readString();
                    break;
                case 4:
                    message.participant = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MessageKey {
        return MessageKey.deserialize(bytes);
    }
}
export class WebFeatures extends pb_1.Message {
    constructor(data?: any[] | {
        labelsDisplay?: WebFeatures.WEB_FEATURES_FLAG;
        voipIndividualOutgoing?: WebFeatures.WEB_FEATURES_FLAG;
        groupsV3?: WebFeatures.WEB_FEATURES_FLAG;
        groupsV3Create?: WebFeatures.WEB_FEATURES_FLAG;
        changeNumberV2?: WebFeatures.WEB_FEATURES_FLAG;
        queryStatusV3Thumbnail?: WebFeatures.WEB_FEATURES_FLAG;
        liveLocations?: WebFeatures.WEB_FEATURES_FLAG;
        queryVname?: WebFeatures.WEB_FEATURES_FLAG;
        voipIndividualIncoming?: WebFeatures.WEB_FEATURES_FLAG;
        quickRepliesQuery?: WebFeatures.WEB_FEATURES_FLAG;
        payments?: WebFeatures.WEB_FEATURES_FLAG;
        stickerPackQuery?: WebFeatures.WEB_FEATURES_FLAG;
        liveLocationsFinal?: WebFeatures.WEB_FEATURES_FLAG;
        labelsEdit?: WebFeatures.WEB_FEATURES_FLAG;
        mediaUpload?: WebFeatures.WEB_FEATURES_FLAG;
        mediaUploadRichQuickReplies?: WebFeatures.WEB_FEATURES_FLAG;
        vnameV2?: WebFeatures.WEB_FEATURES_FLAG;
        videoPlaybackUrl?: WebFeatures.WEB_FEATURES_FLAG;
        statusRanking?: WebFeatures.WEB_FEATURES_FLAG;
        voipIndividualVideo?: WebFeatures.WEB_FEATURES_FLAG;
        thirdPartyStickers?: WebFeatures.WEB_FEATURES_FLAG;
        frequentlyForwardedSetting?: WebFeatures.WEB_FEATURES_FLAG;
        groupsV4JoinPermission?: WebFeatures.WEB_FEATURES_FLAG;
        recentStickers?: WebFeatures.WEB_FEATURES_FLAG;
        catalog?: WebFeatures.WEB_FEATURES_FLAG;
        starredStickers?: WebFeatures.WEB_FEATURES_FLAG;
        voipGroupCall?: WebFeatures.WEB_FEATURES_FLAG;
        templateMessage?: WebFeatures.WEB_FEATURES_FLAG;
        templateMessageInteractivity?: WebFeatures.WEB_FEATURES_FLAG;
        ephemeralMessages?: WebFeatures.WEB_FEATURES_FLAG;
        e2ENotificationSync?: WebFeatures.WEB_FEATURES_FLAG;
        recentStickersV2?: WebFeatures.WEB_FEATURES_FLAG;
        syncdRelease1?: WebFeatures.WEB_FEATURES_FLAG;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("labelsDisplay" in data && data.labelsDisplay != undefined) {
                this.labelsDisplay = data.labelsDisplay;
            }
            if ("voipIndividualOutgoing" in data && data.voipIndividualOutgoing != undefined) {
                this.voipIndividualOutgoing = data.voipIndividualOutgoing;
            }
            if ("groupsV3" in data && data.groupsV3 != undefined) {
                this.groupsV3 = data.groupsV3;
            }
            if ("groupsV3Create" in data && data.groupsV3Create != undefined) {
                this.groupsV3Create = data.groupsV3Create;
            }
            if ("changeNumberV2" in data && data.changeNumberV2 != undefined) {
                this.changeNumberV2 = data.changeNumberV2;
            }
            if ("queryStatusV3Thumbnail" in data && data.queryStatusV3Thumbnail != undefined) {
                this.queryStatusV3Thumbnail = data.queryStatusV3Thumbnail;
            }
            if ("liveLocations" in data && data.liveLocations != undefined) {
                this.liveLocations = data.liveLocations;
            }
            if ("queryVname" in data && data.queryVname != undefined) {
                this.queryVname = data.queryVname;
            }
            if ("voipIndividualIncoming" in data && data.voipIndividualIncoming != undefined) {
                this.voipIndividualIncoming = data.voipIndividualIncoming;
            }
            if ("quickRepliesQuery" in data && data.quickRepliesQuery != undefined) {
                this.quickRepliesQuery = data.quickRepliesQuery;
            }
            if ("payments" in data && data.payments != undefined) {
                this.payments = data.payments;
            }
            if ("stickerPackQuery" in data && data.stickerPackQuery != undefined) {
                this.stickerPackQuery = data.stickerPackQuery;
            }
            if ("liveLocationsFinal" in data && data.liveLocationsFinal != undefined) {
                this.liveLocationsFinal = data.liveLocationsFinal;
            }
            if ("labelsEdit" in data && data.labelsEdit != undefined) {
                this.labelsEdit = data.labelsEdit;
            }
            if ("mediaUpload" in data && data.mediaUpload != undefined) {
                this.mediaUpload = data.mediaUpload;
            }
            if ("mediaUploadRichQuickReplies" in data && data.mediaUploadRichQuickReplies != undefined) {
                this.mediaUploadRichQuickReplies = data.mediaUploadRichQuickReplies;
            }
            if ("vnameV2" in data && data.vnameV2 != undefined) {
                this.vnameV2 = data.vnameV2;
            }
            if ("videoPlaybackUrl" in data && data.videoPlaybackUrl != undefined) {
                this.videoPlaybackUrl = data.videoPlaybackUrl;
            }
            if ("statusRanking" in data && data.statusRanking != undefined) {
                this.statusRanking = data.statusRanking;
            }
            if ("voipIndividualVideo" in data && data.voipIndividualVideo != undefined) {
                this.voipIndividualVideo = data.voipIndividualVideo;
            }
            if ("thirdPartyStickers" in data && data.thirdPartyStickers != undefined) {
                this.thirdPartyStickers = data.thirdPartyStickers;
            }
            if ("frequentlyForwardedSetting" in data && data.frequentlyForwardedSetting != undefined) {
                this.frequentlyForwardedSetting = data.frequentlyForwardedSetting;
            }
            if ("groupsV4JoinPermission" in data && data.groupsV4JoinPermission != undefined) {
                this.groupsV4JoinPermission = data.groupsV4JoinPermission;
            }
            if ("recentStickers" in data && data.recentStickers != undefined) {
                this.recentStickers = data.recentStickers;
            }
            if ("catalog" in data && data.catalog != undefined) {
                this.catalog = data.catalog;
            }
            if ("starredStickers" in data && data.starredStickers != undefined) {
                this.starredStickers = data.starredStickers;
            }
            if ("voipGroupCall" in data && data.voipGroupCall != undefined) {
                this.voipGroupCall = data.voipGroupCall;
            }
            if ("templateMessage" in data && data.templateMessage != undefined) {
                this.templateMessage = data.templateMessage;
            }
            if ("templateMessageInteractivity" in data && data.templateMessageInteractivity != undefined) {
                this.templateMessageInteractivity = data.templateMessageInteractivity;
            }
            if ("ephemeralMessages" in data && data.ephemeralMessages != undefined) {
                this.ephemeralMessages = data.ephemeralMessages;
            }
            if ("e2ENotificationSync" in data && data.e2ENotificationSync != undefined) {
                this.e2ENotificationSync = data.e2ENotificationSync;
            }
            if ("recentStickersV2" in data && data.recentStickersV2 != undefined) {
                this.recentStickersV2 = data.recentStickersV2;
            }
            if ("syncdRelease1" in data && data.syncdRelease1 != undefined) {
                this.syncdRelease1 = data.syncdRelease1;
            }
        }
    }
    get labelsDisplay() {
        return pb_1.Message.getFieldWithDefault(this, 1, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set labelsDisplay(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 1, value);
    }
    get voipIndividualOutgoing() {
        return pb_1.Message.getFieldWithDefault(this, 2, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set voipIndividualOutgoing(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 2, value);
    }
    get groupsV3() {
        return pb_1.Message.getFieldWithDefault(this, 3, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set groupsV3(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 3, value);
    }
    get groupsV3Create() {
        return pb_1.Message.getFieldWithDefault(this, 4, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set groupsV3Create(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 4, value);
    }
    get changeNumberV2() {
        return pb_1.Message.getFieldWithDefault(this, 5, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set changeNumberV2(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 5, value);
    }
    get queryStatusV3Thumbnail() {
        return pb_1.Message.getFieldWithDefault(this, 6, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set queryStatusV3Thumbnail(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 6, value);
    }
    get liveLocations() {
        return pb_1.Message.getFieldWithDefault(this, 7, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set liveLocations(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 7, value);
    }
    get queryVname() {
        return pb_1.Message.getFieldWithDefault(this, 8, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set queryVname(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 8, value);
    }
    get voipIndividualIncoming() {
        return pb_1.Message.getFieldWithDefault(this, 9, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set voipIndividualIncoming(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 9, value);
    }
    get quickRepliesQuery() {
        return pb_1.Message.getFieldWithDefault(this, 10, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set quickRepliesQuery(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 10, value);
    }
    get payments() {
        return pb_1.Message.getFieldWithDefault(this, 11, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set payments(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 11, value);
    }
    get stickerPackQuery() {
        return pb_1.Message.getFieldWithDefault(this, 12, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set stickerPackQuery(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 12, value);
    }
    get liveLocationsFinal() {
        return pb_1.Message.getFieldWithDefault(this, 13, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set liveLocationsFinal(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 13, value);
    }
    get labelsEdit() {
        return pb_1.Message.getFieldWithDefault(this, 14, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set labelsEdit(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 14, value);
    }
    get mediaUpload() {
        return pb_1.Message.getFieldWithDefault(this, 15, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set mediaUpload(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 15, value);
    }
    get mediaUploadRichQuickReplies() {
        return pb_1.Message.getFieldWithDefault(this, 18, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set mediaUploadRichQuickReplies(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 18, value);
    }
    get vnameV2() {
        return pb_1.Message.getFieldWithDefault(this, 19, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set vnameV2(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 19, value);
    }
    get videoPlaybackUrl() {
        return pb_1.Message.getFieldWithDefault(this, 20, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set videoPlaybackUrl(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 20, value);
    }
    get statusRanking() {
        return pb_1.Message.getFieldWithDefault(this, 21, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set statusRanking(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 21, value);
    }
    get voipIndividualVideo() {
        return pb_1.Message.getFieldWithDefault(this, 22, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set voipIndividualVideo(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 22, value);
    }
    get thirdPartyStickers() {
        return pb_1.Message.getFieldWithDefault(this, 23, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set thirdPartyStickers(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 23, value);
    }
    get frequentlyForwardedSetting() {
        return pb_1.Message.getFieldWithDefault(this, 24, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set frequentlyForwardedSetting(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 24, value);
    }
    get groupsV4JoinPermission() {
        return pb_1.Message.getFieldWithDefault(this, 25, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set groupsV4JoinPermission(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 25, value);
    }
    get recentStickers() {
        return pb_1.Message.getFieldWithDefault(this, 26, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set recentStickers(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 26, value);
    }
    get catalog() {
        return pb_1.Message.getFieldWithDefault(this, 27, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set catalog(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 27, value);
    }
    get starredStickers() {
        return pb_1.Message.getFieldWithDefault(this, 28, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set starredStickers(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 28, value);
    }
    get voipGroupCall() {
        return pb_1.Message.getFieldWithDefault(this, 29, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set voipGroupCall(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 29, value);
    }
    get templateMessage() {
        return pb_1.Message.getFieldWithDefault(this, 30, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set templateMessage(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 30, value);
    }
    get templateMessageInteractivity() {
        return pb_1.Message.getFieldWithDefault(this, 31, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set templateMessageInteractivity(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 31, value);
    }
    get ephemeralMessages() {
        return pb_1.Message.getFieldWithDefault(this, 32, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set ephemeralMessages(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 32, value);
    }
    get e2ENotificationSync() {
        return pb_1.Message.getFieldWithDefault(this, 33, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set e2ENotificationSync(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 33, value);
    }
    get recentStickersV2() {
        return pb_1.Message.getFieldWithDefault(this, 34, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set recentStickersV2(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 34, value);
    }
    get syncdRelease1() {
        return pb_1.Message.getFieldWithDefault(this, 35, WebFeatures.WEB_FEATURES_FLAG.NOT_STARTED) as WebFeatures.WEB_FEATURES_FLAG;
    }
    set syncdRelease1(value: WebFeatures.WEB_FEATURES_FLAG) {
        pb_1.Message.setField(this, 35, value);
    }
    static fromObject(data: {
        labelsDisplay?: WebFeatures.WEB_FEATURES_FLAG;
        voipIndividualOutgoing?: WebFeatures.WEB_FEATURES_FLAG;
        groupsV3?: WebFeatures.WEB_FEATURES_FLAG;
        groupsV3Create?: WebFeatures.WEB_FEATURES_FLAG;
        changeNumberV2?: WebFeatures.WEB_FEATURES_FLAG;
        queryStatusV3Thumbnail?: WebFeatures.WEB_FEATURES_FLAG;
        liveLocations?: WebFeatures.WEB_FEATURES_FLAG;
        queryVname?: WebFeatures.WEB_FEATURES_FLAG;
        voipIndividualIncoming?: WebFeatures.WEB_FEATURES_FLAG;
        quickRepliesQuery?: WebFeatures.WEB_FEATURES_FLAG;
        payments?: WebFeatures.WEB_FEATURES_FLAG;
        stickerPackQuery?: WebFeatures.WEB_FEATURES_FLAG;
        liveLocationsFinal?: WebFeatures.WEB_FEATURES_FLAG;
        labelsEdit?: WebFeatures.WEB_FEATURES_FLAG;
        mediaUpload?: WebFeatures.WEB_FEATURES_FLAG;
        mediaUploadRichQuickReplies?: WebFeatures.WEB_FEATURES_FLAG;
        vnameV2?: WebFeatures.WEB_FEATURES_FLAG;
        videoPlaybackUrl?: WebFeatures.WEB_FEATURES_FLAG;
        statusRanking?: WebFeatures.WEB_FEATURES_FLAG;
        voipIndividualVideo?: WebFeatures.WEB_FEATURES_FLAG;
        thirdPartyStickers?: WebFeatures.WEB_FEATURES_FLAG;
        frequentlyForwardedSetting?: WebFeatures.WEB_FEATURES_FLAG;
        groupsV4JoinPermission?: WebFeatures.WEB_FEATURES_FLAG;
        recentStickers?: WebFeatures.WEB_FEATURES_FLAG;
        catalog?: WebFeatures.WEB_FEATURES_FLAG;
        starredStickers?: WebFeatures.WEB_FEATURES_FLAG;
        voipGroupCall?: WebFeatures.WEB_FEATURES_FLAG;
        templateMessage?: WebFeatures.WEB_FEATURES_FLAG;
        templateMessageInteractivity?: WebFeatures.WEB_FEATURES_FLAG;
        ephemeralMessages?: WebFeatures.WEB_FEATURES_FLAG;
        e2ENotificationSync?: WebFeatures.WEB_FEATURES_FLAG;
        recentStickersV2?: WebFeatures.WEB_FEATURES_FLAG;
        syncdRelease1?: WebFeatures.WEB_FEATURES_FLAG;
    }) {
        const message = new WebFeatures({});
        if (data.labelsDisplay != null) {
            message.labelsDisplay = data.labelsDisplay;
        }
        if (data.voipIndividualOutgoing != null) {
            message.voipIndividualOutgoing = data.voipIndividualOutgoing;
        }
        if (data.groupsV3 != null) {
            message.groupsV3 = data.groupsV3;
        }
        if (data.groupsV3Create != null) {
            message.groupsV3Create = data.groupsV3Create;
        }
        if (data.changeNumberV2 != null) {
            message.changeNumberV2 = data.changeNumberV2;
        }
        if (data.queryStatusV3Thumbnail != null) {
            message.queryStatusV3Thumbnail = data.queryStatusV3Thumbnail;
        }
        if (data.liveLocations != null) {
            message.liveLocations = data.liveLocations;
        }
        if (data.queryVname != null) {
            message.queryVname = data.queryVname;
        }
        if (data.voipIndividualIncoming != null) {
            message.voipIndividualIncoming = data.voipIndividualIncoming;
        }
        if (data.quickRepliesQuery != null) {
            message.quickRepliesQuery = data.quickRepliesQuery;
        }
        if (data.payments != null) {
            message.payments = data.payments;
        }
        if (data.stickerPackQuery != null) {
            message.stickerPackQuery = data.stickerPackQuery;
        }
        if (data.liveLocationsFinal != null) {
            message.liveLocationsFinal = data.liveLocationsFinal;
        }
        if (data.labelsEdit != null) {
            message.labelsEdit = data.labelsEdit;
        }
        if (data.mediaUpload != null) {
            message.mediaUpload = data.mediaUpload;
        }
        if (data.mediaUploadRichQuickReplies != null) {
            message.mediaUploadRichQuickReplies = data.mediaUploadRichQuickReplies;
        }
        if (data.vnameV2 != null) {
            message.vnameV2 = data.vnameV2;
        }
        if (data.videoPlaybackUrl != null) {
            message.videoPlaybackUrl = data.videoPlaybackUrl;
        }
        if (data.statusRanking != null) {
            message.statusRanking = data.statusRanking;
        }
        if (data.voipIndividualVideo != null) {
            message.voipIndividualVideo = data.voipIndividualVideo;
        }
        if (data.thirdPartyStickers != null) {
            message.thirdPartyStickers = data.thirdPartyStickers;
        }
        if (data.frequentlyForwardedSetting != null) {
            message.frequentlyForwardedSetting = data.frequentlyForwardedSetting;
        }
        if (data.groupsV4JoinPermission != null) {
            message.groupsV4JoinPermission = data.groupsV4JoinPermission;
        }
        if (data.recentStickers != null) {
            message.recentStickers = data.recentStickers;
        }
        if (data.catalog != null) {
            message.catalog = data.catalog;
        }
        if (data.starredStickers != null) {
            message.starredStickers = data.starredStickers;
        }
        if (data.voipGroupCall != null) {
            message.voipGroupCall = data.voipGroupCall;
        }
        if (data.templateMessage != null) {
            message.templateMessage = data.templateMessage;
        }
        if (data.templateMessageInteractivity != null) {
            message.templateMessageInteractivity = data.templateMessageInteractivity;
        }
        if (data.ephemeralMessages != null) {
            message.ephemeralMessages = data.ephemeralMessages;
        }
        if (data.e2ENotificationSync != null) {
            message.e2ENotificationSync = data.e2ENotificationSync;
        }
        if (data.recentStickersV2 != null) {
            message.recentStickersV2 = data.recentStickersV2;
        }
        if (data.syncdRelease1 != null) {
            message.syncdRelease1 = data.syncdRelease1;
        }
        return message;
    }
    toObject() {
        const data: {
            labelsDisplay?: WebFeatures.WEB_FEATURES_FLAG;
            voipIndividualOutgoing?: WebFeatures.WEB_FEATURES_FLAG;
            groupsV3?: WebFeatures.WEB_FEATURES_FLAG;
            groupsV3Create?: WebFeatures.WEB_FEATURES_FLAG;
            changeNumberV2?: WebFeatures.WEB_FEATURES_FLAG;
            queryStatusV3Thumbnail?: WebFeatures.WEB_FEATURES_FLAG;
            liveLocations?: WebFeatures.WEB_FEATURES_FLAG;
            queryVname?: WebFeatures.WEB_FEATURES_FLAG;
            voipIndividualIncoming?: WebFeatures.WEB_FEATURES_FLAG;
            quickRepliesQuery?: WebFeatures.WEB_FEATURES_FLAG;
            payments?: WebFeatures.WEB_FEATURES_FLAG;
            stickerPackQuery?: WebFeatures.WEB_FEATURES_FLAG;
            liveLocationsFinal?: WebFeatures.WEB_FEATURES_FLAG;
            labelsEdit?: WebFeatures.WEB_FEATURES_FLAG;
            mediaUpload?: WebFeatures.WEB_FEATURES_FLAG;
            mediaUploadRichQuickReplies?: WebFeatures.WEB_FEATURES_FLAG;
            vnameV2?: WebFeatures.WEB_FEATURES_FLAG;
            videoPlaybackUrl?: WebFeatures.WEB_FEATURES_FLAG;
            statusRanking?: WebFeatures.WEB_FEATURES_FLAG;
            voipIndividualVideo?: WebFeatures.WEB_FEATURES_FLAG;
            thirdPartyStickers?: WebFeatures.WEB_FEATURES_FLAG;
            frequentlyForwardedSetting?: WebFeatures.WEB_FEATURES_FLAG;
            groupsV4JoinPermission?: WebFeatures.WEB_FEATURES_FLAG;
            recentStickers?: WebFeatures.WEB_FEATURES_FLAG;
            catalog?: WebFeatures.WEB_FEATURES_FLAG;
            starredStickers?: WebFeatures.WEB_FEATURES_FLAG;
            voipGroupCall?: WebFeatures.WEB_FEATURES_FLAG;
            templateMessage?: WebFeatures.WEB_FEATURES_FLAG;
            templateMessageInteractivity?: WebFeatures.WEB_FEATURES_FLAG;
            ephemeralMessages?: WebFeatures.WEB_FEATURES_FLAG;
            e2ENotificationSync?: WebFeatures.WEB_FEATURES_FLAG;
            recentStickersV2?: WebFeatures.WEB_FEATURES_FLAG;
            syncdRelease1?: WebFeatures.WEB_FEATURES_FLAG;
        } = {
            labelsDisplay: pb_1.Message.getField(this, 1) != null ? this.labelsDisplay : undefined,
            voipIndividualOutgoing: pb_1.Message.getField(this, 2) != null ? this.voipIndividualOutgoing : undefined,
            groupsV3: pb_1.Message.getField(this, 3) != null ? this.groupsV3 : undefined,
            groupsV3Create: pb_1.Message.getField(this, 4) != null ? this.groupsV3Create : undefined,
            changeNumberV2: pb_1.Message.getField(this, 5) != null ? this.changeNumberV2 : undefined,
            queryStatusV3Thumbnail: pb_1.Message.getField(this, 6) != null ? this.queryStatusV3Thumbnail : undefined,
            liveLocations: pb_1.Message.getField(this, 7) != null ? this.liveLocations : undefined,
            queryVname: pb_1.Message.getField(this, 8) != null ? this.queryVname : undefined,
            voipIndividualIncoming: pb_1.Message.getField(this, 9) != null ? this.voipIndividualIncoming : undefined,
            quickRepliesQuery: pb_1.Message.getField(this, 10) != null ? this.quickRepliesQuery : undefined,
            payments: pb_1.Message.getField(this, 11) != null ? this.payments : undefined,
            stickerPackQuery: pb_1.Message.getField(this, 12) != null ? this.stickerPackQuery : undefined,
            liveLocationsFinal: pb_1.Message.getField(this, 13) != null ? this.liveLocationsFinal : undefined,
            labelsEdit: pb_1.Message.getField(this, 14) != null ? this.labelsEdit : undefined,
            mediaUpload: pb_1.Message.getField(this, 15) != null ? this.mediaUpload : undefined,
            mediaUploadRichQuickReplies: pb_1.Message.getField(this, 18) != null ? this.mediaUploadRichQuickReplies : undefined,
            vnameV2: pb_1.Message.getField(this, 19) != null ? this.vnameV2 : undefined,
            videoPlaybackUrl: pb_1.Message.getField(this, 20) != null ? this.videoPlaybackUrl : undefined,
            statusRanking: pb_1.Message.getField(this, 21) != null ? this.statusRanking : undefined,
            voipIndividualVideo: pb_1.Message.getField(this, 22) != null ? this.voipIndividualVideo : undefined,
            thirdPartyStickers: pb_1.Message.getField(this, 23) != null ? this.thirdPartyStickers : undefined,
            frequentlyForwardedSetting: pb_1.Message.getField(this, 24) != null ? this.frequentlyForwardedSetting : undefined,
            groupsV4JoinPermission: pb_1.Message.getField(this, 25) != null ? this.groupsV4JoinPermission : undefined,
            recentStickers: pb_1.Message.getField(this, 26) != null ? this.recentStickers : undefined,
            catalog: pb_1.Message.getField(this, 27) != null ? this.catalog : undefined,
            starredStickers: pb_1.Message.getField(this, 28) != null ? this.starredStickers : undefined,
            voipGroupCall: pb_1.Message.getField(this, 29) != null ? this.voipGroupCall : undefined,
            templateMessage: pb_1.Message.getField(this, 30) != null ? this.templateMessage : undefined,
            templateMessageInteractivity: pb_1.Message.getField(this, 31) != null ? this.templateMessageInteractivity : undefined,
            ephemeralMessages: pb_1.Message.getField(this, 32) != null ? this.ephemeralMessages : undefined,
            e2ENotificationSync: pb_1.Message.getField(this, 33) != null ? this.e2ENotificationSync : undefined,
            recentStickersV2: pb_1.Message.getField(this, 34) != null ? this.recentStickersV2 : undefined,
            syncdRelease1: pb_1.Message.getField(this, 35) != null ? this.syncdRelease1 : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeEnum(1, this.labelsDisplay);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeEnum(2, this.voipIndividualOutgoing);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeEnum(3, this.groupsV3);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeEnum(4, this.groupsV3Create);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeEnum(5, this.changeNumberV2);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeEnum(6, this.queryStatusV3Thumbnail);
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeEnum(7, this.liveLocations);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeEnum(8, this.queryVname);
        if (pb_1.Message.getField(this, 9) != null)
            writer.writeEnum(9, this.voipIndividualIncoming);
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeEnum(10, this.quickRepliesQuery);
        if (pb_1.Message.getField(this, 11) != null)
            writer.writeEnum(11, this.payments);
        if (pb_1.Message.getField(this, 12) != null)
            writer.writeEnum(12, this.stickerPackQuery);
        if (pb_1.Message.getField(this, 13) != null)
            writer.writeEnum(13, this.liveLocationsFinal);
        if (pb_1.Message.getField(this, 14) != null)
            writer.writeEnum(14, this.labelsEdit);
        if (pb_1.Message.getField(this, 15) != null)
            writer.writeEnum(15, this.mediaUpload);
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeEnum(18, this.mediaUploadRichQuickReplies);
        if (pb_1.Message.getField(this, 19) != null)
            writer.writeEnum(19, this.vnameV2);
        if (pb_1.Message.getField(this, 20) != null)
            writer.writeEnum(20, this.videoPlaybackUrl);
        if (pb_1.Message.getField(this, 21) != null)
            writer.writeEnum(21, this.statusRanking);
        if (pb_1.Message.getField(this, 22) != null)
            writer.writeEnum(22, this.voipIndividualVideo);
        if (pb_1.Message.getField(this, 23) != null)
            writer.writeEnum(23, this.thirdPartyStickers);
        if (pb_1.Message.getField(this, 24) != null)
            writer.writeEnum(24, this.frequentlyForwardedSetting);
        if (pb_1.Message.getField(this, 25) != null)
            writer.writeEnum(25, this.groupsV4JoinPermission);
        if (pb_1.Message.getField(this, 26) != null)
            writer.writeEnum(26, this.recentStickers);
        if (pb_1.Message.getField(this, 27) != null)
            writer.writeEnum(27, this.catalog);
        if (pb_1.Message.getField(this, 28) != null)
            writer.writeEnum(28, this.starredStickers);
        if (pb_1.Message.getField(this, 29) != null)
            writer.writeEnum(29, this.voipGroupCall);
        if (pb_1.Message.getField(this, 30) != null)
            writer.writeEnum(30, this.templateMessage);
        if (pb_1.Message.getField(this, 31) != null)
            writer.writeEnum(31, this.templateMessageInteractivity);
        if (pb_1.Message.getField(this, 32) != null)
            writer.writeEnum(32, this.ephemeralMessages);
        if (pb_1.Message.getField(this, 33) != null)
            writer.writeEnum(33, this.e2ENotificationSync);
        if (pb_1.Message.getField(this, 34) != null)
            writer.writeEnum(34, this.recentStickersV2);
        if (pb_1.Message.getField(this, 35) != null)
            writer.writeEnum(35, this.syncdRelease1);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebFeatures {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebFeatures();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.labelsDisplay = reader.readEnum();
                    break;
                case 2:
                    message.voipIndividualOutgoing = reader.readEnum();
                    break;
                case 3:
                    message.groupsV3 = reader.readEnum();
                    break;
                case 4:
                    message.groupsV3Create = reader.readEnum();
                    break;
                case 5:
                    message.changeNumberV2 = reader.readEnum();
                    break;
                case 6:
                    message.queryStatusV3Thumbnail = reader.readEnum();
                    break;
                case 7:
                    message.liveLocations = reader.readEnum();
                    break;
                case 8:
                    message.queryVname = reader.readEnum();
                    break;
                case 9:
                    message.voipIndividualIncoming = reader.readEnum();
                    break;
                case 10:
                    message.quickRepliesQuery = reader.readEnum();
                    break;
                case 11:
                    message.payments = reader.readEnum();
                    break;
                case 12:
                    message.stickerPackQuery = reader.readEnum();
                    break;
                case 13:
                    message.liveLocationsFinal = reader.readEnum();
                    break;
                case 14:
                    message.labelsEdit = reader.readEnum();
                    break;
                case 15:
                    message.mediaUpload = reader.readEnum();
                    break;
                case 18:
                    message.mediaUploadRichQuickReplies = reader.readEnum();
                    break;
                case 19:
                    message.vnameV2 = reader.readEnum();
                    break;
                case 20:
                    message.videoPlaybackUrl = reader.readEnum();
                    break;
                case 21:
                    message.statusRanking = reader.readEnum();
                    break;
                case 22:
                    message.voipIndividualVideo = reader.readEnum();
                    break;
                case 23:
                    message.thirdPartyStickers = reader.readEnum();
                    break;
                case 24:
                    message.frequentlyForwardedSetting = reader.readEnum();
                    break;
                case 25:
                    message.groupsV4JoinPermission = reader.readEnum();
                    break;
                case 26:
                    message.recentStickers = reader.readEnum();
                    break;
                case 27:
                    message.catalog = reader.readEnum();
                    break;
                case 28:
                    message.starredStickers = reader.readEnum();
                    break;
                case 29:
                    message.voipGroupCall = reader.readEnum();
                    break;
                case 30:
                    message.templateMessage = reader.readEnum();
                    break;
                case 31:
                    message.templateMessageInteractivity = reader.readEnum();
                    break;
                case 32:
                    message.ephemeralMessages = reader.readEnum();
                    break;
                case 33:
                    message.e2ENotificationSync = reader.readEnum();
                    break;
                case 34:
                    message.recentStickersV2 = reader.readEnum();
                    break;
                case 35:
                    message.syncdRelease1 = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WebFeatures {
        return WebFeatures.deserialize(bytes);
    }
}
export namespace WebFeatures {
    export enum WEB_FEATURES_FLAG {
        NOT_STARTED = 0,
        FORCE_UPGRADE = 1,
        DEVELOPMENT = 2,
        PRODUCTION = 3
    }
}
export class TabletNotificationsInfo extends pb_1.Message {
    constructor(data?: any[] | {
        timestamp?: number;
        unreadChats?: number;
        notifyMessageCount?: number;
        notifyMessage: NotificationMessageInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("unreadChats" in data && data.unreadChats != undefined) {
                this.unreadChats = data.unreadChats;
            }
            if ("notifyMessageCount" in data && data.notifyMessageCount != undefined) {
                this.notifyMessageCount = data.notifyMessageCount;
            }
            this.notifyMessage = data.notifyMessage;
        }
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get unreadChats() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set unreadChats(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get notifyMessageCount() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set notifyMessageCount(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get notifyMessage() {
        return pb_1.Message.getRepeatedWrapperField(this, NotificationMessageInfo, 5) as NotificationMessageInfo[];
    }
    set notifyMessage(value: NotificationMessageInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        timestamp?: number;
        unreadChats?: number;
        notifyMessageCount?: number;
        notifyMessage: ReturnType<typeof NotificationMessageInfo.prototype.toObject>[];
    }) {
        const message = new TabletNotificationsInfo({
            notifyMessage: data.notifyMessage.map(item => NotificationMessageInfo.fromObject(item))
        });
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.unreadChats != null) {
            message.unreadChats = data.unreadChats;
        }
        if (data.notifyMessageCount != null) {
            message.notifyMessageCount = data.notifyMessageCount;
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp?: number;
            unreadChats?: number;
            notifyMessageCount?: number;
            notifyMessage: ReturnType<typeof NotificationMessageInfo.prototype.toObject>[];
        } = {
            timestamp: pb_1.Message.getField(this, 2) != null ? this.timestamp : undefined,
            unreadChats: pb_1.Message.getField(this, 3) != null ? this.unreadChats : undefined,
            notifyMessageCount: pb_1.Message.getField(this, 4) != null ? this.notifyMessageCount : undefined,
            notifyMessage: pb_1.Message.getField(this, 5) != null ? this.notifyMessage.map((item: NotificationMessageInfo) => item.toObject()) : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeUint64(2, this.timestamp);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeUint32(3, this.unreadChats);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.notifyMessageCount);
        if (this.notifyMessage.length)
            writer.writeRepeatedMessage(5, this.notifyMessage, (item: NotificationMessageInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TabletNotificationsInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TabletNotificationsInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.timestamp = reader.readUint64();
                    break;
                case 3:
                    message.unreadChats = reader.readUint32();
                    break;
                case 4:
                    message.notifyMessageCount = reader.readUint32();
                    break;
                case 5:
                    reader.readMessage(message.notifyMessage, () => pb_1.Message.addToRepeatedWrapperField(message, 5, NotificationMessageInfo.deserialize(reader), NotificationMessageInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TabletNotificationsInfo {
        return TabletNotificationsInfo.deserialize(bytes);
    }
}
export class NotificationMessageInfo extends pb_1.Message {
    constructor(data?: any[] | {
        key?: MessageKey;
        message?: Message;
        messageTimestamp?: number;
        participant?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("messageTimestamp" in data && data.messageTimestamp != undefined) {
                this.messageTimestamp = data.messageTimestamp;
            }
            if ("participant" in data && data.participant != undefined) {
                this.participant = data.participant;
            }
        }
    }
    get key() {
        return pb_1.Message.getWrapperField(this, MessageKey, 1) as MessageKey;
    }
    set key(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getWrapperField(this, Message, 2) as Message;
    }
    set message(value: Message) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get messageTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set messageTimestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get participant() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set participant(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        key?: ReturnType<typeof MessageKey.prototype.toObject>;
        message?: ReturnType<typeof Message.prototype.toObject>;
        messageTimestamp?: number;
        participant?: string;
    }) {
        const message = new NotificationMessageInfo({});
        if (data.key != null) {
            message.key = MessageKey.fromObject(data.key);
        }
        if (data.message != null) {
            message.message = Message.fromObject(data.message);
        }
        if (data.messageTimestamp != null) {
            message.messageTimestamp = data.messageTimestamp;
        }
        if (data.participant != null) {
            message.participant = data.participant;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: ReturnType<typeof MessageKey.prototype.toObject>;
            message?: ReturnType<typeof Message.prototype.toObject>;
            messageTimestamp?: number;
            participant?: string;
        } = {
            key: pb_1.Message.getField(this, 1) != null ? this.key != null ? this.key.toObject() : undefined : undefined,
            message: pb_1.Message.getField(this, 2) != null ? this.message != null ? this.message.toObject() : undefined : undefined,
            messageTimestamp: pb_1.Message.getField(this, 3) != null ? this.messageTimestamp : undefined,
            participant: pb_1.Message.getField(this, 4) != null ? this.participant : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.key, () => this.key.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.message, () => this.message.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeUint64(3, this.messageTimestamp);
        if (typeof this.participant === "string" && this.participant.length)
            writer.writeString(4, this.participant);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NotificationMessageInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NotificationMessageInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.key, () => message.key = MessageKey.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                    break;
                case 3:
                    message.messageTimestamp = reader.readUint64();
                    break;
                case 4:
                    message.participant = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NotificationMessageInfo {
        return NotificationMessageInfo.deserialize(bytes);
    }
}
export class WebNotificationsInfo extends pb_1.Message {
    constructor(data?: any[] | {
        timestamp?: number;
        unreadChats?: number;
        notifyMessageCount?: number;
        notifyMessages: WebMessageInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("timestamp" in data && data.timestamp != undefined) {
                this.timestamp = data.timestamp;
            }
            if ("unreadChats" in data && data.unreadChats != undefined) {
                this.unreadChats = data.unreadChats;
            }
            if ("notifyMessageCount" in data && data.notifyMessageCount != undefined) {
                this.notifyMessageCount = data.notifyMessageCount;
            }
            this.notifyMessages = data.notifyMessages;
        }
    }
    get timestamp() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set timestamp(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get unreadChats() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set unreadChats(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get notifyMessageCount() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set notifyMessageCount(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get notifyMessages() {
        return pb_1.Message.getRepeatedWrapperField(this, WebMessageInfo, 5) as WebMessageInfo[];
    }
    set notifyMessages(value: WebMessageInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        timestamp?: number;
        unreadChats?: number;
        notifyMessageCount?: number;
        notifyMessages: ReturnType<typeof WebMessageInfo.prototype.toObject>[];
    }) {
        const message = new WebNotificationsInfo({
            notifyMessages: data.notifyMessages.map(item => WebMessageInfo.fromObject(item))
        });
        if (data.timestamp != null) {
            message.timestamp = data.timestamp;
        }
        if (data.unreadChats != null) {
            message.unreadChats = data.unreadChats;
        }
        if (data.notifyMessageCount != null) {
            message.notifyMessageCount = data.notifyMessageCount;
        }
        return message;
    }
    toObject() {
        const data: {
            timestamp?: number;
            unreadChats?: number;
            notifyMessageCount?: number;
            notifyMessages: ReturnType<typeof WebMessageInfo.prototype.toObject>[];
        } = {
            timestamp: pb_1.Message.getField(this, 2) != null ? this.timestamp : undefined,
            unreadChats: pb_1.Message.getField(this, 3) != null ? this.unreadChats : undefined,
            notifyMessageCount: pb_1.Message.getField(this, 4) != null ? this.notifyMessageCount : undefined,
            notifyMessages: pb_1.Message.getField(this, 5) != null ? this.notifyMessages.map((item: WebMessageInfo) => item.toObject()) : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeUint64(2, this.timestamp);
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeUint32(3, this.unreadChats);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeUint32(4, this.notifyMessageCount);
        if (this.notifyMessages.length)
            writer.writeRepeatedMessage(5, this.notifyMessages, (item: WebMessageInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebNotificationsInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebNotificationsInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.timestamp = reader.readUint64();
                    break;
                case 3:
                    message.unreadChats = reader.readUint32();
                    break;
                case 4:
                    message.notifyMessageCount = reader.readUint32();
                    break;
                case 5:
                    reader.readMessage(message.notifyMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 5, WebMessageInfo.deserialize(reader), WebMessageInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WebNotificationsInfo {
        return WebNotificationsInfo.deserialize(bytes);
    }
}
export class PaymentInfo extends pb_1.Message {
    constructor(data?: any[] | {
        currencyDeprecated?: PaymentInfo.PAYMENT_INFO_CURRENCY;
        amount1000?: number;
        receiverJid?: string;
        status?: PaymentInfo.PAYMENT_INFO_STATUS;
        transactionTimestamp?: number;
        requestMessageKey?: MessageKey;
        expiryTimestamp?: number;
        futureproofed?: boolean;
        currency?: string;
        txnStatus?: PaymentInfo.PAYMENT_INFO_TXNSTATUS;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("currencyDeprecated" in data && data.currencyDeprecated != undefined) {
                this.currencyDeprecated = data.currencyDeprecated;
            }
            if ("amount1000" in data && data.amount1000 != undefined) {
                this.amount1000 = data.amount1000;
            }
            if ("receiverJid" in data && data.receiverJid != undefined) {
                this.receiverJid = data.receiverJid;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("transactionTimestamp" in data && data.transactionTimestamp != undefined) {
                this.transactionTimestamp = data.transactionTimestamp;
            }
            if ("requestMessageKey" in data && data.requestMessageKey != undefined) {
                this.requestMessageKey = data.requestMessageKey;
            }
            if ("expiryTimestamp" in data && data.expiryTimestamp != undefined) {
                this.expiryTimestamp = data.expiryTimestamp;
            }
            if ("futureproofed" in data && data.futureproofed != undefined) {
                this.futureproofed = data.futureproofed;
            }
            if ("currency" in data && data.currency != undefined) {
                this.currency = data.currency;
            }
            if ("txnStatus" in data && data.txnStatus != undefined) {
                this.txnStatus = data.txnStatus;
            }
        }
    }
    get currencyDeprecated() {
        return pb_1.Message.getFieldWithDefault(this, 1, PaymentInfo.PAYMENT_INFO_CURRENCY.UNKNOWN_CURRENCY) as PaymentInfo.PAYMENT_INFO_CURRENCY;
    }
    set currencyDeprecated(value: PaymentInfo.PAYMENT_INFO_CURRENCY) {
        pb_1.Message.setField(this, 1, value);
    }
    get amount1000() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set amount1000(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get receiverJid() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set receiverJid(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 4, PaymentInfo.PAYMENT_INFO_STATUS.UNKNOWN_STATUS) as PaymentInfo.PAYMENT_INFO_STATUS;
    }
    set status(value: PaymentInfo.PAYMENT_INFO_STATUS) {
        pb_1.Message.setField(this, 4, value);
    }
    get transactionTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set transactionTimestamp(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get requestMessageKey() {
        return pb_1.Message.getWrapperField(this, MessageKey, 6) as MessageKey;
    }
    set requestMessageKey(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get expiryTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set expiryTimestamp(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get futureproofed() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set futureproofed(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get currency() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set currency(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get txnStatus() {
        return pb_1.Message.getFieldWithDefault(this, 10, PaymentInfo.PAYMENT_INFO_TXNSTATUS.UNKNOWN) as PaymentInfo.PAYMENT_INFO_TXNSTATUS;
    }
    set txnStatus(value: PaymentInfo.PAYMENT_INFO_TXNSTATUS) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        currencyDeprecated?: PaymentInfo.PAYMENT_INFO_CURRENCY;
        amount1000?: number;
        receiverJid?: string;
        status?: PaymentInfo.PAYMENT_INFO_STATUS;
        transactionTimestamp?: number;
        requestMessageKey?: ReturnType<typeof MessageKey.prototype.toObject>;
        expiryTimestamp?: number;
        futureproofed?: boolean;
        currency?: string;
        txnStatus?: PaymentInfo.PAYMENT_INFO_TXNSTATUS;
    }) {
        const message = new PaymentInfo({});
        if (data.currencyDeprecated != null) {
            message.currencyDeprecated = data.currencyDeprecated;
        }
        if (data.amount1000 != null) {
            message.amount1000 = data.amount1000;
        }
        if (data.receiverJid != null) {
            message.receiverJid = data.receiverJid;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.transactionTimestamp != null) {
            message.transactionTimestamp = data.transactionTimestamp;
        }
        if (data.requestMessageKey != null) {
            message.requestMessageKey = MessageKey.fromObject(data.requestMessageKey);
        }
        if (data.expiryTimestamp != null) {
            message.expiryTimestamp = data.expiryTimestamp;
        }
        if (data.futureproofed != null) {
            message.futureproofed = data.futureproofed;
        }
        if (data.currency != null) {
            message.currency = data.currency;
        }
        if (data.txnStatus != null) {
            message.txnStatus = data.txnStatus;
        }
        return message;
    }
    toObject() {
        const data: {
            currencyDeprecated?: PaymentInfo.PAYMENT_INFO_CURRENCY;
            amount1000?: number;
            receiverJid?: string;
            status?: PaymentInfo.PAYMENT_INFO_STATUS;
            transactionTimestamp?: number;
            requestMessageKey?: ReturnType<typeof MessageKey.prototype.toObject>;
            expiryTimestamp?: number;
            futureproofed?: boolean;
            currency?: string;
            txnStatus?: PaymentInfo.PAYMENT_INFO_TXNSTATUS;
        } = {
            currencyDeprecated: pb_1.Message.getField(this, 1) != null ? this.currencyDeprecated : undefined,
            amount1000: pb_1.Message.getField(this, 2) != null ? this.amount1000 : undefined,
            receiverJid: pb_1.Message.getField(this, 3) != null ? this.receiverJid : undefined,
            status: pb_1.Message.getField(this, 4) != null ? this.status : undefined,
            transactionTimestamp: pb_1.Message.getField(this, 5) != null ? this.transactionTimestamp : undefined,
            requestMessageKey: pb_1.Message.getField(this, 6) != null ? this.requestMessageKey != null ? this.requestMessageKey.toObject() : undefined : undefined,
            expiryTimestamp: pb_1.Message.getField(this, 7) != null ? this.expiryTimestamp : undefined,
            futureproofed: pb_1.Message.getField(this, 8) != null ? this.futureproofed : undefined,
            currency: pb_1.Message.getField(this, 9) != null ? this.currency : undefined,
            txnStatus: pb_1.Message.getField(this, 10) != null ? this.txnStatus : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeEnum(1, this.currencyDeprecated);
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeUint64(2, this.amount1000);
        if (typeof this.receiverJid === "string" && this.receiverJid.length)
            writer.writeString(3, this.receiverJid);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeEnum(4, this.status);
        if (pb_1.Message.getField(this, 5) != null)
            writer.writeUint64(5, this.transactionTimestamp);
        if (pb_1.Message.getField(this, 6) != null)
            writer.writeMessage(6, this.requestMessageKey, () => this.requestMessageKey.serialize(writer));
        if (pb_1.Message.getField(this, 7) != null)
            writer.writeUint64(7, this.expiryTimestamp);
        if (pb_1.Message.getField(this, 8) != null)
            writer.writeBool(8, this.futureproofed);
        if (typeof this.currency === "string" && this.currency.length)
            writer.writeString(9, this.currency);
        if (pb_1.Message.getField(this, 10) != null)
            writer.writeEnum(10, this.txnStatus);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PaymentInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PaymentInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.currencyDeprecated = reader.readEnum();
                    break;
                case 2:
                    message.amount1000 = reader.readUint64();
                    break;
                case 3:
                    message.receiverJid = reader.readString();
                    break;
                case 4:
                    message.status = reader.readEnum();
                    break;
                case 5:
                    message.transactionTimestamp = reader.readUint64();
                    break;
                case 6:
                    reader.readMessage(message.requestMessageKey, () => message.requestMessageKey = MessageKey.deserialize(reader));
                    break;
                case 7:
                    message.expiryTimestamp = reader.readUint64();
                    break;
                case 8:
                    message.futureproofed = reader.readBool();
                    break;
                case 9:
                    message.currency = reader.readString();
                    break;
                case 10:
                    message.txnStatus = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PaymentInfo {
        return PaymentInfo.deserialize(bytes);
    }
}
export namespace PaymentInfo {
    export enum PAYMENT_INFO_CURRENCY {
        UNKNOWN_CURRENCY = 0,
        INR = 1
    }
    export enum PAYMENT_INFO_STATUS {
        UNKNOWN_STATUS = 0,
        PROCESSING = 1,
        SENT = 2,
        NEED_TO_ACCEPT = 3,
        COMPLETE = 4,
        COULD_NOT_COMPLETE = 5,
        REFUNDED = 6,
        EXPIRED = 7,
        REJECTED = 8,
        CANCELLED = 9,
        WAITING_FOR_PAYER = 10,
        WAITING = 11
    }
    export enum PAYMENT_INFO_TXNSTATUS {
        UNKNOWN = 0,
        PENDING_SETUP = 1,
        PENDING_RECEIVER_SETUP = 2,
        INIT = 3,
        SUCCESS = 4,
        COMPLETED = 5,
        FAILED = 6,
        FAILED_RISK = 7,
        FAILED_PROCESSING = 8,
        FAILED_RECEIVER_PROCESSING = 9,
        FAILED_DA = 10,
        FAILED_DA_FINAL = 11,
        REFUNDED_TXN = 12,
        REFUND_FAILED = 13,
        REFUND_FAILED_PROCESSING = 14,
        REFUND_FAILED_DA = 15,
        EXPIRED_TXN = 16,
        AUTH_CANCELED = 17,
        AUTH_CANCEL_FAILED_PROCESSING = 18,
        AUTH_CANCEL_FAILED = 19,
        COLLECT_INIT = 20,
        COLLECT_SUCCESS = 21,
        COLLECT_FAILED = 22,
        COLLECT_FAILED_RISK = 23,
        COLLECT_REJECTED = 24,
        COLLECT_EXPIRED = 25,
        COLLECT_CANCELED = 26,
        COLLECT_CANCELLING = 27
    }
}
export class WebMessageInfo extends pb_1.Message {
    constructor(data?: any[] | {
        key: MessageKey;
        message?: Message;
        messageTimestamp?: number;
        status?: WebMessageInfo.WEB_MESSAGE_INFO_STATUS;
        participant?: string;
        ignore?: boolean;
        starred?: boolean;
        broadcast?: boolean;
        pushName?: string;
        mediaCiphertextSha256?: Uint8Array;
        multicast?: boolean;
        urlText?: boolean;
        urlNumber?: boolean;
        messageStubType?: WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE;
        clearMedia?: boolean;
        messageStubParameters: string[];
        duration?: number;
        labels: string[];
        paymentInfo?: PaymentInfo;
        finalLiveLocation?: LiveLocationMessage;
        quotedPaymentInfo?: PaymentInfo;
        ephemeralStartTimestamp?: number;
        ephemeralDuration?: number;
        ephemeralOffToOn?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [26, 28], []);
        if (!Array.isArray(data) && typeof data == "object") {
            this.key = data.key;
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("messageTimestamp" in data && data.messageTimestamp != undefined) {
                this.messageTimestamp = data.messageTimestamp;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("participant" in data && data.participant != undefined) {
                this.participant = data.participant;
            }
            if ("ignore" in data && data.ignore != undefined) {
                this.ignore = data.ignore;
            }
            if ("starred" in data && data.starred != undefined) {
                this.starred = data.starred;
            }
            if ("broadcast" in data && data.broadcast != undefined) {
                this.broadcast = data.broadcast;
            }
            if ("pushName" in data && data.pushName != undefined) {
                this.pushName = data.pushName;
            }
            if ("mediaCiphertextSha256" in data && data.mediaCiphertextSha256 != undefined) {
                this.mediaCiphertextSha256 = data.mediaCiphertextSha256;
            }
            if ("multicast" in data && data.multicast != undefined) {
                this.multicast = data.multicast;
            }
            if ("urlText" in data && data.urlText != undefined) {
                this.urlText = data.urlText;
            }
            if ("urlNumber" in data && data.urlNumber != undefined) {
                this.urlNumber = data.urlNumber;
            }
            if ("messageStubType" in data && data.messageStubType != undefined) {
                this.messageStubType = data.messageStubType;
            }
            if ("clearMedia" in data && data.clearMedia != undefined) {
                this.clearMedia = data.clearMedia;
            }
            this.messageStubParameters = data.messageStubParameters;
            if ("duration" in data && data.duration != undefined) {
                this.duration = data.duration;
            }
            this.labels = data.labels;
            if ("paymentInfo" in data && data.paymentInfo != undefined) {
                this.paymentInfo = data.paymentInfo;
            }
            if ("finalLiveLocation" in data && data.finalLiveLocation != undefined) {
                this.finalLiveLocation = data.finalLiveLocation;
            }
            if ("quotedPaymentInfo" in data && data.quotedPaymentInfo != undefined) {
                this.quotedPaymentInfo = data.quotedPaymentInfo;
            }
            if ("ephemeralStartTimestamp" in data && data.ephemeralStartTimestamp != undefined) {
                this.ephemeralStartTimestamp = data.ephemeralStartTimestamp;
            }
            if ("ephemeralDuration" in data && data.ephemeralDuration != undefined) {
                this.ephemeralDuration = data.ephemeralDuration;
            }
            if ("ephemeralOffToOn" in data && data.ephemeralOffToOn != undefined) {
                this.ephemeralOffToOn = data.ephemeralOffToOn;
            }
        }
    }
    get key() {
        return pb_1.Message.getWrapperField(this, MessageKey, 1) as MessageKey;
    }
    set key(value: MessageKey) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getWrapperField(this, Message, 2) as Message;
    }
    set message(value: Message) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get messageTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set messageTimestamp(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 4, WebMessageInfo.WEB_MESSAGE_INFO_STATUS.ERROR) as WebMessageInfo.WEB_MESSAGE_INFO_STATUS;
    }
    set status(value: WebMessageInfo.WEB_MESSAGE_INFO_STATUS) {
        pb_1.Message.setField(this, 4, value);
    }
    get participant() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set participant(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get ignore() {
        return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
    }
    set ignore(value: boolean) {
        pb_1.Message.setField(this, 16, value);
    }
    get starred() {
        return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
    }
    set starred(value: boolean) {
        pb_1.Message.setField(this, 17, value);
    }
    get broadcast() {
        return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
    }
    set broadcast(value: boolean) {
        pb_1.Message.setField(this, 18, value);
    }
    get pushName() {
        return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
    }
    set pushName(value: string) {
        pb_1.Message.setField(this, 19, value);
    }
    get mediaCiphertextSha256() {
        return pb_1.Message.getFieldWithDefault(this, 20, new Uint8Array()) as Uint8Array;
    }
    set mediaCiphertextSha256(value: Uint8Array) {
        pb_1.Message.setField(this, 20, value);
    }
    get multicast() {
        return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
    }
    set multicast(value: boolean) {
        pb_1.Message.setField(this, 21, value);
    }
    get urlText() {
        return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
    }
    set urlText(value: boolean) {
        pb_1.Message.setField(this, 22, value);
    }
    get urlNumber() {
        return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
    }
    set urlNumber(value: boolean) {
        pb_1.Message.setField(this, 23, value);
    }
    get messageStubType() {
        return pb_1.Message.getFieldWithDefault(this, 24, WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE.UNKNOWN) as WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE;
    }
    set messageStubType(value: WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE) {
        pb_1.Message.setField(this, 24, value);
    }
    get clearMedia() {
        return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
    }
    set clearMedia(value: boolean) {
        pb_1.Message.setField(this, 25, value);
    }
    get messageStubParameters() {
        return pb_1.Message.getFieldWithDefault(this, 26, []) as string[];
    }
    set messageStubParameters(value: string[]) {
        pb_1.Message.setField(this, 26, value);
    }
    get duration() {
        return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
    }
    set duration(value: number) {
        pb_1.Message.setField(this, 27, value);
    }
    get labels() {
        return pb_1.Message.getFieldWithDefault(this, 28, []) as string[];
    }
    set labels(value: string[]) {
        pb_1.Message.setField(this, 28, value);
    }
    get paymentInfo() {
        return pb_1.Message.getWrapperField(this, PaymentInfo, 29) as PaymentInfo;
    }
    set paymentInfo(value: PaymentInfo) {
        pb_1.Message.setWrapperField(this, 29, value);
    }
    get finalLiveLocation() {
        return pb_1.Message.getWrapperField(this, LiveLocationMessage, 30) as LiveLocationMessage;
    }
    set finalLiveLocation(value: LiveLocationMessage) {
        pb_1.Message.setWrapperField(this, 30, value);
    }
    get quotedPaymentInfo() {
        return pb_1.Message.getWrapperField(this, PaymentInfo, 31) as PaymentInfo;
    }
    set quotedPaymentInfo(value: PaymentInfo) {
        pb_1.Message.setWrapperField(this, 31, value);
    }
    get ephemeralStartTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 32, 0) as number;
    }
    set ephemeralStartTimestamp(value: number) {
        pb_1.Message.setField(this, 32, value);
    }
    get ephemeralDuration() {
        return pb_1.Message.getFieldWithDefault(this, 33, 0) as number;
    }
    set ephemeralDuration(value: number) {
        pb_1.Message.setField(this, 33, value);
    }
    get ephemeralOffToOn() {
        return pb_1.Message.getFieldWithDefault(this, 34, false) as boolean;
    }
    set ephemeralOffToOn(value: boolean) {
        pb_1.Message.setField(this, 34, value);
    }
    static fromObject(data: {
        key: ReturnType<typeof MessageKey.prototype.toObject>;
        message?: ReturnType<typeof Message.prototype.toObject>;
        messageTimestamp?: number;
        status?: WebMessageInfo.WEB_MESSAGE_INFO_STATUS;
        participant?: string;
        ignore?: boolean;
        starred?: boolean;
        broadcast?: boolean;
        pushName?: string;
        mediaCiphertextSha256?: Uint8Array;
        multicast?: boolean;
        urlText?: boolean;
        urlNumber?: boolean;
        messageStubType?: WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE;
        clearMedia?: boolean;
        messageStubParameters: string[];
        duration?: number;
        labels: string[];
        paymentInfo?: ReturnType<typeof PaymentInfo.prototype.toObject>;
        finalLiveLocation?: ReturnType<typeof LiveLocationMessage.prototype.toObject>;
        quotedPaymentInfo?: ReturnType<typeof PaymentInfo.prototype.toObject>;
        ephemeralStartTimestamp?: number;
        ephemeralDuration?: number;
        ephemeralOffToOn?: boolean;
    }) {
        const message = new WebMessageInfo({
            key: MessageKey.fromObject(data.key),
            messageStubParameters: data.messageStubParameters,
            labels: data.labels
        });
        if (data.message != null) {
            message.message = Message.fromObject(data.message);
        }
        if (data.messageTimestamp != null) {
            message.messageTimestamp = data.messageTimestamp;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.participant != null) {
            message.participant = data.participant;
        }
        if (data.ignore != null) {
            message.ignore = data.ignore;
        }
        if (data.starred != null) {
            message.starred = data.starred;
        }
        if (data.broadcast != null) {
            message.broadcast = data.broadcast;
        }
        if (data.pushName != null) {
            message.pushName = data.pushName;
        }
        if (data.mediaCiphertextSha256 != null) {
            message.mediaCiphertextSha256 = data.mediaCiphertextSha256;
        }
        if (data.multicast != null) {
            message.multicast = data.multicast;
        }
        if (data.urlText != null) {
            message.urlText = data.urlText;
        }
        if (data.urlNumber != null) {
            message.urlNumber = data.urlNumber;
        }
        if (data.messageStubType != null) {
            message.messageStubType = data.messageStubType;
        }
        if (data.clearMedia != null) {
            message.clearMedia = data.clearMedia;
        }
        if (data.duration != null) {
            message.duration = data.duration;
        }
        if (data.paymentInfo != null) {
            message.paymentInfo = PaymentInfo.fromObject(data.paymentInfo);
        }
        if (data.finalLiveLocation != null) {
            message.finalLiveLocation = LiveLocationMessage.fromObject(data.finalLiveLocation);
        }
        if (data.quotedPaymentInfo != null) {
            message.quotedPaymentInfo = PaymentInfo.fromObject(data.quotedPaymentInfo);
        }
        if (data.ephemeralStartTimestamp != null) {
            message.ephemeralStartTimestamp = data.ephemeralStartTimestamp;
        }
        if (data.ephemeralDuration != null) {
            message.ephemeralDuration = data.ephemeralDuration;
        }
        if (data.ephemeralOffToOn != null) {
            message.ephemeralOffToOn = data.ephemeralOffToOn;
        }
        return message;
    }
    toObject() {
        const data: {
            key: ReturnType<typeof MessageKey.prototype.toObject>;
            message?: ReturnType<typeof Message.prototype.toObject>;
            messageTimestamp?: number;
            status?: WebMessageInfo.WEB_MESSAGE_INFO_STATUS;
            participant?: string;
            ignore?: boolean;
            starred?: boolean;
            broadcast?: boolean;
            pushName?: string;
            mediaCiphertextSha256?: Uint8Array;
            multicast?: boolean;
            urlText?: boolean;
            urlNumber?: boolean;
            messageStubType?: WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE;
            clearMedia?: boolean;
            messageStubParameters: string[];
            duration?: number;
            labels: string[];
            paymentInfo?: ReturnType<typeof PaymentInfo.prototype.toObject>;
            finalLiveLocation?: ReturnType<typeof LiveLocationMessage.prototype.toObject>;
            quotedPaymentInfo?: ReturnType<typeof PaymentInfo.prototype.toObject>;
            ephemeralStartTimestamp?: number;
            ephemeralDuration?: number;
            ephemeralOffToOn?: boolean;
        } = {
            key: pb_1.Message.getField(this, 1) != null ? this.key != null ? this.key.toObject() : undefined : undefined,
            message: pb_1.Message.getField(this, 2) != null ? this.message != null ? this.message.toObject() : undefined : undefined,
            messageTimestamp: pb_1.Message.getField(this, 3) != null ? this.messageTimestamp : undefined,
            status: pb_1.Message.getField(this, 4) != null ? this.status : undefined,
            participant: pb_1.Message.getField(this, 5) != null ? this.participant : undefined,
            ignore: pb_1.Message.getField(this, 16) != null ? this.ignore : undefined,
            starred: pb_1.Message.getField(this, 17) != null ? this.starred : undefined,
            broadcast: pb_1.Message.getField(this, 18) != null ? this.broadcast : undefined,
            pushName: pb_1.Message.getField(this, 19) != null ? this.pushName : undefined,
            mediaCiphertextSha256: pb_1.Message.getField(this, 20) != null ? this.mediaCiphertextSha256 : undefined,
            multicast: pb_1.Message.getField(this, 21) != null ? this.multicast : undefined,
            urlText: pb_1.Message.getField(this, 22) != null ? this.urlText : undefined,
            urlNumber: pb_1.Message.getField(this, 23) != null ? this.urlNumber : undefined,
            messageStubType: pb_1.Message.getField(this, 24) != null ? this.messageStubType : undefined,
            clearMedia: pb_1.Message.getField(this, 25) != null ? this.clearMedia : undefined,
            messageStubParameters: pb_1.Message.getField(this, 26) != null ? this.messageStubParameters : undefined,
            duration: pb_1.Message.getField(this, 27) != null ? this.duration : undefined,
            labels: pb_1.Message.getField(this, 28) != null ? this.labels : undefined,
            paymentInfo: pb_1.Message.getField(this, 29) != null ? this.paymentInfo != null ? this.paymentInfo.toObject() : undefined : undefined,
            finalLiveLocation: pb_1.Message.getField(this, 30) != null ? this.finalLiveLocation != null ? this.finalLiveLocation.toObject() : undefined : undefined,
            quotedPaymentInfo: pb_1.Message.getField(this, 31) != null ? this.quotedPaymentInfo != null ? this.quotedPaymentInfo.toObject() : undefined : undefined,
            ephemeralStartTimestamp: pb_1.Message.getField(this, 32) != null ? this.ephemeralStartTimestamp : undefined,
            ephemeralDuration: pb_1.Message.getField(this, 33) != null ? this.ephemeralDuration : undefined,
            ephemeralOffToOn: pb_1.Message.getField(this, 34) != null ? this.ephemeralOffToOn : undefined
        };
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (pb_1.Message.getField(this, 1) != null)
            writer.writeMessage(1, this.key, () => this.key.serialize(writer));
        if (pb_1.Message.getField(this, 2) != null)
            writer.writeMessage(2, this.message, () => this.message.serialize(writer));
        if (pb_1.Message.getField(this, 3) != null)
            writer.writeUint64(3, this.messageTimestamp);
        if (pb_1.Message.getField(this, 4) != null)
            writer.writeEnum(4, this.status);
        if (typeof this.participant === "string" && this.participant.length)
            writer.writeString(5, this.participant);
        if (pb_1.Message.getField(this, 16) != null)
            writer.writeBool(16, this.ignore);
        if (pb_1.Message.getField(this, 17) != null)
            writer.writeBool(17, this.starred);
        if (pb_1.Message.getField(this, 18) != null)
            writer.writeBool(18, this.broadcast);
        if (typeof this.pushName === "string" && this.pushName.length)
            writer.writeString(19, this.pushName);
        if (pb_1.Message.getField(this, 20) != null)
            writer.writeBytes(20, this.mediaCiphertextSha256);
        if (pb_1.Message.getField(this, 21) != null)
            writer.writeBool(21, this.multicast);
        if (pb_1.Message.getField(this, 22) != null)
            writer.writeBool(22, this.urlText);
        if (pb_1.Message.getField(this, 23) != null)
            writer.writeBool(23, this.urlNumber);
        if (pb_1.Message.getField(this, 24) != null)
            writer.writeEnum(24, this.messageStubType);
        if (pb_1.Message.getField(this, 25) != null)
            writer.writeBool(25, this.clearMedia);
        if (this.messageStubParameters.length)
            writer.writeRepeatedString(26, this.messageStubParameters);
        if (pb_1.Message.getField(this, 27) != null)
            writer.writeUint32(27, this.duration);
        if (this.labels.length)
            writer.writeRepeatedString(28, this.labels);
        if (pb_1.Message.getField(this, 29) != null)
            writer.writeMessage(29, this.paymentInfo, () => this.paymentInfo.serialize(writer));
        if (pb_1.Message.getField(this, 30) != null)
            writer.writeMessage(30, this.finalLiveLocation, () => this.finalLiveLocation.serialize(writer));
        if (pb_1.Message.getField(this, 31) != null)
            writer.writeMessage(31, this.quotedPaymentInfo, () => this.quotedPaymentInfo.serialize(writer));
        if (pb_1.Message.getField(this, 32) != null)
            writer.writeUint64(32, this.ephemeralStartTimestamp);
        if (pb_1.Message.getField(this, 33) != null)
            writer.writeUint32(33, this.ephemeralDuration);
        if (pb_1.Message.getField(this, 34) != null)
            writer.writeBool(34, this.ephemeralOffToOn);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebMessageInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebMessageInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.key, () => message.key = MessageKey.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                    break;
                case 3:
                    message.messageTimestamp = reader.readUint64();
                    break;
                case 4:
                    message.status = reader.readEnum();
                    break;
                case 5:
                    message.participant = reader.readString();
                    break;
                case 16:
                    message.ignore = reader.readBool();
                    break;
                case 17:
                    message.starred = reader.readBool();
                    break;
                case 18:
                    message.broadcast = reader.readBool();
                    break;
                case 19:
                    message.pushName = reader.readString();
                    break;
                case 20:
                    message.mediaCiphertextSha256 = reader.readBytes();
                    break;
                case 21:
                    message.multicast = reader.readBool();
                    break;
                case 22:
                    message.urlText = reader.readBool();
                    break;
                case 23:
                    message.urlNumber = reader.readBool();
                    break;
                case 24:
                    message.messageStubType = reader.readEnum();
                    break;
                case 25:
                    message.clearMedia = reader.readBool();
                    break;
                case 26:
                    pb_1.Message.addToRepeatedField(message, 26, reader.readString());
                    break;
                case 27:
                    message.duration = reader.readUint32();
                    break;
                case 28:
                    pb_1.Message.addToRepeatedField(message, 28, reader.readString());
                    break;
                case 29:
                    reader.readMessage(message.paymentInfo, () => message.paymentInfo = PaymentInfo.deserialize(reader));
                    break;
                case 30:
                    reader.readMessage(message.finalLiveLocation, () => message.finalLiveLocation = LiveLocationMessage.deserialize(reader));
                    break;
                case 31:
                    reader.readMessage(message.quotedPaymentInfo, () => message.quotedPaymentInfo = PaymentInfo.deserialize(reader));
                    break;
                case 32:
                    message.ephemeralStartTimestamp = reader.readUint64();
                    break;
                case 33:
                    message.ephemeralDuration = reader.readUint32();
                    break;
                case 34:
                    message.ephemeralOffToOn = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WebMessageInfo {
        return WebMessageInfo.deserialize(bytes);
    }
}
export namespace WebMessageInfo {
    export enum WEB_MESSAGE_INFO_STATUS {
        ERROR = 0,
        PENDING = 1,
        SERVER_ACK = 2,
        DELIVERY_ACK = 3,
        READ = 4,
        PLAYED = 5
    }
    export enum WEB_MESSAGE_INFO_STUBTYPE {
        UNKNOWN = 0,
        REVOKE = 1,
        CIPHERTEXT = 2,
        FUTUREPROOF = 3,
        NON_VERIFIED_TRANSITION = 4,
        UNVERIFIED_TRANSITION = 5,
        VERIFIED_TRANSITION = 6,
        VERIFIED_LOW_UNKNOWN = 7,
        VERIFIED_HIGH = 8,
        VERIFIED_INITIAL_UNKNOWN = 9,
        VERIFIED_INITIAL_LOW = 10,
        VERIFIED_INITIAL_HIGH = 11,
        VERIFIED_TRANSITION_ANY_TO_NONE = 12,
        VERIFIED_TRANSITION_ANY_TO_HIGH = 13,
        VERIFIED_TRANSITION_HIGH_TO_LOW = 14,
        VERIFIED_TRANSITION_HIGH_TO_UNKNOWN = 15,
        VERIFIED_TRANSITION_UNKNOWN_TO_LOW = 16,
        VERIFIED_TRANSITION_LOW_TO_UNKNOWN = 17,
        VERIFIED_TRANSITION_NONE_TO_LOW = 18,
        VERIFIED_TRANSITION_NONE_TO_UNKNOWN = 19,
        GROUP_CREATE = 20,
        GROUP_CHANGE_SUBJECT = 21,
        GROUP_CHANGE_ICON = 22,
        GROUP_CHANGE_INVITE_LINK = 23,
        GROUP_CHANGE_DESCRIPTION = 24,
        GROUP_CHANGE_RESTRICT = 25,
        GROUP_CHANGE_ANNOUNCE = 26,
        GROUP_PARTICIPANT_ADD = 27,
        GROUP_PARTICIPANT_REMOVE = 28,
        GROUP_PARTICIPANT_PROMOTE = 29,
        GROUP_PARTICIPANT_DEMOTE = 30,
        GROUP_PARTICIPANT_INVITE = 31,
        GROUP_PARTICIPANT_LEAVE = 32,
        GROUP_PARTICIPANT_CHANGE_NUMBER = 33,
        BROADCAST_CREATE = 34,
        BROADCAST_ADD = 35,
        BROADCAST_REMOVE = 36,
        GENERIC_NOTIFICATION = 37,
        E2E_IDENTITY_CHANGED = 38,
        E2E_ENCRYPTED = 39,
        CALL_MISSED_VOICE = 40,
        CALL_MISSED_VIDEO = 41,
        INDIVIDUAL_CHANGE_NUMBER = 42,
        GROUP_DELETE = 43,
        GROUP_ANNOUNCE_MODE_MESSAGE_BOUNCE = 44,
        CALL_MISSED_GROUP_VOICE = 45,
        CALL_MISSED_GROUP_VIDEO = 46,
        PAYMENT_CIPHERTEXT = 47,
        PAYMENT_FUTUREPROOF = 48,
        PAYMENT_TRANSACTION_STATUS_UPDATE_FAILED = 49,
        PAYMENT_TRANSACTION_STATUS_UPDATE_REFUNDED = 50,
        PAYMENT_TRANSACTION_STATUS_UPDATE_REFUND_FAILED = 51,
        PAYMENT_TRANSACTION_STATUS_RECEIVER_PENDING_SETUP = 52,
        PAYMENT_TRANSACTION_STATUS_RECEIVER_SUCCESS_AFTER_HICCUP = 53,
        PAYMENT_ACTION_ACCOUNT_SETUP_REMINDER = 54,
        PAYMENT_ACTION_SEND_PAYMENT_REMINDER = 55,
        PAYMENT_ACTION_SEND_PAYMENT_INVITATION = 56,
        PAYMENT_ACTION_REQUEST_DECLINED = 57,
        PAYMENT_ACTION_REQUEST_EXPIRED = 58,
        PAYMENT_ACTION_REQUEST_CANCELLED = 59,
        BIZ_VERIFIED_TRANSITION_TOP_TO_BOTTOM = 60,
        BIZ_VERIFIED_TRANSITION_BOTTOM_TO_TOP = 61,
        BIZ_INTRO_TOP = 62,
        BIZ_INTRO_BOTTOM = 63,
        BIZ_NAME_CHANGE = 64,
        BIZ_MOVE_TO_CONSUMER_APP = 65,
        BIZ_TWO_TIER_MIGRATION_TOP = 66,
        BIZ_TWO_TIER_MIGRATION_BOTTOM = 67,
        OVERSIZED = 68,
        GROUP_CHANGE_NO_FREQUENTLY_FORWARDED = 69,
        GROUP_V4_ADD_INVITE_SENT = 70,
        GROUP_PARTICIPANT_ADD_REQUEST_JOIN = 71,
        CHANGE_EPHEMERAL_SETTING = 72
    }
}
